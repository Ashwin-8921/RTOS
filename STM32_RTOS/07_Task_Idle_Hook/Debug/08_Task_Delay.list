
08_Task_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004774  08004774  00005774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800484c  0800484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004854  08004854  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004854  08004854  00005854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800485c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  20000010  0800486c  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  0800486c  00006028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eff0  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002567  00000000  00000000  00015030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00017598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5a  00000000  00000000  00018320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fc  00000000  00000000  00018d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f461  00000000  00000000  0003ff76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f007b  00000000  00000000  0004f3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003660  00000000  00000000  0013f498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00142af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800475c 	.word	0x0800475c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800475c 	.word	0x0800475c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <uart_msg>:

/* USER CODE BEGIN PFP */
// Send a string through UART2
// Function to send a string message over UART2
void uart_msg(char *s)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 1000);  // transmit a string over UART2
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <uart_msg+0x28>)
 800055a:	f002 f8f3 	bl	8002744 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000280 	.word	0x20000280

0800056c <task1_handler>:


// Task1: Prints a message and LED status every 1 second
void task1_handler(void *p)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	uart_msg("TASK-1 RUNNING\r\n");
 8000574:	4804      	ldr	r0, [pc, #16]	@ (8000588 <task1_handler+0x1c>)
 8000576:	f7ff ffe3 	bl	8000540 <uart_msg>

        vTaskDelay(pdMS_TO_TICKS(5000)); // Delay 1 second
 800057a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800057e:	f003 f909 	bl	8003794 <vTaskDelay>
    	uart_msg("TASK-1 RUNNING\r\n");
 8000582:	bf00      	nop
 8000584:	e7f6      	b.n	8000574 <task1_handler+0x8>
 8000586:	bf00      	nop
 8000588:	08004774 	.word	0x08004774

0800058c <task2_handler>:
}


// Task2: Prints a message and toggles LED every 1 second
void task2_handler(void *p)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

    while (1)
    {
    	uart_msg("TASK-2 RUNNING\r\n");
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <task2_handler+0x1c>)
 8000596:	f7ff ffd3 	bl	8000540 <uart_msg>

        vTaskDelay(pdMS_TO_TICKS(5000)); // Delay 1 second
 800059a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800059e:	f003 f8f9 	bl	8003794 <vTaskDelay>
    	uart_msg("TASK-2 RUNNING\r\n");
 80005a2:	bf00      	nop
 80005a4:	e7f6      	b.n	8000594 <task2_handler+0x8>
 80005a6:	bf00      	nop
 80005a8:	08004788 	.word	0x08004788

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fa35 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f841 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8c1 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f88f 	bl	80006e0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <main+0x68>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fe2f 	bl	800323c <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <main+0x6c>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(task1_handler, "task-1", configMINIMAL_STACK_SIZE, "TASK-1",1,&handle1);//Task 1 creation
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <main+0x70>)
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <main+0x74>)
 80005ee:	2280      	movs	r2, #128	@ 0x80
 80005f0:	490c      	ldr	r1, [pc, #48]	@ (8000624 <main+0x78>)
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <main+0x7c>)
 80005f4:	f002 ff96 	bl	8003524 <xTaskCreate>
  xTaskCreate(task2_handler, "task-2", configMINIMAL_STACK_SIZE, "TASK-2",1,&handle2);//Task 2 creation
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <main+0x80>)
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <main+0x84>)
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	490b      	ldr	r1, [pc, #44]	@ (8000634 <main+0x88>)
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x8c>)
 8000608:	f002 ff8c 	bl	8003524 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f002 fe0f 	bl	800322e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x64>
 8000614:	080047c8 	.word	0x080047c8
 8000618:	20000308 	.word	0x20000308
 800061c:	2000030c 	.word	0x2000030c
 8000620:	0800479c 	.word	0x0800479c
 8000624:	080047a4 	.word	0x080047a4
 8000628:	0800056d 	.word	0x0800056d
 800062c:	20000310 	.word	0x20000310
 8000630:	080047ac 	.word	0x080047ac
 8000634:	080047b4 	.word	0x080047b4
 8000638:	0800058d 	.word	0x0800058d

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	@ 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	@ 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 f85a 	bl	8004704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000662:	f000 fd0f 	bl	8001084 <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800066c:	f000 f8ea 	bl	8000844 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2310      	movs	r3, #16
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800068a:	230a      	movs	r3, #10
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068e:	2307      	movs	r3, #7
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fd46 	bl	8001130 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006aa:	f000 f8cb 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f90e 	bl	80018e8 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f8b7 	bl	8000844 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3758      	adds	r7, #88	@ 0x58
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	@ (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	f001 ffc0 	bl	80026a8 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f889 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000280 	.word	0x20000280
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a2a      	ldr	r2, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xc4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <MX_GPIO_Init+0xc4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a18      	ldr	r2, [pc, #96]	@ (8000804 <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f000 fc3b 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <MX_GPIO_Init+0xc8>)
 80007da:	f000 fa83 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007de:	2320      	movs	r3, #32
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f8:	f000 fa74 	bl	8000ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000800 	.word	0x48000800

0800080c <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

void vApplicationIdleHook(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    static uint8_t printed = 0;

    if (printed == 0)
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <vApplicationIdleHook+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d105      	bne.n	8000824 <vApplicationIdleHook+0x18>
    {
        uart_msg("IDLE TASK HOOK CALLED\r\n");
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <vApplicationIdleHook+0x24>)
 800081a:	f7ff fe91 	bl	8000540 <uart_msg>
        printed = 1;
 800081e:	4b03      	ldr	r3, [pc, #12]	@ (800082c <vApplicationIdleHook+0x20>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
    }
    __WFI();  // Enter low-power mode until next interrupt
 8000824:	bf30      	wfi
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000314 	.word	0x20000314
 8000830:	080047e4 	.word	0x080047e4

08000834 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f002 fd49 	bl	80032d4 <osDelay>
 8000842:	e7fb      	b.n	800083c <StartDefaultTask+0x8>

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <HAL_MspInit+0x4c>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <HAL_MspInit+0x4c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	@ 0x60
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <HAL_MspInit+0x4c>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <HAL_MspInit+0x4c>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	@ 0x58
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_MspInit+0x4c>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 fa00 	bl	8000c92 <HAL_NVIC_SetPriority>
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_UART_MspInit>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0ac      	sub	sp, #176	@ 0xb0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2288      	movs	r2, #136	@ 0x88
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 ff1f 	bl	8004704 <memset>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <HAL_UART_MspInit+0xb0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13b      	bne.n	8000948 <HAL_UART_MspInit+0xa8>
 80008d0:	2302      	movs	r3, #2
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fa27 	bl	8001d30 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x4c>
 80008e8:	f7ff ffac 	bl	8000844 <Error_Handler>
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f0:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 80008f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f8:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	230c      	movs	r3, #12
 800091e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800092e:	2303      	movs	r3, #3
 8000930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000934:	2307      	movs	r3, #7
 8000936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800093a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f000 f9ce 	bl	8000ce4 <HAL_GPIO_Init>
 8000948:	bf00      	nop
 800094a:	37b0      	adds	r7, #176	@ 0xb0
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f8a1 	bl	8000ad8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000996:	f003 fa2f 	bl	8003df8 <xTaskGetSchedulerState>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d001      	beq.n	80009a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009a0:	f003 fc72 	bl	8004288 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SystemInit>:
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopForever+0x2>
 80009d0:	f7ff ffea 	bl	80009a8 <SystemInit>
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopForever+0x6>)
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopForever+0xa>)
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopForever+0xe>)
 80009da:	2300      	movs	r3, #0
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:
 80009de:	58d4      	ldr	r4, [r2, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:
 80009e4:	18c4      	adds	r4, r0, r3
 80009e6:	428c      	cmp	r4, r1
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopForever+0x12>)
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopForever+0x16>)
 80009ee:	2300      	movs	r3, #0
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>
 80009fa:	f003 fe8b 	bl	8004714 <__libc_init_array>
 80009fe:	f7ff fdd5 	bl	80005ac <main>

08000a02 <LoopForever>:
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
 8000a04:	20018000 	.word	0x20018000
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000010 	.word	0x20000010
 8000a10:	0800485c 	.word	0x0800485c
 8000a14:	20000010 	.word	0x20000010
 8000a18:	20001028 	.word	0x20001028

08000a1c <ADC1_2_IRQHandler>:
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <HAL_Init>:
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	2300      	movs	r3, #0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_Init+0x3c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <HAL_Init+0x3c>)
 8000a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f920 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f000 f80f 	bl	8000a60 <HAL_InitTick>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <HAL_Init+0x2e>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	e001      	b.n	8000a52 <HAL_Init+0x32>
 8000a4e:	f7ff feff 	bl	8000850 <HAL_MspInit>
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_InitTick>:
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_InitTick+0x6c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d023      	beq.n	8000abc <HAL_InitTick+0x5c>
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_InitTick+0x70>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f91d 	bl	8000cca <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10f      	bne.n	8000ab6 <HAL_InitTick+0x56>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d809      	bhi.n	8000ab0 <HAL_InitTick+0x50>
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f8f5 	bl	8000c92 <HAL_NVIC_SetPriority>
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_InitTick+0x74>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e007      	b.n	8000ac0 <HAL_InitTick+0x60>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e004      	b.n	8000ac0 <HAL_InitTick+0x60>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e001      	b.n	8000ac0 <HAL_InitTick+0x60>
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000318 	.word	0x20000318

08000b00 <HAL_GetTick>:
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000318 	.word	0x20000318

08000b18 <__NVIC_SetPriorityGrouping>:
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_SetPriority>:
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	@ 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SysTick_Config>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f7ff ff8e 	bl	8000b7c <__NVIC_SetPriority>
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff47 	bl	8000b18 <__NVIC_SetPriorityGrouping>
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	f7ff ff5c 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff8e 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5d 	bl	8000b7c <__NVIC_SetPriority>
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffb0 	bl	8000c38 <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e17f      	b.n	8000ff4 <HAL_GPIO_Init+0x310>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8171 	beq.w	8000fee <HAL_GPIO_Init+0x30a>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d118      	bne.n	8000dc4 <HAL_GPIO_Init+0xe0>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0x11c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x170>
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	6939      	ldr	r1, [r7, #16]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80ac 	beq.w	8000fee <HAL_GPIO_Init+0x30a>
 8000e96:	4b5f      	ldr	r3, [pc, #380]	@ (8001014 <HAL_GPIO_Init+0x330>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8001014 <HAL_GPIO_Init+0x330>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <HAL_GPIO_Init+0x330>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4a5a      	ldr	r2, [pc, #360]	@ (8001018 <HAL_GPIO_Init+0x334>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ed8:	d025      	beq.n	8000f26 <HAL_GPIO_Init+0x242>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4f      	ldr	r2, [pc, #316]	@ (800101c <HAL_GPIO_Init+0x338>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01f      	beq.n	8000f22 <HAL_GPIO_Init+0x23e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8001020 <HAL_GPIO_Init+0x33c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_GPIO_Init+0x23a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	@ (8001024 <HAL_GPIO_Init+0x340>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x236>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8001028 <HAL_GPIO_Init+0x344>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x232>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4b      	ldr	r2, [pc, #300]	@ (800102c <HAL_GPIO_Init+0x348>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x22e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4a      	ldr	r2, [pc, #296]	@ (8001030 <HAL_GPIO_Init+0x34c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x22a>
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	e00c      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e00a      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x244>
 8000f26:	2300      	movs	r3, #0
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	4937      	ldr	r1, [pc, #220]	@ (8001018 <HAL_GPIO_Init+0x334>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x286>
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4a32      	ldr	r2, [pc, #200]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	6093      	str	r3, [r2, #8]
 8000f70:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2b0>
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	60d3      	str	r3, [r2, #12]
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x2da>
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	6053      	str	r3, [r2, #4]
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x304>
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <HAL_GPIO_Init+0x350>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f47f ae78 	bne.w	8000cf4 <HAL_GPIO_Init+0x10>
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40010000 	.word	0x40010000
 800101c:	48000400 	.word	0x48000400
 8001020:	48000800 	.word	0x48000800
 8001024:	48000c00 	.word	0x48000c00
 8001028:	48001000 	.word	0x48001000
 800102c:	48001400 	.word	0x48001400
 8001030:	48001800 	.word	0x48001800
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_WritePin>:
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
 8001054:	e002      	b.n	800105c <HAL_GPIO_WritePin+0x24>
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_PWREx_GetVoltageRange>:
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <HAL_PWREx_GetVoltageRange+0x18>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40007000 	.word	0x40007000

08001084 <HAL_PWREx_ControlVoltageScaling>:
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001092:	d130      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x72>
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800109c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010a0:	d038      	beq.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x90>
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2232      	movs	r2, #50	@ 0x32
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	0c9b      	lsrs	r3, r3, #18
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e002      	b.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010dc:	d102      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f2      	bne.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x46>
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010f0:	d110      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x90>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e00f      	b.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x92>
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001102:	d007      	beq.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x90>
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800110c:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40007000 	.word	0x40007000
 8001128:	20000000 	.word	0x20000000
 800112c:	431bde83 	.word	0x431bde83

08001130 <HAL_RCC_OscConfig>:
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x12>
 800113e:	2301      	movs	r3, #1
 8001140:	e3ca      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001142:	4b97      	ldr	r3, [pc, #604]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	4b94      	ldr	r3, [pc, #592]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 80e4 	beq.w	800132c <HAL_RCC_OscConfig+0x1fc>
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_RCC_OscConfig+0x4a>
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b0c      	cmp	r3, #12
 800116e:	f040 808b 	bne.w	8001288 <HAL_RCC_OscConfig+0x158>
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b01      	cmp	r3, #1
 8001176:	f040 8087 	bne.w	8001288 <HAL_RCC_OscConfig+0x158>
 800117a:	4b89      	ldr	r3, [pc, #548]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x62>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x62>
 800118e:	2301      	movs	r3, #1
 8001190:	e3a2      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	4b82      	ldr	r3, [pc, #520]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_RCC_OscConfig+0x7c>
 80011a2:	4b7f      	ldr	r3, [pc, #508]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011aa:	e005      	b.n	80011b8 <HAL_RCC_OscConfig+0x88>
 80011ac:	4b7c      	ldr	r3, [pc, #496]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d223      	bcs.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd55 	bl	8001c70 <RCC_SetFlashLatencyFromMSIRange>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_OscConfig+0xa0>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e383      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80011d0:	4b73      	ldr	r3, [pc, #460]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a72      	ldr	r2, [pc, #456]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b70      	ldr	r3, [pc, #448]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	496d      	ldr	r1, [pc, #436]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
 80011ee:	4b6c      	ldr	r3, [pc, #432]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4968      	ldr	r1, [pc, #416]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
 8001202:	e025      	b.n	8001250 <HAL_RCC_OscConfig+0x120>
 8001204:	4b66      	ldr	r3, [pc, #408]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a65      	ldr	r2, [pc, #404]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b63      	ldr	r3, [pc, #396]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4960      	ldr	r1, [pc, #384]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
 8001222:	4b5f      	ldr	r3, [pc, #380]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	495b      	ldr	r1, [pc, #364]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <HAL_RCC_OscConfig+0x120>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fd15 	bl	8001c70 <RCC_SetFlashLatencyFromMSIRange>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_RCC_OscConfig+0x120>
 800124c:	2301      	movs	r3, #1
 800124e:	e343      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001250:	f000 fc4a 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	4b52      	ldr	r3, [pc, #328]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	4950      	ldr	r1, [pc, #320]	@ (80013a4 <HAL_RCC_OscConfig+0x274>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	4a4e      	ldr	r2, [pc, #312]	@ (80013a8 <HAL_RCC_OscConfig+0x278>)
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b4e      	ldr	r3, [pc, #312]	@ (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fbf3 	bl	8000a60 <HAL_InitTick>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d052      	beq.n	800132a <HAL_RCC_OscConfig+0x1fa>
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	e327      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d032      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1c6>
 8001290:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a42      	ldr	r2, [pc, #264]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	f7ff fc30 	bl	8000b00 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x186>
 80012a4:	f7ff fc2c 	bl	8000b00 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x186>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e310      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80012b6:	4b3a      	ldr	r3, [pc, #232]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x174>
 80012c2:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a36      	ldr	r2, [pc, #216]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4931      	ldr	r1, [pc, #196]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	492c      	ldr	r1, [pc, #176]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
 80012f4:	e01a      	b.n	800132c <HAL_RCC_OscConfig+0x1fc>
 80012f6:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	f7ff fbfd 	bl	8000b00 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x1ec>
 800130a:	f7ff fbf9 	bl	8000b00 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x1ec>
 8001318:	2303      	movs	r3, #3
 800131a:	e2dd      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x1da>
 8001328:	e000      	b.n	800132c <HAL_RCC_OscConfig+0x1fc>
 800132a:	bf00      	nop
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d074      	beq.n	8001422 <HAL_RCC_OscConfig+0x2f2>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x21a>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d10e      	bne.n	8001362 <HAL_RCC_OscConfig+0x232>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d10b      	bne.n	8001362 <HAL_RCC_OscConfig+0x232>
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d064      	beq.n	8001420 <HAL_RCC_OscConfig+0x2f0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d160      	bne.n	8001420 <HAL_RCC_OscConfig+0x2f0>
 800135e:	2301      	movs	r3, #1
 8001360:	e2ba      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x24a>
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e026      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001382:	d115      	bne.n	80013b0 <HAL_RCC_OscConfig+0x280>
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a02      	ldr	r2, [pc, #8]	@ (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e014      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	08004804 	.word	0x08004804
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004
 80013b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x2c8>
 80013d0:	f7ff fb96 	bl	8000b00 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x2ba>
 80013d8:	f7ff fb92 	bl	8000b00 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x2ba>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e276      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80013ea:	4b92      	ldr	r3, [pc, #584]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x2a8>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x2f2>
 80013f8:	f7ff fb82 	bl	8000b00 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x2e2>
 8001400:	f7ff fb7e 	bl	8000b00 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x2e2>
 800140e:	2303      	movs	r3, #3
 8001410:	e262      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001412:	4b88      	ldr	r3, [pc, #544]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x2d0>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x2f2>
 8001420:	bf00      	nop
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d060      	beq.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b04      	cmp	r3, #4
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x310>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d119      	bne.n	800146e <HAL_RCC_OscConfig+0x33e>
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d116      	bne.n	800146e <HAL_RCC_OscConfig+0x33e>
 8001440:	4b7c      	ldr	r3, [pc, #496]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_OscConfig+0x328>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_OscConfig+0x328>
 8001454:	2301      	movs	r3, #1
 8001456:	e23f      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001458:	4b76      	ldr	r3, [pc, #472]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	4973      	ldr	r1, [pc, #460]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e040      	b.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d023      	beq.n	80014be <HAL_RCC_OscConfig+0x38e>
 8001476:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	f7ff fb3d 	bl	8000b00 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x36c>
 800148a:	f7ff fb39 	bl	8000b00 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x36c>
 8001498:	2303      	movs	r3, #3
 800149a:	e21d      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 800149c:	4b65      	ldr	r3, [pc, #404]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x35a>
 80014a8:	4b62      	ldr	r3, [pc, #392]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	495f      	ldr	r1, [pc, #380]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
 80014bc:	e018      	b.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
 80014be:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80014c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	f7ff fb19 	bl	8000b00 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x3b4>
 80014d2:	f7ff fb15 	bl	8000b00 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3b4>
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1f9      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80014e4:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3a2>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d03c      	beq.n	8001576 <HAL_RCC_OscConfig+0x446>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01c      	beq.n	800153e <HAL_RCC_OscConfig+0x40e>
 8001504:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800150a:	4a4a      	ldr	r2, [pc, #296]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001514:	f7ff faf4 	bl	8000b00 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x3fe>
 800151c:	f7ff faf0 	bl	8000b00 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x3fe>
 800152a:	2303      	movs	r3, #3
 800152c:	e1d4      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ef      	beq.n	800151c <HAL_RCC_OscConfig+0x3ec>
 800153c:	e01b      	b.n	8001576 <HAL_RCC_OscConfig+0x446>
 800153e:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001544:	4a3b      	ldr	r2, [pc, #236]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800154e:	f7ff fad7 	bl	8000b00 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x438>
 8001556:	f7ff fad3 	bl	8000b00 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x438>
 8001564:	2303      	movs	r3, #3
 8001566:	e1b7      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001568:	4b32      	ldr	r3, [pc, #200]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ef      	bne.n	8001556 <HAL_RCC_OscConfig+0x426>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80a6 	beq.w	80016d0 <HAL_RCC_OscConfig+0x5a0>
 8001584:	2300      	movs	r3, #0
 8001586:	77fb      	strb	r3, [r7, #31]
 8001588:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10d      	bne.n	80015b0 <HAL_RCC_OscConfig+0x480>
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001598:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a0:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2301      	movs	r3, #1
 80015ae:	77fb      	strb	r3, [r7, #31]
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <HAL_RCC_OscConfig+0x508>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d118      	bne.n	80015ee <HAL_RCC_OscConfig+0x4be>
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_RCC_OscConfig+0x508>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_RCC_OscConfig+0x508>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	f7ff fa9a 	bl	8000b00 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4b2>
 80015d0:	f7ff fa96 	bl	8000b00 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4b2>
 80015de:	2303      	movs	r3, #3
 80015e0:	e17a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_RCC_OscConfig+0x508>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4a0>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <HAL_RCC_OscConfig+0x4d8>
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001606:	e029      	b.n	800165c <HAL_RCC_OscConfig+0x52c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d115      	bne.n	800163c <HAL_RCC_OscConfig+0x50c>
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001616:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001626:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <HAL_RCC_OscConfig+0x504>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x52c>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	4b9c      	ldr	r3, [pc, #624]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001642:	4a9b      	ldr	r2, [pc, #620]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164c:	4b98      	ldr	r3, [pc, #608]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a97      	ldr	r2, [pc, #604]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d016      	beq.n	8001692 <HAL_RCC_OscConfig+0x562>
 8001664:	f7ff fa4c 	bl	8000b00 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x552>
 800166c:	f7ff fa48 	bl	8000b00 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x552>
 800167e:	2303      	movs	r3, #3
 8001680:	e12a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001682:	4b8b      	ldr	r3, [pc, #556]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0ed      	beq.n	800166c <HAL_RCC_OscConfig+0x53c>
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x58e>
 8001692:	f7ff fa35 	bl	8000b00 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x580>
 800169a:	f7ff fa31 	bl	8000b00 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x580>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e113      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80016b0:	4b7f      	ldr	r3, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ed      	bne.n	800169a <HAL_RCC_OscConfig+0x56a>
 80016be:	7ffb      	ldrb	r3, [r7, #31]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5a0>
 80016c4:	4b7a      	ldr	r3, [pc, #488]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	4a79      	ldr	r2, [pc, #484]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80fe 	beq.w	80018d6 <HAL_RCC_OscConfig+0x7a6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	2b02      	cmp	r3, #2
 80016e0:	f040 80d0 	bne.w	8001884 <HAL_RCC_OscConfig+0x754>
 80016e4:	4b72      	ldr	r3, [pc, #456]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d130      	bne.n	800175a <HAL_RCC_OscConfig+0x62a>
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	3b01      	subs	r3, #1
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	429a      	cmp	r2, r3
 8001708:	d127      	bne.n	800175a <HAL_RCC_OscConfig+0x62a>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	429a      	cmp	r2, r3
 8001718:	d11f      	bne.n	800175a <HAL_RCC_OscConfig+0x62a>
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001724:	2a07      	cmp	r2, #7
 8001726:	bf14      	ite	ne
 8001728:	2201      	movne	r2, #1
 800172a:	2200      	moveq	r2, #0
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	4293      	cmp	r3, r2
 8001730:	d113      	bne.n	800175a <HAL_RCC_OscConfig+0x62a>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	055b      	lsls	r3, r3, #21
 8001742:	429a      	cmp	r2, r3
 8001744:	d109      	bne.n	800175a <HAL_RCC_OscConfig+0x62a>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	3b01      	subs	r3, #1
 8001754:	065b      	lsls	r3, r3, #25
 8001756:	429a      	cmp	r2, r3
 8001758:	d06e      	beq.n	8001838 <HAL_RCC_OscConfig+0x708>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d069      	beq.n	8001834 <HAL_RCC_OscConfig+0x704>
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0x648>
 800176c:	4b50      	ldr	r3, [pc, #320]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0x64c>
 8001778:	2301      	movs	r3, #1
 800177a:	e0ad      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 800177c:	4b4c      	ldr	r3, [pc, #304]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a4b      	ldr	r2, [pc, #300]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	f7ff f9ba 	bl	8000b00 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x672>
 8001790:	f7ff f9b6 	bl	8000b00 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x672>
 800179e:	2303      	movs	r3, #3
 80017a0:	e09a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x660>
 80017ae:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <HAL_RCC_OscConfig+0x784>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017be:	3a01      	subs	r2, #1
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017c8:	0212      	lsls	r2, r2, #8
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017d0:	0852      	lsrs	r2, r2, #1
 80017d2:	3a01      	subs	r2, #1
 80017d4:	0552      	lsls	r2, r2, #21
 80017d6:	4311      	orrs	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017dc:	0852      	lsrs	r2, r2, #1
 80017de:	3a01      	subs	r2, #1
 80017e0:	0652      	lsls	r2, r2, #25
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017e8:	0912      	lsrs	r2, r2, #4
 80017ea:	0452      	lsls	r2, r2, #17
 80017ec:	430a      	orrs	r2, r1
 80017ee:	4930      	ldr	r1, [pc, #192]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2d      	ldr	r2, [pc, #180]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180a:	60d3      	str	r3, [r2, #12]
 800180c:	f7ff f978 	bl	8000b00 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x6f6>
 8001814:	f7ff f974 	bl	8000b00 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x6f6>
 8001822:	2303      	movs	r3, #3
 8001824:	e058      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001826:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x6e4>
 8001832:	e050      	b.n	80018d6 <HAL_RCC_OscConfig+0x7a6>
 8001834:	2301      	movs	r3, #1
 8001836:	e04f      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001838:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d148      	bne.n	80018d6 <HAL_RCC_OscConfig+0x7a6>
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800185a:	60d3      	str	r3, [r2, #12]
 800185c:	f7ff f950 	bl	8000b00 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x746>
 8001864:	f7ff f94c 	bl	8000b00 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x746>
 8001872:	2303      	movs	r3, #3
 8001874:	e030      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x734>
 8001882:	e028      	b.n	80018d6 <HAL_RCC_OscConfig+0x7a6>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d023      	beq.n	80018d2 <HAL_RCC_OscConfig+0x7a2>
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_RCC_OscConfig+0x780>)
 8001890:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	f7ff f933 	bl	8000b00 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]
 800189c:	e00c      	b.n	80018b8 <HAL_RCC_OscConfig+0x788>
 800189e:	f7ff f92f 	bl	8000b00 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d905      	bls.n	80018b8 <HAL_RCC_OscConfig+0x788>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	f99d808c 	.word	0xf99d808c
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_OscConfig+0x7b0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1ec      	bne.n	800189e <HAL_RCC_OscConfig+0x76e>
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_RCC_OscConfig+0x7b0>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4905      	ldr	r1, [pc, #20]	@ (80018e0 <HAL_RCC_OscConfig+0x7b0>)
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_OscConfig+0x7b4>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
 80018d0:	e001      	b.n	80018d6 <HAL_RCC_OscConfig+0x7a6>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x7a8>
 80018d6:	2300      	movs	r3, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	feeefffc 	.word	0xfeeefffc

080018e8 <HAL_RCC_ClockConfig>:
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0e7      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 80018fc:	4b75      	ldr	r3, [pc, #468]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d910      	bls.n	800192c <HAL_RCC_ClockConfig+0x44>
 800190a:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0207 	bic.w	r2, r3, #7
 8001912:	4970      	ldr	r1, [pc, #448]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
 800191a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x44>
 8001928:	2301      	movs	r3, #1
 800192a:	e0cf      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d010      	beq.n	800195a <HAL_RCC_ClockConfig+0x72>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	4b66      	ldr	r3, [pc, #408]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001944:	429a      	cmp	r2, r3
 8001946:	d908      	bls.n	800195a <HAL_RCC_ClockConfig+0x72>
 8001948:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4960      	ldr	r1, [pc, #384]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d04c      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x118>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0x96>
 800196e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d121      	bne.n	80019be <HAL_RCC_ClockConfig+0xd6>
 800197a:	2301      	movs	r3, #1
 800197c:	e0a6      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
 8001986:	4b54      	ldr	r3, [pc, #336]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d115      	bne.n	80019be <HAL_RCC_ClockConfig+0xd6>
 8001992:	2301      	movs	r3, #1
 8001994:	e09a      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xc6>
 800199e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_RCC_ClockConfig+0xd6>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e08e      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_ClockConfig+0xd6>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e086      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 80019be:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 0203 	bic.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4943      	ldr	r1, [pc, #268]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	f7ff f896 	bl	8000b00 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_ClockConfig+0x106>
 80019d8:	f7ff f892 	bl	8000b00 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x106>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e06e      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 80019ee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 020c 	and.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1eb      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xf0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d010      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x146>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d208      	bcs.n	8001a2e <HAL_RCC_ClockConfig+0x146>
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	492b      	ldr	r1, [pc, #172]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
 8001a2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d210      	bcs.n	8001a5e <HAL_RCC_ClockConfig+0x176>
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 0207 	bic.w	r2, r3, #7
 8001a44:	4923      	ldr	r1, [pc, #140]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x176>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e036      	b.n	8001acc <HAL_RCC_ClockConfig+0x1e4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x194>
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4918      	ldr	r1, [pc, #96]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x1b4>
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4910      	ldr	r1, [pc, #64]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
 8001a9c:	f000 f824 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	490b      	ldr	r1, [pc, #44]	@ (8001adc <HAL_RCC_ClockConfig+0x1f4>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1fc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe ffcd 	bl	8000a60 <HAL_InitTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	72fb      	strb	r3, [r7, #11]
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08004804 	.word	0x08004804
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_GetSysClockFreq+0x72>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d11e      	bne.n	8001b5a <HAL_RCC_GetSysClockFreq+0x72>
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_GetSysClockFreq+0x50>
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e005      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x5c>
 8001b38:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0x88>
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x88>
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x7e>
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	e004      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x88>
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0x88>
 8001b6c:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d134      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0xf8>
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d003      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0xac>
 8001b8c:	e005      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0xb2>
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e002      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	bf00      	nop
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	3301      	adds	r3, #1
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	fb03 f202 	mul.w	r2, r3, r2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	0e5b      	lsrs	r3, r3, #25
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	0800481c 	.word	0x0800481c
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08004814 	.word	0x08004814

08001c44 <HAL_RCC_GetPCLK2Freq>:
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	f7ff ffda 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0adb      	lsrs	r3, r3, #11
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	@ (8001c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08004814 	.word	0x08004814

08001c70 <RCC_SetFlashLatencyFromMSIRange>:
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8001c88:	f7ff f9ee 	bl	8001068 <HAL_PWREx_GetVoltageRange>
 8001c8c:	6178      	str	r0, [r7, #20]
 8001c8e:	e014      	b.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	4a24      	ldr	r2, [pc, #144]	@ (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f7ff f9de 	bl	8001068 <HAL_PWREx_GetVoltageRange>
 8001cac:	6178      	str	r0, [r7, #20]
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cc0:	d10b      	bne.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b80      	cmp	r3, #128	@ 0x80
 8001cc6:	d919      	bls.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ccc:	d902      	bls.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e013      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e010      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b80      	cmp	r3, #128	@ 0x80
 8001cde:	d902      	bls.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e00a      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b80      	cmp	r3, #128	@ 0x80
 8001cea:	d102      	bne.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
 8001cec:	2302      	movs	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e004      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b70      	cmp	r3, #112	@ 0x70
 8001cf6:	d101      	bne.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	4909      	ldr	r1, [pc, #36]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0xae>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40022000 	.word	0x40022000

08001d30 <HAL_RCCEx_PeriphCLKConfig>:
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	74fb      	strb	r3, [r7, #19]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	74bb      	strb	r3, [r7, #18]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d041      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d54:	d02a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d5a:	d824      	bhi.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d60:	d008      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d66:	d81e      	bhi.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d70:	d010      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d72:	e018      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d74:	4b86      	ldr	r3, [pc, #536]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a85      	ldr	r2, [pc, #532]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7e:	60d3      	str	r3, [r2, #12]
 8001d80:	e015      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fabb 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	74fb      	strb	r3, [r7, #19]
 8001d92:	e00c      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3320      	adds	r3, #32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fba6 	bl	80024ec <RCCEx_PLLSAI2_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	74fb      	strb	r3, [r7, #19]
 8001da4:	e003      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8001da6:	2301      	movs	r3, #1
 8001da8:	74fb      	strb	r3, [r7, #19]
 8001daa:	e000      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8001dac:	bf00      	nop
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001db4:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dc2:	4973      	ldr	r1, [pc, #460]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dca:	e001      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	74bb      	strb	r3, [r7, #18]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d041      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001de0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001de4:	d02a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001de6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dea:	d824      	bhi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001df0:	d008      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001df2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001df6:	d81e      	bhi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d010      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e02:	e018      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e04:	4b62      	ldr	r3, [pc, #392]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a61      	ldr	r2, [pc, #388]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	60d3      	str	r3, [r2, #12]
 8001e10:	e015      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fa73 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	74fb      	strb	r3, [r7, #19]
 8001e22:	e00c      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3320      	adds	r3, #32
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fb5e 	bl	80024ec <RCCEx_PLLSAI2_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	74fb      	strb	r3, [r7, #19]
 8001e34:	e003      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001e36:	2301      	movs	r3, #1
 8001e38:	74fb      	strb	r3, [r7, #19]
 8001e3a:	e000      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001e3c:	bf00      	nop
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8001e44:	4b52      	ldr	r3, [pc, #328]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e52:	494f      	ldr	r1, [pc, #316]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e5a:	e001      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	74bb      	strb	r3, [r7, #18]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a0 	beq.w	8001fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	747b      	strb	r3, [r7, #17]
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001e88:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	4a40      	ldr	r2, [pc, #256]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e94:	4b3e      	ldr	r3, [pc, #248]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	747b      	strb	r3, [r7, #17]
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	f7fe fe26 	bl	8000b00 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	e009      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001eb8:	f7fe fe22 	bl	8000b00 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	74fb      	strb	r3, [r7, #19]
 8001eca:	e005      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8001ecc:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d15c      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8001ede:	4b2c      	ldr	r3, [pc, #176]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01f      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d019      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a20      	ldr	r2, [pc, #128]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f28:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001f3a:	f7fe fde1 	bl	8000b00 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	e00b      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001f42:	f7fe fddd 	bl	8000b00 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d902      	bls.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001f54:	2303      	movs	r3, #3
 8001f56:	74fb      	strb	r3, [r7, #19]
 8001f58:	e006      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ec      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f7e:	4904      	ldr	r1, [pc, #16]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f86:	e009      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	74bb      	strb	r3, [r7, #18]
 8001f8c:	e006      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
 8001f9c:	7c7b      	ldrb	r3, [r7, #17]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8001fa2:	4b9e      	ldr	r3, [pc, #632]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a9d      	ldr	r2, [pc, #628]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8001fba:	4b98      	ldr	r3, [pc, #608]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc0:	f023 0203 	bic.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc8:	4994      	ldr	r1, [pc, #592]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	f023 020c 	bic.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fea:	498c      	ldr	r1, [pc, #560]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001ffe:	4b87      	ldr	r3, [pc, #540]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002004:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4983      	ldr	r1, [pc, #524]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8002020:	4b7e      	ldr	r3, [pc, #504]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	497b      	ldr	r1, [pc, #492]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002042:	4b76      	ldr	r3, [pc, #472]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	4972      	ldr	r1, [pc, #456]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002064:	4b6d      	ldr	r3, [pc, #436]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	496a      	ldr	r1, [pc, #424]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002086:	4b65      	ldr	r3, [pc, #404]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	4961      	ldr	r1, [pc, #388]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80020a8:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	4959      	ldr	r1, [pc, #356]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80020ca:	4b54      	ldr	r3, [pc, #336]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d8:	4950      	ldr	r1, [pc, #320]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80020ec:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	4948      	ldr	r1, [pc, #288]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800210e:	4b43      	ldr	r3, [pc, #268]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002114:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	493f      	ldr	r1, [pc, #252]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d028      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002130:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800213e:	4937      	ldr	r1, [pc, #220]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800214e:	d106      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002150:	4b32      	ldr	r3, [pc, #200]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a31      	ldr	r2, [pc, #196]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
 800215c:	e011      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002162:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002166:	d10c      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f8c8 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	74fb      	strb	r3, [r7, #19]
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	74bb      	strb	r3, [r7, #18]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d028      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	491f      	ldr	r1, [pc, #124]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ac:	d106      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80021ae:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a1a      	ldr	r2, [pc, #104]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021b8:	60d3      	str	r3, [r2, #12]
 80021ba:	e011      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2101      	movs	r1, #1
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f899 	bl	8002304 <RCCEx_PLLSAI1_Config>
 80021d2:	4603      	mov	r3, r0
 80021d4:	74fb      	strb	r3, [r7, #19]
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02b      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800220a:	d109      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a02      	ldr	r2, [pc, #8]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
 8002218:	e014      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f867 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02f      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002250:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800225e:	4928      	ldr	r1, [pc, #160]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800226a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800226e:	d10d      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	2102      	movs	r1, #2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f844 	bl	8002304 <RCCEx_PLLSAI1_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d014      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	74bb      	strb	r3, [r7, #18]
 800228a:	e011      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3320      	adds	r3, #32
 800229a:	2102      	movs	r1, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f925 	bl	80024ec <RCCEx_PLLSAI2_Config>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80022bc:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ca:	490d      	ldr	r1, [pc, #52]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ee:	4904      	ldr	r1, [pc, #16]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022f6:	7cbb      	ldrb	r3, [r7, #18]
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000

08002304 <RCCEx_PLLSAI1_Config>:
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <RCCEx_PLLSAI1_Config+0x4c>
 800231e:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d10d      	bne.n	800234a <RCCEx_PLLSAI1_Config+0x46>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x46>
 8002336:	4b6c      	ldr	r3, [pc, #432]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d047      	beq.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e044      	b.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d018      	beq.n	800238a <RCCEx_PLLSAI1_Config+0x86>
 8002358:	2b03      	cmp	r3, #3
 800235a:	d825      	bhi.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d002      	beq.n	8002366 <RCCEx_PLLSAI1_Config+0x62>
 8002360:	2b02      	cmp	r3, #2
 8002362:	d009      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x74>
 8002364:	e020      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11d      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e01a      	b.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
 8002378:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e013      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
 800238a:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
 8002396:	4b54      	ldr	r3, [pc, #336]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e006      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e004      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
 80023b6:	bf00      	nop
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
 80023be:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	430b      	orrs	r3, r1
 80023d4:	4944      	ldr	r1, [pc, #272]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d17d      	bne.n	80024dc <RCCEx_PLLSAI1_Config+0x1d8>
 80023e0:	4b41      	ldr	r3, [pc, #260]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a40      	ldr	r2, [pc, #256]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	f7fe fb88 	bl	8000b00 <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
 80023f2:	e009      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
 80023f4:	f7fe fb84 	bl	8000b00 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
 8002402:	2303      	movs	r3, #3
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e005      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x110>
 8002408:	4b37      	ldr	r3, [pc, #220]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ef      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0xf0>
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d160      	bne.n	80024dc <RCCEx_PLLSAI1_Config+0x1d8>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d111      	bne.n	8002444 <RCCEx_PLLSAI1_Config+0x140>
 8002420:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	0211      	lsls	r1, r2, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	0912      	lsrs	r2, r2, #4
 8002438:	0452      	lsls	r2, r2, #17
 800243a:	430a      	orrs	r2, r1
 800243c:	492a      	ldr	r1, [pc, #168]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	610b      	str	r3, [r1, #16]
 8002442:	e027      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x190>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d112      	bne.n	8002470 <RCCEx_PLLSAI1_Config+0x16c>
 800244a:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002452:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6892      	ldr	r2, [r2, #8]
 800245a:	0211      	lsls	r1, r2, #8
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6912      	ldr	r2, [r2, #16]
 8002460:	0852      	lsrs	r2, r2, #1
 8002462:	3a01      	subs	r2, #1
 8002464:	0552      	lsls	r2, r2, #21
 8002466:	430a      	orrs	r2, r1
 8002468:	491f      	ldr	r1, [pc, #124]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	610b      	str	r3, [r1, #16]
 800246e:	e011      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x190>
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002478:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	0211      	lsls	r1, r2, #8
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6952      	ldr	r2, [r2, #20]
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	0652      	lsls	r2, r2, #25
 800248c:	430a      	orrs	r2, r1
 800248e:	4916      	ldr	r1, [pc, #88]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	610b      	str	r3, [r1, #16]
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	f7fe fb2e 	bl	8000b00 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
 80024a6:	e009      	b.n	80024bc <RCCEx_PLLSAI1_Config+0x1b8>
 80024a8:	f7fe fb2a 	bl	8000b00 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <RCCEx_PLLSAI1_Config+0x1b8>
 80024b6:	2303      	movs	r3, #3
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e005      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0x1c4>
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ef      	beq.n	80024a8 <RCCEx_PLLSAI1_Config+0x1a4>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <RCCEx_PLLSAI1_Config+0x1d8>
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	610b      	str	r3, [r1, #16]
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000

080024ec <RCCEx_PLLSAI2_Config>:
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	4b6a      	ldr	r3, [pc, #424]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <RCCEx_PLLSAI2_Config+0x4c>
 8002506:	4b67      	ldr	r3, [pc, #412]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <RCCEx_PLLSAI2_Config+0x46>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0x46>
 800251e:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d047      	beq.n	80025c2 <RCCEx_PLLSAI2_Config+0xd6>
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e044      	b.n	80025c2 <RCCEx_PLLSAI2_Config+0xd6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d018      	beq.n	8002572 <RCCEx_PLLSAI2_Config+0x86>
 8002540:	2b03      	cmp	r3, #3
 8002542:	d825      	bhi.n	8002590 <RCCEx_PLLSAI2_Config+0xa4>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d002      	beq.n	800254e <RCCEx_PLLSAI2_Config+0x62>
 8002548:	2b02      	cmp	r3, #2
 800254a:	d009      	beq.n	8002560 <RCCEx_PLLSAI2_Config+0x74>
 800254c:	e020      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xa4>
 800254e:	4b55      	ldr	r3, [pc, #340]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11d      	bne.n	8002596 <RCCEx_PLLSAI2_Config+0xaa>
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e01a      	b.n	8002596 <RCCEx_PLLSAI2_Config+0xaa>
 8002560:	4b50      	ldr	r3, [pc, #320]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d116      	bne.n	800259a <RCCEx_PLLSAI2_Config+0xae>
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e013      	b.n	800259a <RCCEx_PLLSAI2_Config+0xae>
 8002572:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <RCCEx_PLLSAI2_Config+0xb2>
 800257e:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <RCCEx_PLLSAI2_Config+0xb2>
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e006      	b.n	800259e <RCCEx_PLLSAI2_Config+0xb2>
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e004      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0xb4>
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0xb4>
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0xb4>
 800259e:	bf00      	nop
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <RCCEx_PLLSAI2_Config+0xd6>
 80025a6:	4b3f      	ldr	r3, [pc, #252]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	430b      	orrs	r3, r1
 80025bc:	4939      	ldr	r1, [pc, #228]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d167      	bne.n	8002698 <RCCEx_PLLSAI2_Config+0x1ac>
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a35      	ldr	r2, [pc, #212]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	f7fe fa94 	bl	8000b00 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
 80025da:	e009      	b.n	80025f0 <RCCEx_PLLSAI2_Config+0x104>
 80025dc:	f7fe fa90 	bl	8000b00 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <RCCEx_PLLSAI2_Config+0x104>
 80025ea:	2303      	movs	r3, #3
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e005      	b.n	80025fc <RCCEx_PLLSAI2_Config+0x110>
 80025f0:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ef      	bne.n	80025dc <RCCEx_PLLSAI2_Config+0xf0>
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d14a      	bne.n	8002698 <RCCEx_PLLSAI2_Config+0x1ac>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <RCCEx_PLLSAI2_Config+0x140>
 8002608:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	0211      	lsls	r1, r2, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68d2      	ldr	r2, [r2, #12]
 800261e:	0912      	lsrs	r2, r2, #4
 8002620:	0452      	lsls	r2, r2, #17
 8002622:	430a      	orrs	r2, r1
 8002624:	491f      	ldr	r1, [pc, #124]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	614b      	str	r3, [r1, #20]
 800262a:	e011      	b.n	8002650 <RCCEx_PLLSAI2_Config+0x164>
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002634:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	0211      	lsls	r1, r2, #8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6912      	ldr	r2, [r2, #16]
 8002642:	0852      	lsrs	r2, r2, #1
 8002644:	3a01      	subs	r2, #1
 8002646:	0652      	lsls	r2, r2, #25
 8002648:	430a      	orrs	r2, r1
 800264a:	4916      	ldr	r1, [pc, #88]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	614b      	str	r3, [r1, #20]
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	f7fe fa50 	bl	8000b00 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
 8002662:	e009      	b.n	8002678 <RCCEx_PLLSAI2_Config+0x18c>
 8002664:	f7fe fa4c 	bl	8000b00 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <RCCEx_PLLSAI2_Config+0x18c>
 8002672:	2303      	movs	r3, #3
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e005      	b.n	8002684 <RCCEx_PLLSAI2_Config+0x198>
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <RCCEx_PLLSAI2_Config+0x178>
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <RCCEx_PLLSAI2_Config+0x1ac>
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4904      	ldr	r1, [pc, #16]	@ (80026a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002694:	4313      	orrs	r3, r2
 8002696:	614b      	str	r3, [r1, #20]
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_UART_Init>:
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x12>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e040      	b.n	800273c <HAL_UART_Init+0x94>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_UART_Init+0x28>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe f8e8 	bl	80008a0 <HAL_UART_MspInit>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	@ 0x24
 80026d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_UART_Init+0x4c>
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fb6a 	bl	8002dc8 <UART_AdvFeatureConfig>
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f8af 	bl	8002858 <UART_SetConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_UART_Init+0x5c>
 8002700:	2301      	movs	r3, #1
 8002702:	e01b      	b.n	800273c <HAL_UART_Init+0x94>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fbe9 	bl	8002f0c <UART_CheckIdleState>
 800273a:	4603      	mov	r3, r0
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_UART_Transmit>:
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	80fb      	strh	r3, [r7, #6]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002758:	2b20      	cmp	r3, #32
 800275a:	d177      	bne.n	800284c <HAL_UART_Transmit+0x108>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_Transmit+0x24>
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_UART_Transmit+0x28>
 8002768:	2301      	movs	r3, #1
 800276a:	e070      	b.n	800284e <HAL_UART_Transmit+0x10a>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2221      	movs	r2, #33	@ 0x21
 8002778:	67da      	str	r2, [r3, #124]	@ 0x7c
 800277a:	f7fe f9c1 	bl	8000b00 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002798:	d108      	bne.n	80027ac <HAL_UART_Transmit+0x68>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <HAL_UART_Transmit+0x68>
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e003      	b.n	80027b4 <HAL_UART_Transmit+0x70>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e02f      	b.n	8002816 <HAL_UART_Transmit+0xd2>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	2180      	movs	r1, #128	@ 0x80
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fc4b 	bl	800305c <UART_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_UART_Transmit+0x92>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027d2:	2303      	movs	r3, #3
 80027d4:	e03b      	b.n	800284e <HAL_UART_Transmit+0x10a>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <HAL_UART_Transmit+0xb0>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e8:	b292      	uxth	r2, r2
 80027ea:	851a      	strh	r2, [r3, #40]	@ 0x28
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	3302      	adds	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e007      	b.n	8002804 <HAL_UART_Transmit+0xc0>
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1c9      	bne.n	80027b6 <HAL_UART_Transmit+0x72>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	2140      	movs	r1, #64	@ 0x40
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fc15 	bl	800305c <UART_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_UART_Transmit+0xfe>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800283e:	2303      	movs	r3, #3
 8002840:	e005      	b.n	800284e <HAL_UART_Transmit+0x10a>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <HAL_UART_Transmit+0x10a>
 800284c:	2302      	movs	r3, #2
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <UART_SetConfig>:
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b08a      	sub	sp, #40	@ 0x28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4313      	orrs	r3, r2
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4ba4      	ldr	r3, [pc, #656]	@ (8002b18 <UART_SetConfig+0x2c0>)
 8002888:	4013      	ands	r3, r2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002890:	430b      	orrs	r3, r1
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a99      	ldr	r2, [pc, #612]	@ (8002b1c <UART_SetConfig+0x2c4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <UART_SetConfig+0x6c>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	4313      	orrs	r3, r2
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a90      	ldr	r2, [pc, #576]	@ (8002b20 <UART_SetConfig+0x2c8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d126      	bne.n	8002930 <UART_SetConfig+0xd8>
 80028e2:	4b90      	ldr	r3, [pc, #576]	@ (8002b24 <UART_SetConfig+0x2cc>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d81b      	bhi.n	8002928 <UART_SetConfig+0xd0>
 80028f0:	a201      	add	r2, pc, #4	@ (adr r2, 80028f8 <UART_SetConfig+0xa0>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002919 	.word	0x08002919
 8002900:	08002911 	.word	0x08002911
 8002904:	08002921 	.word	0x08002921
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290e:	e116      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002916:	e112      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002918:	2304      	movs	r3, #4
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291e:	e10e      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002920:	2308      	movs	r3, #8
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002926:	e10a      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800292e:	e106      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7c      	ldr	r2, [pc, #496]	@ (8002b28 <UART_SetConfig+0x2d0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d138      	bne.n	80029ac <UART_SetConfig+0x154>
 800293a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <UART_SetConfig+0x2cc>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d82d      	bhi.n	80029a4 <UART_SetConfig+0x14c>
 8002948:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <UART_SetConfig+0xf8>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029a5 	.word	0x080029a5
 8002960:	08002995 	.word	0x08002995
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029a5 	.word	0x080029a5
 8002970:	0800298d 	.word	0x0800298d
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029a5 	.word	0x080029a5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298a:	e0d8      	b.n	8002b3e <UART_SetConfig+0x2e6>
 800298c:	2302      	movs	r3, #2
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002992:	e0d4      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002994:	2304      	movs	r3, #4
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299a:	e0d0      	b.n	8002b3e <UART_SetConfig+0x2e6>
 800299c:	2308      	movs	r3, #8
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e0cc      	b.n	8002b3e <UART_SetConfig+0x2e6>
 80029a4:	2310      	movs	r3, #16
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029aa:	e0c8      	b.n	8002b3e <UART_SetConfig+0x2e6>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b2c <UART_SetConfig+0x2d4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d125      	bne.n	8002a02 <UART_SetConfig+0x1aa>
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <UART_SetConfig+0x2cc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029c0:	2b30      	cmp	r3, #48	@ 0x30
 80029c2:	d016      	beq.n	80029f2 <UART_SetConfig+0x19a>
 80029c4:	2b30      	cmp	r3, #48	@ 0x30
 80029c6:	d818      	bhi.n	80029fa <UART_SetConfig+0x1a2>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d00a      	beq.n	80029e2 <UART_SetConfig+0x18a>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d814      	bhi.n	80029fa <UART_SetConfig+0x1a2>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <UART_SetConfig+0x182>
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d008      	beq.n	80029ea <UART_SetConfig+0x192>
 80029d8:	e00f      	b.n	80029fa <UART_SetConfig+0x1a2>
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e0:	e0ad      	b.n	8002b3e <UART_SetConfig+0x2e6>
 80029e2:	2302      	movs	r3, #2
 80029e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e8:	e0a9      	b.n	8002b3e <UART_SetConfig+0x2e6>
 80029ea:	2304      	movs	r3, #4
 80029ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f0:	e0a5      	b.n	8002b3e <UART_SetConfig+0x2e6>
 80029f2:	2308      	movs	r3, #8
 80029f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f8:	e0a1      	b.n	8002b3e <UART_SetConfig+0x2e6>
 80029fa:	2310      	movs	r3, #16
 80029fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a00:	e09d      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a4a      	ldr	r2, [pc, #296]	@ (8002b30 <UART_SetConfig+0x2d8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d125      	bne.n	8002a58 <UART_SetConfig+0x200>
 8002a0c:	4b45      	ldr	r3, [pc, #276]	@ (8002b24 <UART_SetConfig+0x2cc>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a18:	d016      	beq.n	8002a48 <UART_SetConfig+0x1f0>
 8002a1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a1c:	d818      	bhi.n	8002a50 <UART_SetConfig+0x1f8>
 8002a1e:	2b80      	cmp	r3, #128	@ 0x80
 8002a20:	d00a      	beq.n	8002a38 <UART_SetConfig+0x1e0>
 8002a22:	2b80      	cmp	r3, #128	@ 0x80
 8002a24:	d814      	bhi.n	8002a50 <UART_SetConfig+0x1f8>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <UART_SetConfig+0x1d8>
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d008      	beq.n	8002a40 <UART_SetConfig+0x1e8>
 8002a2e:	e00f      	b.n	8002a50 <UART_SetConfig+0x1f8>
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a36:	e082      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3e:	e07e      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a40:	2304      	movs	r3, #4
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a46:	e07a      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a48:	2308      	movs	r3, #8
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4e:	e076      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a50:	2310      	movs	r3, #16
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a56:	e072      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a35      	ldr	r2, [pc, #212]	@ (8002b34 <UART_SetConfig+0x2dc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12a      	bne.n	8002ab8 <UART_SetConfig+0x260>
 8002a62:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <UART_SetConfig+0x2cc>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a70:	d01a      	beq.n	8002aa8 <UART_SetConfig+0x250>
 8002a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a76:	d81b      	bhi.n	8002ab0 <UART_SetConfig+0x258>
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7c:	d00c      	beq.n	8002a98 <UART_SetConfig+0x240>
 8002a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a82:	d815      	bhi.n	8002ab0 <UART_SetConfig+0x258>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <UART_SetConfig+0x238>
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a8c:	d008      	beq.n	8002aa0 <UART_SetConfig+0x248>
 8002a8e:	e00f      	b.n	8002ab0 <UART_SetConfig+0x258>
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a96:	e052      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e04e      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e04a      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e046      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e042      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <UART_SetConfig+0x2c4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d13a      	bne.n	8002b38 <UART_SetConfig+0x2e0>
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <UART_SetConfig+0x2cc>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002acc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ad0:	d01a      	beq.n	8002b08 <UART_SetConfig+0x2b0>
 8002ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ad6:	d81b      	bhi.n	8002b10 <UART_SetConfig+0x2b8>
 8002ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002adc:	d00c      	beq.n	8002af8 <UART_SetConfig+0x2a0>
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae2:	d815      	bhi.n	8002b10 <UART_SetConfig+0x2b8>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <UART_SetConfig+0x298>
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aec:	d008      	beq.n	8002b00 <UART_SetConfig+0x2a8>
 8002aee:	e00f      	b.n	8002b10 <UART_SetConfig+0x2b8>
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af6:	e022      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002af8:	2302      	movs	r3, #2
 8002afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afe:	e01e      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002b00:	2304      	movs	r3, #4
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e01a      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002b08:	2308      	movs	r3, #8
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0e:	e016      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002b10:	2310      	movs	r3, #16
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e012      	b.n	8002b3e <UART_SetConfig+0x2e6>
 8002b18:	efff69f3 	.word	0xefff69f3
 8002b1c:	40008000 	.word	0x40008000
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40004400 	.word	0x40004400
 8002b2c:	40004800 	.word	0x40004800
 8002b30:	40004c00 	.word	0x40004c00
 8002b34:	40005000 	.word	0x40005000
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a9f      	ldr	r2, [pc, #636]	@ (8002dc0 <UART_SetConfig+0x568>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d17a      	bne.n	8002c3e <UART_SetConfig+0x3e6>
 8002b48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d824      	bhi.n	8002b9a <UART_SetConfig+0x342>
 8002b50:	a201      	add	r2, pc, #4	@ (adr r2, 8002b58 <UART_SetConfig+0x300>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b9b 	.word	0x08002b9b
 8002b60:	08002b85 	.word	0x08002b85
 8002b64:	08002b9b 	.word	0x08002b9b
 8002b68:	08002b8b 	.word	0x08002b8b
 8002b6c:	08002b9b 	.word	0x08002b9b
 8002b70:	08002b9b 	.word	0x08002b9b
 8002b74:	08002b9b 	.word	0x08002b9b
 8002b78:	08002b93 	.word	0x08002b93
 8002b7c:	f7ff f84c 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002b80:	61f8      	str	r0, [r7, #28]
 8002b82:	e010      	b.n	8002ba6 <UART_SetConfig+0x34e>
 8002b84:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc4 <UART_SetConfig+0x56c>)
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e00d      	b.n	8002ba6 <UART_SetConfig+0x34e>
 8002b8a:	f7fe ffad 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002b8e:	61f8      	str	r0, [r7, #28]
 8002b90:	e009      	b.n	8002ba6 <UART_SetConfig+0x34e>
 8002b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	e005      	b.n	8002ba6 <UART_SetConfig+0x34e>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ba4:	bf00      	nop
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80fb 	beq.w	8002da4 <UART_SetConfig+0x54c>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d305      	bcc.n	8002bca <UART_SetConfig+0x372>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	031b      	lsls	r3, r3, #12
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d903      	bls.n	8002bd2 <UART_SetConfig+0x37a>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bd0:	e0e8      	b.n	8002da4 <UART_SetConfig+0x54c>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	4615      	mov	r5, r2
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	022b      	lsls	r3, r5, #8
 8002be4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002be8:	0222      	lsls	r2, r4, #8
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	6849      	ldr	r1, [r1, #4]
 8002bee:	0849      	lsrs	r1, r1, #1
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4681      	mov	r9, r0
 8002bf6:	eb12 0a08 	adds.w	sl, r2, r8
 8002bfa:	eb43 0b09 	adc.w	fp, r3, r9
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c0c:	4650      	mov	r0, sl
 8002c0e:	4659      	mov	r1, fp
 8002c10:	f7fd fae6 	bl	80001e0 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c22:	d308      	bcc.n	8002c36 <UART_SetConfig+0x3de>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c2a:	d204      	bcs.n	8002c36 <UART_SetConfig+0x3de>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	e0b6      	b.n	8002da4 <UART_SetConfig+0x54c>
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c3c:	e0b2      	b.n	8002da4 <UART_SetConfig+0x54c>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c46:	d15e      	bne.n	8002d06 <UART_SetConfig+0x4ae>
 8002c48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d828      	bhi.n	8002ca2 <UART_SetConfig+0x44a>
 8002c50:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <UART_SetConfig+0x400>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c8d 	.word	0x08002c8d
 8002c64:	08002ca3 	.word	0x08002ca3
 8002c68:	08002c93 	.word	0x08002c93
 8002c6c:	08002ca3 	.word	0x08002ca3
 8002c70:	08002ca3 	.word	0x08002ca3
 8002c74:	08002ca3 	.word	0x08002ca3
 8002c78:	08002c9b 	.word	0x08002c9b
 8002c7c:	f7fe ffcc 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002c80:	61f8      	str	r0, [r7, #28]
 8002c82:	e014      	b.n	8002cae <UART_SetConfig+0x456>
 8002c84:	f7fe ffde 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8002c88:	61f8      	str	r0, [r7, #28]
 8002c8a:	e010      	b.n	8002cae <UART_SetConfig+0x456>
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <UART_SetConfig+0x56c>)
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	e00d      	b.n	8002cae <UART_SetConfig+0x456>
 8002c92:	f7fe ff29 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002c96:	61f8      	str	r0, [r7, #28]
 8002c98:	e009      	b.n	8002cae <UART_SetConfig+0x456>
 8002c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e005      	b.n	8002cae <UART_SetConfig+0x456>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cac:	bf00      	nop
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d077      	beq.n	8002da4 <UART_SetConfig+0x54c>
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005a      	lsls	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	441a      	add	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d916      	bls.n	8002cfe <UART_SetConfig+0x4a6>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d212      	bcs.n	8002cfe <UART_SetConfig+0x4a6>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f023 030f 	bic.w	r3, r3, #15
 8002ce0:	82fb      	strh	r3, [r7, #22]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	8afb      	ldrh	r3, [r7, #22]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	82fb      	strh	r3, [r7, #22]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	8afa      	ldrh	r2, [r7, #22]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	e052      	b.n	8002da4 <UART_SetConfig+0x54c>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d04:	e04e      	b.n	8002da4 <UART_SetConfig+0x54c>
 8002d06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d827      	bhi.n	8002d5e <UART_SetConfig+0x506>
 8002d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <UART_SetConfig+0x4bc>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d39 	.word	0x08002d39
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08002d5f 	.word	0x08002d5f
 8002d24:	08002d4f 	.word	0x08002d4f
 8002d28:	08002d5f 	.word	0x08002d5f
 8002d2c:	08002d5f 	.word	0x08002d5f
 8002d30:	08002d5f 	.word	0x08002d5f
 8002d34:	08002d57 	.word	0x08002d57
 8002d38:	f7fe ff6e 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	61f8      	str	r0, [r7, #28]
 8002d3e:	e014      	b.n	8002d6a <UART_SetConfig+0x512>
 8002d40:	f7fe ff80 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8002d44:	61f8      	str	r0, [r7, #28]
 8002d46:	e010      	b.n	8002d6a <UART_SetConfig+0x512>
 8002d48:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <UART_SetConfig+0x56c>)
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	e00d      	b.n	8002d6a <UART_SetConfig+0x512>
 8002d4e:	f7fe fecb 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002d52:	61f8      	str	r0, [r7, #28]
 8002d54:	e009      	b.n	8002d6a <UART_SetConfig+0x512>
 8002d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	e005      	b.n	8002d6a <UART_SetConfig+0x512>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d68:	bf00      	nop
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d019      	beq.n	8002da4 <UART_SetConfig+0x54c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	085a      	lsrs	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	441a      	add	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b0f      	cmp	r3, #15
 8002d88:	d909      	bls.n	8002d9e <UART_SetConfig+0x546>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d90:	d205      	bcs.n	8002d9e <UART_SetConfig+0x546>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e002      	b.n	8002da4 <UART_SetConfig+0x54c>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	669a      	str	r2, [r3, #104]	@ 0x68
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002db0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002db4:	4618      	mov	r0, r3
 8002db6:	3728      	adds	r7, #40	@ 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40008000 	.word	0x40008000
 8002dc4:	00f42400 	.word	0x00f42400

08002dc8 <UART_AdvFeatureConfig>:
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <UART_AdvFeatureConfig+0x2a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <UART_AdvFeatureConfig+0x4c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <UART_AdvFeatureConfig+0x6e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_AdvFeatureConfig+0x90>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <UART_AdvFeatureConfig+0xb2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <UART_AdvFeatureConfig+0xd4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01a      	beq.n	8002ede <UART_AdvFeatureConfig+0x116>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec6:	d10a      	bne.n	8002ede <UART_AdvFeatureConfig+0x116>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0x138>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <UART_CheckIdleState>:
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b098      	sub	sp, #96	@ 0x60
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002f1c:	f7fd fdf0 	bl	8000b00 <HAL_GetTick>
 8002f20:	6578      	str	r0, [r7, #84]	@ 0x54
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d12e      	bne.n	8002f8e <UART_CheckIdleState+0x82>
 8002f30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f88c 	bl	800305c <UART_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d021      	beq.n	8002f8e <UART_CheckIdleState+0x82>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e6      	bne.n	8002f4a <UART_CheckIdleState+0x3e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e062      	b.n	8003054 <UART_CheckIdleState+0x148>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d149      	bne.n	8003030 <UART_CheckIdleState+0x124>
 8002f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f856 	bl	800305c <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03c      	beq.n	8003030 <UART_CheckIdleState+0x124>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e6      	bne.n	8002fb6 <UART_CheckIdleState+0xaa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3308      	adds	r3, #8
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3308      	adds	r3, #8
 8003006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003008:	61fa      	str	r2, [r7, #28]
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	69b9      	ldr	r1, [r7, #24]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e5      	bne.n	8002fe8 <UART_CheckIdleState+0xdc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800302c:	2303      	movs	r3, #3
 800302e:	e011      	b.n	8003054 <UART_CheckIdleState+0x148>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	665a      	str	r2, [r3, #100]	@ 0x64
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8003052:	2300      	movs	r3, #0
 8003054:	4618      	mov	r0, r3
 8003056:	3758      	adds	r7, #88	@ 0x58
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_WaitOnFlagUntilTimeout>:
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	71fb      	strb	r3, [r7, #7]
 800306c:	e04f      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d04b      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003076:	f7fd fd43 	bl	8000b00 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <UART_WaitOnFlagUntilTimeout+0x30>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <UART_WaitOnFlagUntilTimeout+0x34>
 800308c:	2303      	movs	r3, #3
 800308e:	e04e      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xd2>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d037      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b80      	cmp	r3, #128	@ 0x80
 80030a2:	d034      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b40      	cmp	r3, #64	@ 0x40
 80030a8:	d031      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d110      	bne.n	80030da <UART_WaitOnFlagUntilTimeout+0x7e>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2208      	movs	r2, #8
 80030be:	621a      	str	r2, [r3, #32]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f838 	bl	8003136 <UART_EndRxTransfer>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2208      	movs	r2, #8
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80030d6:	2301      	movs	r3, #1
 80030d8:	e029      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xd2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e8:	d111      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030f2:	621a      	str	r2, [r3, #32]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f81e 	bl	8003136 <UART_EndRxTransfer>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800310a:	2303      	movs	r3, #3
 800310c:	e00f      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xd2>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4013      	ands	r3, r2
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	429a      	cmp	r2, r3
 800312a:	d0a0      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0x12>
 800312c:	2300      	movs	r3, #0
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <UART_EndRxTransfer>:
 8003136:	b480      	push	{r7}
 8003138:	b095      	sub	sp, #84	@ 0x54
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
 8003144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	633b      	str	r3, [r7, #48]	@ 0x30
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315c:	643b      	str	r3, [r7, #64]	@ 0x40
 800315e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800316a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e6      	bne.n	800313e <UART_EndRxTransfer+0x8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3308      	adds	r3, #8
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3308      	adds	r3, #8
 800318e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003190:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e5      	bne.n	8003170 <UART_EndRxTransfer+0x3a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d118      	bne.n	80031de <UART_EndRxTransfer+0xa8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f023 0310 	bic.w	r3, r3, #16
 80031c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	617a      	str	r2, [r7, #20]
 80031ce:	6979      	ldr	r1, [r7, #20]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e6      	bne.n	80031ac <UART_EndRxTransfer+0x76>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	@ 0x60
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	669a      	str	r2, [r3, #104]	@ 0x68
 80031f2:	bf00      	nop
 80031f4:	3754      	adds	r7, #84	@ 0x54
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800320c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003210:	2b84      	cmp	r3, #132	@ 0x84
 8003212:	d005      	beq.n	8003220 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003214:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	3303      	adds	r3, #3
 800321e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003220:	68fb      	ldr	r3, [r7, #12]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003232:	f000 fae5 	bl	8003800 <vTaskStartScheduler>
  
  return osOK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}

0800323c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800323c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af04      	add	r7, sp, #16
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d020      	beq.n	8003290 <osThreadCreate+0x54>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01c      	beq.n	8003290 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685c      	ldr	r4, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691e      	ldr	r6, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ffc8 	bl	80031fe <makeFreeRtosPriority>
 800326e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	9100      	str	r1, [sp, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	4632      	mov	r2, r6
 8003282:	4629      	mov	r1, r5
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f8ed 	bl	8003464 <xTaskCreateStatic>
 800328a:	4603      	mov	r3, r0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e01c      	b.n	80032ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685c      	ldr	r4, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ffaa 	bl	80031fe <makeFreeRtosPriority>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	9200      	str	r2, [sp, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4632      	mov	r2, r6
 80032b8:	4629      	mov	r1, r5
 80032ba:	4620      	mov	r0, r4
 80032bc:	f000 f932 	bl	8003524 <xTaskCreate>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <osDelay+0x16>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	e000      	b.n	80032ec <osDelay+0x18>
 80032ea:	2301      	movs	r3, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fa51 	bl	8003794 <vTaskDelay>
  
  return osOK;
 80032f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f103 0208 	add.w	r2, r3, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f103 0208 	add.w	r2, r3, #8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f103 0208 	add.w	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d103      	bne.n	80033be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e00c      	b.n	80033d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3308      	adds	r3, #8
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e002      	b.n	80033cc <vListInsert+0x2e>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d2f6      	bcs.n	80033c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6852      	ldr	r2, [r2, #4]
 8003430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d103      	bne.n	8003444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	@ 0x38
 8003468:	af04      	add	r7, sp, #16
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	61fb      	str	r3, [r7, #28]
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	e7fd      	b.n	80034aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ae:	2354      	movs	r3, #84	@ 0x54
 80034b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b54      	cmp	r3, #84	@ 0x54
 80034b6:	d00b      	beq.n	80034d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	61bb      	str	r3, [r7, #24]
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01e      	beq.n	8003516 <xTaskCreateStatic+0xb2>
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01b      	beq.n	8003516 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034f0:	2300      	movs	r3, #0
 80034f2:	9303      	str	r3, [sp, #12]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f850 	bl	80035ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800350e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003510:	f000 f8d6 	bl	80036c0 <prvAddNewTaskToReadyList>
 8003514:	e001      	b.n	800351a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800351a:	697b      	ldr	r3, [r7, #20]
	}
 800351c:	4618      	mov	r0, r3
 800351e:	3728      	adds	r7, #40	@ 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	@ 0x30
 8003528:	af04      	add	r7, sp, #16
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fef5 	bl	8004328 <pvPortMalloc>
 800353e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00e      	beq.n	8003564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003546:	2054      	movs	r0, #84	@ 0x54
 8003548:	f000 feee 	bl	8004328 <pvPortMalloc>
 800354c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
 800355a:	e005      	b.n	8003568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800355c:	6978      	ldr	r0, [r7, #20]
 800355e:	f000 ffb1 	bl	80044c4 <vPortFree>
 8003562:	e001      	b.n	8003568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d017      	beq.n	800359e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	2300      	movs	r3, #0
 800357a:	9303      	str	r3, [sp, #12]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	9302      	str	r3, [sp, #8]
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f80e 	bl	80035ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003592:	69f8      	ldr	r0, [r7, #28]
 8003594:	f000 f894 	bl	80036c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e002      	b.n	80035a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035a4:	69bb      	ldr	r3, [r7, #24]
	}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035c6:	3b01      	subs	r3, #1
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f023 0307 	bic.w	r3, r3, #7
 80035d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	617b      	str	r3, [r7, #20]
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01f      	beq.n	800363e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e012      	b.n	800362a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	7819      	ldrb	r1, [r3, #0]
 800360c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	3334      	adds	r3, #52	@ 0x34
 8003614:	460a      	mov	r2, r1
 8003616:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3301      	adds	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b0f      	cmp	r3, #15
 800362e:	d9e9      	bls.n	8003604 <prvInitialiseNewTask+0x56>
 8003630:	e000      	b.n	8003634 <prvInitialiseNewTask+0x86>
			{
				break;
 8003632:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800363c:	e003      	b.n	8003646 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	2b06      	cmp	r3, #6
 800364a:	d901      	bls.n	8003650 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800364c:	2306      	movs	r3, #6
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	2200      	movs	r2, #0
 8003660:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	3304      	adds	r3, #4
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fe68 	bl	800333c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	3318      	adds	r3, #24
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fe63 	bl	800333c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	f1c3 0207 	rsb	r2, r3, #7
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	69b8      	ldr	r0, [r7, #24]
 80036a0:	f000 fc2e 	bl	8003f00 <pxPortInitialiseStack>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036b6:	bf00      	nop
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036c8:	f000 fd4e 	bl	8004168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <prvAddNewTaskToReadyList+0xb8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <prvAddNewTaskToReadyList+0xb8>)
 80036d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036d6:	4b29      	ldr	r3, [pc, #164]	@ (800377c <prvAddNewTaskToReadyList+0xbc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036de:	4a27      	ldr	r2, [pc, #156]	@ (800377c <prvAddNewTaskToReadyList+0xbc>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036e4:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <prvAddNewTaskToReadyList+0xb8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d110      	bne.n	800370e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036ec:	f000 fac6 	bl	8003c7c <prvInitialiseTaskLists>
 80036f0:	e00d      	b.n	800370e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036f2:	4b23      	ldr	r3, [pc, #140]	@ (8003780 <prvAddNewTaskToReadyList+0xc0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036fa:	4b20      	ldr	r3, [pc, #128]	@ (800377c <prvAddNewTaskToReadyList+0xbc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d802      	bhi.n	800370e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <prvAddNewTaskToReadyList+0xbc>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800370e:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <prvAddNewTaskToReadyList+0xc4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <prvAddNewTaskToReadyList+0xc4>)
 8003716:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <prvAddNewTaskToReadyList+0xc8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <prvAddNewTaskToReadyList+0xc8>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4a15      	ldr	r2, [pc, #84]	@ (800378c <prvAddNewTaskToReadyList+0xcc>)
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7ff fe08 	bl	8003356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003746:	f000 fd41 	bl	80041cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <prvAddNewTaskToReadyList+0xc0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00e      	beq.n	8003770 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <prvAddNewTaskToReadyList+0xbc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d207      	bcs.n	8003770 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <prvAddNewTaskToReadyList+0xd0>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000041c 	.word	0x2000041c
 800377c:	2000031c 	.word	0x2000031c
 8003780:	20000428 	.word	0x20000428
 8003784:	20000438 	.word	0x20000438
 8003788:	20000424 	.word	0x20000424
 800378c:	20000320 	.word	0x20000320
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d018      	beq.n	80037d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037a6:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <vTaskDelay+0x64>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <vTaskDelay+0x32>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	60bb      	str	r3, [r7, #8]
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037c6:	f000 f87d 	bl	80038c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ca:	2100      	movs	r1, #0
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb31 	bl	8003e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037d2:	f000 f885 	bl	80038e0 <xTaskResumeAll>
 80037d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037de:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <vTaskDelay+0x68>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000444 	.word	0x20000444
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800380e:	463a      	mov	r2, r7
 8003810:	1d39      	adds	r1, r7, #4
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe78 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	9202      	str	r2, [sp, #8]
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	2300      	movs	r3, #0
 800382c:	460a      	mov	r2, r1
 800382e:	491f      	ldr	r1, [pc, #124]	@ (80038ac <vTaskStartScheduler+0xac>)
 8003830:	481f      	ldr	r0, [pc, #124]	@ (80038b0 <vTaskStartScheduler+0xb0>)
 8003832:	f7ff fe17 	bl	8003464 <xTaskCreateStatic>
 8003836:	4603      	mov	r3, r0
 8003838:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <vTaskStartScheduler+0xb4>)
 800383a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800383c:	4b1d      	ldr	r3, [pc, #116]	@ (80038b4 <vTaskStartScheduler+0xb4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e001      	b.n	800384e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d116      	bne.n	8003882 <vTaskStartScheduler+0x82>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	613b      	str	r3, [r7, #16]
}
 8003866:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003868:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <vTaskStartScheduler+0xb8>)
 800386a:	f04f 32ff 	mov.w	r2, #4294967295
 800386e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003870:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <vTaskStartScheduler+0xbc>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003876:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <vTaskStartScheduler+0xc0>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800387c:	f000 fbd0 	bl	8004020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003880:	e00f      	b.n	80038a2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d10b      	bne.n	80038a2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	60fb      	str	r3, [r7, #12]
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <vTaskStartScheduler+0x9e>
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	080047fc 	.word	0x080047fc
 80038b0:	08003c49 	.word	0x08003c49
 80038b4:	20000440 	.word	0x20000440
 80038b8:	2000043c 	.word	0x2000043c
 80038bc:	20000428 	.word	0x20000428
 80038c0:	20000420 	.word	0x20000420

080038c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <vTaskSuspendAll+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a03      	ldr	r2, [pc, #12]	@ (80038dc <vTaskSuspendAll+0x18>)
 80038d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000444 	.word	0x20000444

080038e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ee:	4b42      	ldr	r3, [pc, #264]	@ (80039f8 <xTaskResumeAll+0x118>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <xTaskResumeAll+0x2e>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	603b      	str	r3, [r7, #0]
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	e7fd      	b.n	800390a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800390e:	f000 fc2b 	bl	8004168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003912:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <xTaskResumeAll+0x118>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3b01      	subs	r3, #1
 8003918:	4a37      	ldr	r2, [pc, #220]	@ (80039f8 <xTaskResumeAll+0x118>)
 800391a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391c:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <xTaskResumeAll+0x118>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d161      	bne.n	80039e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <xTaskResumeAll+0x11c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05d      	beq.n	80039e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800392c:	e02e      	b.n	800398c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392e:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <xTaskResumeAll+0x120>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3318      	adds	r3, #24
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fd68 	bl	8003410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3304      	adds	r3, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fd63 	bl	8003410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	2201      	movs	r2, #1
 8003950:	409a      	lsls	r2, r3
 8003952:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <xTaskResumeAll+0x124>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <xTaskResumeAll+0x124>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a27      	ldr	r2, [pc, #156]	@ (8003a08 <xTaskResumeAll+0x128>)
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7ff fcef 	bl	8003356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <xTaskResumeAll+0x12c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003986:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <xTaskResumeAll+0x130>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800398c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <xTaskResumeAll+0x120>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1cc      	bne.n	800392e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800399a:	f000 fa0d 	bl	8003db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800399e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <xTaskResumeAll+0x134>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039aa:	f000 f837 	bl	8003a1c <xTaskIncrementTick>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039b4:	4b16      	ldr	r3, [pc, #88]	@ (8003a10 <xTaskResumeAll+0x130>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f1      	bne.n	80039aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039c6:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <xTaskResumeAll+0x134>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039cc:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <xTaskResumeAll+0x130>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <xTaskResumeAll+0x138>)
 80039da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039e8:	f000 fbf0 	bl	80041cc <vPortExitCritical>

	return xAlreadyYielded;
 80039ec:	68bb      	ldr	r3, [r7, #8]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000444 	.word	0x20000444
 80039fc:	2000041c 	.word	0x2000041c
 8003a00:	200003dc 	.word	0x200003dc
 8003a04:	20000424 	.word	0x20000424
 8003a08:	20000320 	.word	0x20000320
 8003a0c:	2000031c 	.word	0x2000031c
 8003a10:	20000430 	.word	0x20000430
 8003a14:	2000042c 	.word	0x2000042c
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a26:	4b4f      	ldr	r3, [pc, #316]	@ (8003b64 <xTaskIncrementTick+0x148>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 808f 	bne.w	8003b4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a30:	4b4d      	ldr	r3, [pc, #308]	@ (8003b68 <xTaskIncrementTick+0x14c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a38:	4a4b      	ldr	r2, [pc, #300]	@ (8003b68 <xTaskIncrementTick+0x14c>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d121      	bne.n	8003a88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a44:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <xTaskIncrementTick+0x150>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	603b      	str	r3, [r7, #0]
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	e7fd      	b.n	8003a62 <xTaskIncrementTick+0x46>
 8003a66:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <xTaskIncrementTick+0x150>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	4b40      	ldr	r3, [pc, #256]	@ (8003b70 <xTaskIncrementTick+0x154>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a3e      	ldr	r2, [pc, #248]	@ (8003b6c <xTaskIncrementTick+0x150>)
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4a3e      	ldr	r2, [pc, #248]	@ (8003b70 <xTaskIncrementTick+0x154>)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <xTaskIncrementTick+0x158>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a3c      	ldr	r2, [pc, #240]	@ (8003b74 <xTaskIncrementTick+0x158>)
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	f000 f998 	bl	8003db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a88:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <xTaskIncrementTick+0x15c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d348      	bcc.n	8003b24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a92:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <xTaskIncrementTick+0x150>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9c:	4b36      	ldr	r3, [pc, #216]	@ (8003b78 <xTaskIncrementTick+0x15c>)
 8003a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa2:	601a      	str	r2, [r3, #0]
					break;
 8003aa4:	e03e      	b.n	8003b24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa6:	4b31      	ldr	r3, [pc, #196]	@ (8003b6c <xTaskIncrementTick+0x150>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d203      	bcs.n	8003ac6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003abe:	4a2e      	ldr	r2, [pc, #184]	@ (8003b78 <xTaskIncrementTick+0x15c>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ac4:	e02e      	b.n	8003b24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fca0 	bl	8003410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3318      	adds	r3, #24
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fc97 	bl	8003410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <xTaskIncrementTick+0x160>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <xTaskIncrementTick+0x160>)
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <xTaskIncrementTick+0x164>)
 8003b02:	441a      	add	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7ff fc23 	bl	8003356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <xTaskIncrementTick+0x168>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3b9      	bcc.n	8003a92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b22:	e7b6      	b.n	8003a92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b24:	4b17      	ldr	r3, [pc, #92]	@ (8003b84 <xTaskIncrementTick+0x168>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	4915      	ldr	r1, [pc, #84]	@ (8003b80 <xTaskIncrementTick+0x164>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d901      	bls.n	8003b40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <xTaskIncrementTick+0x16c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e004      	b.n	8003b58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <xTaskIncrementTick+0x170>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3301      	adds	r3, #1
 8003b54:	4a0d      	ldr	r2, [pc, #52]	@ (8003b8c <xTaskIncrementTick+0x170>)
 8003b56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b58:	697b      	ldr	r3, [r7, #20]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000444 	.word	0x20000444
 8003b68:	20000420 	.word	0x20000420
 8003b6c:	200003d4 	.word	0x200003d4
 8003b70:	200003d8 	.word	0x200003d8
 8003b74:	20000434 	.word	0x20000434
 8003b78:	2000043c 	.word	0x2000043c
 8003b7c:	20000424 	.word	0x20000424
 8003b80:	20000320 	.word	0x20000320
 8003b84:	2000031c 	.word	0x2000031c
 8003b88:	20000430 	.word	0x20000430
 8003b8c:	2000042c 	.word	0x2000042c

08003b90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b96:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <vTaskSwitchContext+0xa4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b9e:	4b26      	ldr	r3, [pc, #152]	@ (8003c38 <vTaskSwitchContext+0xa8>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ba4:	e040      	b.n	8003c28 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ba6:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <vTaskSwitchContext+0xa8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bac:	4b23      	ldr	r3, [pc, #140]	@ (8003c3c <vTaskSwitchContext+0xac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	f1c3 031f 	rsb	r3, r3, #31
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	491f      	ldr	r1, [pc, #124]	@ (8003c40 <vTaskSwitchContext+0xb0>)
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <vTaskSwitchContext+0x5e>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	607b      	str	r3, [r7, #4]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <vTaskSwitchContext+0x5a>
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4a11      	ldr	r2, [pc, #68]	@ (8003c40 <vTaskSwitchContext+0xb0>)
 8003bfa:	4413      	add	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d104      	bne.n	8003c1e <vTaskSwitchContext+0x8e>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4a07      	ldr	r2, [pc, #28]	@ (8003c44 <vTaskSwitchContext+0xb4>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000444 	.word	0x20000444
 8003c38:	20000430 	.word	0x20000430
 8003c3c:	20000424 	.word	0x20000424
 8003c40:	20000320 	.word	0x20000320
 8003c44:	2000031c 	.word	0x2000031c

08003c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c50:	f000 f854 	bl	8003cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <prvIdleTask+0x2c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d907      	bls.n	8003c6c <prvIdleTask+0x24>
			{
				taskYIELD();
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <prvIdleTask+0x30>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003c6c:	f7fc fdce 	bl	800080c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003c70:	e7ee      	b.n	8003c50 <prvIdleTask+0x8>
 8003c72:	bf00      	nop
 8003c74:	20000320 	.word	0x20000320
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	e00c      	b.n	8003ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <prvInitialiseTaskLists+0x60>)
 8003c94:	4413      	add	r3, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fb30 	bl	80032fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d9ef      	bls.n	8003c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ca8:	480d      	ldr	r0, [pc, #52]	@ (8003ce0 <prvInitialiseTaskLists+0x64>)
 8003caa:	f7ff fb27 	bl	80032fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cae:	480d      	ldr	r0, [pc, #52]	@ (8003ce4 <prvInitialiseTaskLists+0x68>)
 8003cb0:	f7ff fb24 	bl	80032fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cb4:	480c      	ldr	r0, [pc, #48]	@ (8003ce8 <prvInitialiseTaskLists+0x6c>)
 8003cb6:	f7ff fb21 	bl	80032fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cba:	480c      	ldr	r0, [pc, #48]	@ (8003cec <prvInitialiseTaskLists+0x70>)
 8003cbc:	f7ff fb1e 	bl	80032fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cc0:	480b      	ldr	r0, [pc, #44]	@ (8003cf0 <prvInitialiseTaskLists+0x74>)
 8003cc2:	f7ff fb1b 	bl	80032fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <prvInitialiseTaskLists+0x78>)
 8003cc8:	4a05      	ldr	r2, [pc, #20]	@ (8003ce0 <prvInitialiseTaskLists+0x64>)
 8003cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <prvInitialiseTaskLists+0x7c>)
 8003cce:	4a05      	ldr	r2, [pc, #20]	@ (8003ce4 <prvInitialiseTaskLists+0x68>)
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000320 	.word	0x20000320
 8003ce0:	200003ac 	.word	0x200003ac
 8003ce4:	200003c0 	.word	0x200003c0
 8003ce8:	200003dc 	.word	0x200003dc
 8003cec:	200003f0 	.word	0x200003f0
 8003cf0:	20000408 	.word	0x20000408
 8003cf4:	200003d4 	.word	0x200003d4
 8003cf8:	200003d8 	.word	0x200003d8

08003cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d02:	e019      	b.n	8003d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d04:	f000 fa30 	bl	8004168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d08:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <prvCheckTasksWaitingTermination+0x50>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fb7b 	bl	8003410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <prvCheckTasksWaitingTermination+0x54>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	4a0b      	ldr	r2, [pc, #44]	@ (8003d50 <prvCheckTasksWaitingTermination+0x54>)
 8003d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <prvCheckTasksWaitingTermination+0x58>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <prvCheckTasksWaitingTermination+0x58>)
 8003d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d2e:	f000 fa4d 	bl	80041cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f810 	bl	8003d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d38:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <prvCheckTasksWaitingTermination+0x58>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e1      	bne.n	8003d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200003f0 	.word	0x200003f0
 8003d50:	2000041c 	.word	0x2000041c
 8003d54:	20000404 	.word	0x20000404

08003d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fba8 	bl	80044c4 <vPortFree>
				vPortFree( pxTCB );
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fba5 	bl	80044c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d7a:	e019      	b.n	8003db0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d103      	bne.n	8003d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fb9c 	bl	80044c4 <vPortFree>
	}
 8003d8c:	e010      	b.n	8003db0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d00b      	beq.n	8003db0 <prvDeleteTCB+0x58>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <prvDeleteTCB+0x54>
	}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <prvResetNextTaskUnblockTime+0x38>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <prvResetNextTaskUnblockTime+0x3c>)
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dd0:	e008      	b.n	8003de4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd2:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <prvResetNextTaskUnblockTime+0x38>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a04      	ldr	r2, [pc, #16]	@ (8003df4 <prvResetNextTaskUnblockTime+0x3c>)
 8003de2:	6013      	str	r3, [r2, #0]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	200003d4 	.word	0x200003d4
 8003df4:	2000043c 	.word	0x2000043c

08003df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <xTaskGetSchedulerState+0x34>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e06:	2301      	movs	r3, #1
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	e008      	b.n	8003e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0c:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <xTaskGetSchedulerState+0x38>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e14:	2302      	movs	r3, #2
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	e001      	b.n	8003e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e1e:	687b      	ldr	r3, [r7, #4]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000428 	.word	0x20000428
 8003e30:	20000444 	.word	0x20000444

08003e34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e44:	4b28      	ldr	r3, [pc, #160]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fae0 	bl	8003410 <uxListRemove>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e56:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	4b21      	ldr	r3, [pc, #132]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	4a20      	ldr	r2, [pc, #128]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d10a      	bne.n	8003e8c <prvAddCurrentTaskToDelayedList+0x58>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	481a      	ldr	r0, [pc, #104]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e86:	f7ff fa66 	bl	8003356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e8a:	e026      	b.n	8003eda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d209      	bcs.n	8003eb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7ff fa74 	bl	800339e <vListInsert>
}
 8003eb6:	e010      	b.n	8003eda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7ff fa6a 	bl	800339e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eca:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d202      	bcs.n	8003eda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ed4:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000420 	.word	0x20000420
 8003ee8:	2000031c 	.word	0x2000031c
 8003eec:	20000424 	.word	0x20000424
 8003ef0:	20000408 	.word	0x20000408
 8003ef4:	200003d8 	.word	0x200003d8
 8003ef8:	200003d4 	.word	0x200003d4
 8003efc:	2000043c 	.word	0x2000043c

08003f00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3b04      	subs	r3, #4
 8003f10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3b04      	subs	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3b04      	subs	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f30:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <pxPortInitialiseStack+0x64>)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b14      	subs	r3, #20
 8003f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b04      	subs	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f06f 0202 	mvn.w	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b20      	subs	r3, #32
 8003f54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	08003f69 	.word	0x08003f69

08003f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f72:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <prvTaskExitError+0x58>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d00b      	beq.n	8003f94 <prvTaskExitError+0x2c>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <prvTaskExitError+0x28>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60bb      	str	r3, [r7, #8]
}
 8003fa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fa8:	bf00      	nop
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0fc      	beq.n	8003faa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	2000000c 	.word	0x2000000c
	...

08003fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fd0:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <pxCurrentTCBConst2>)
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	6808      	ldr	r0, [r1, #0]
 8003fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	f380 8809 	msr	PSP, r0
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f380 8811 	msr	BASEPRI, r0
 8003fea:	4770      	bx	lr
 8003fec:	f3af 8000 	nop.w

08003ff0 <pxCurrentTCBConst2>:
 8003ff0:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop

08003ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ff8:	4808      	ldr	r0, [pc, #32]	@ (800401c <prvPortStartFirstTask+0x24>)
 8003ffa:	6800      	ldr	r0, [r0, #0]
 8003ffc:	6800      	ldr	r0, [r0, #0]
 8003ffe:	f380 8808 	msr	MSP, r0
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f380 8814 	msr	CONTROL, r0
 800400a:	b662      	cpsie	i
 800400c:	b661      	cpsie	f
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	df00      	svc	0
 8004018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800401a:	bf00      	nop
 800401c:	e000ed08 	.word	0xe000ed08

08004020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004026:	4b47      	ldr	r3, [pc, #284]	@ (8004144 <xPortStartScheduler+0x124>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a47      	ldr	r2, [pc, #284]	@ (8004148 <xPortStartScheduler+0x128>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10b      	bne.n	8004048 <xPortStartScheduler+0x28>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004048:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <xPortStartScheduler+0x124>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3f      	ldr	r2, [pc, #252]	@ (800414c <xPortStartScheduler+0x12c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10b      	bne.n	800406a <xPortStartScheduler+0x4a>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	613b      	str	r3, [r7, #16]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800406a:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <xPortStartScheduler+0x130>)
 800406c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	22ff      	movs	r2, #255	@ 0xff
 800407a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <xPortStartScheduler+0x134>)
 8004090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004092:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <xPortStartScheduler+0x138>)
 8004094:	2207      	movs	r2, #7
 8004096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004098:	e009      	b.n	80040ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800409a:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <xPortStartScheduler+0x138>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004158 <xPortStartScheduler+0x138>)
 80040a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b80      	cmp	r3, #128	@ 0x80
 80040b8:	d0ef      	beq.n	800409a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040ba:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <xPortStartScheduler+0x138>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1c3 0307 	rsb	r3, r3, #7
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d00b      	beq.n	80040de <xPortStartScheduler+0xbe>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60bb      	str	r3, [r7, #8]
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	e7fd      	b.n	80040da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040de:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <xPortStartScheduler+0x138>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <xPortStartScheduler+0x138>)
 80040e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <xPortStartScheduler+0x138>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040f0:	4a19      	ldr	r2, [pc, #100]	@ (8004158 <xPortStartScheduler+0x138>)
 80040f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040fc:	4b17      	ldr	r3, [pc, #92]	@ (800415c <xPortStartScheduler+0x13c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a16      	ldr	r2, [pc, #88]	@ (800415c <xPortStartScheduler+0x13c>)
 8004102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004108:	4b14      	ldr	r3, [pc, #80]	@ (800415c <xPortStartScheduler+0x13c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a13      	ldr	r2, [pc, #76]	@ (800415c <xPortStartScheduler+0x13c>)
 800410e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004114:	f000 f8da 	bl	80042cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <xPortStartScheduler+0x140>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800411e:	f000 f8f9 	bl	8004314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <xPortStartScheduler+0x144>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a0f      	ldr	r2, [pc, #60]	@ (8004164 <xPortStartScheduler+0x144>)
 8004128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800412c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800412e:	f7ff ff63 	bl	8003ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004132:	f7ff fd2d 	bl	8003b90 <vTaskSwitchContext>
	prvTaskExitError();
 8004136:	f7ff ff17 	bl	8003f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	e000ed00 	.word	0xe000ed00
 8004148:	410fc271 	.word	0x410fc271
 800414c:	410fc270 	.word	0x410fc270
 8004150:	e000e400 	.word	0xe000e400
 8004154:	20000448 	.word	0x20000448
 8004158:	2000044c 	.word	0x2000044c
 800415c:	e000ed20 	.word	0xe000ed20
 8004160:	2000000c 	.word	0x2000000c
 8004164:	e000ef34 	.word	0xe000ef34

08004168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
}
 8004180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <vPortEnterCritical+0x5c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3301      	adds	r3, #1
 8004188:	4a0e      	ldr	r2, [pc, #56]	@ (80041c4 <vPortEnterCritical+0x5c>)
 800418a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800418c:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <vPortEnterCritical+0x5c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d110      	bne.n	80041b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <vPortEnterCritical+0x60>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	603b      	str	r3, [r7, #0]
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	e7fd      	b.n	80041b2 <vPortEnterCritical+0x4a>
	}
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041d2:	4b12      	ldr	r3, [pc, #72]	@ (800421c <vPortExitCritical+0x50>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <vPortExitCritical+0x26>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	607b      	str	r3, [r7, #4]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <vPortExitCritical+0x50>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4a08      	ldr	r2, [pc, #32]	@ (800421c <vPortExitCritical+0x50>)
 80041fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041fc:	4b07      	ldr	r3, [pc, #28]	@ (800421c <vPortExitCritical+0x50>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <vPortExitCritical+0x44>
 8004204:	2300      	movs	r3, #0
 8004206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800420e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	2000000c 	.word	0x2000000c

08004220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004220:	f3ef 8009 	mrs	r0, PSP
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <pxCurrentTCBConst>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f01e 0f10 	tst.w	lr, #16
 8004230:	bf08      	it	eq
 8004232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	6010      	str	r0, [r2, #0]
 800423c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004244:	f380 8811 	msr	BASEPRI, r0
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f7ff fc9e 	bl	8003b90 <vTaskSwitchContext>
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f380 8811 	msr	BASEPRI, r0
 800425c:	bc09      	pop	{r0, r3}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004266:	f01e 0f10 	tst.w	lr, #16
 800426a:	bf08      	it	eq
 800426c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004270:	f380 8809 	msr	PSP, r0
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst>:
 8004280:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
}
 80042a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042a2:	f7ff fbbb 	bl	8003a1c <xTaskIncrementTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <xPortSysTickHandler+0x40>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f383 8811 	msr	BASEPRI, r3
}
 80042be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <vPortSetupTimerInterrupt+0x38>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <vPortSetupTimerInterrupt+0x3c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <vPortSetupTimerInterrupt+0x40>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <vPortSetupTimerInterrupt+0x44>)
 80042ea:	3b01      	subs	r3, #1
 80042ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ee:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010
 8004304:	e000e018 	.word	0xe000e018
 8004308:	20000000 	.word	0x20000000
 800430c:	10624dd3 	.word	0x10624dd3
 8004310:	e000e014 	.word	0xe000e014

08004314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004324 <vPortEnableVFP+0x10>
 8004318:	6801      	ldr	r1, [r0, #0]
 800431a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800431e:	6001      	str	r1, [r0, #0]
 8004320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004322:	bf00      	nop
 8004324:	e000ed88 	.word	0xe000ed88

08004328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004334:	f7ff fac6 	bl	80038c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004338:	4b5c      	ldr	r3, [pc, #368]	@ (80044ac <pvPortMalloc+0x184>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004340:	f000 f924 	bl	800458c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004344:	4b5a      	ldr	r3, [pc, #360]	@ (80044b0 <pvPortMalloc+0x188>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 8095 	bne.w	800447c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01e      	beq.n	8004396 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004358:	2208      	movs	r2, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d015      	beq.n	8004396 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <pvPortMalloc+0x6e>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	617b      	str	r3, [r7, #20]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d06f      	beq.n	800447c <pvPortMalloc+0x154>
 800439c:	4b45      	ldr	r3, [pc, #276]	@ (80044b4 <pvPortMalloc+0x18c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d86a      	bhi.n	800447c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043a6:	4b44      	ldr	r3, [pc, #272]	@ (80044b8 <pvPortMalloc+0x190>)
 80043a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043aa:	4b43      	ldr	r3, [pc, #268]	@ (80044b8 <pvPortMalloc+0x190>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043b0:	e004      	b.n	80043bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d903      	bls.n	80043ce <pvPortMalloc+0xa6>
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f1      	bne.n	80043b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043ce:	4b37      	ldr	r3, [pc, #220]	@ (80044ac <pvPortMalloc+0x184>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d051      	beq.n	800447c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2208      	movs	r2, #8
 80043de:	4413      	add	r3, r2
 80043e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	2308      	movs	r3, #8
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d920      	bls.n	800443c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <pvPortMalloc+0xfc>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	613b      	str	r3, [r7, #16]
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	e7fd      	b.n	8004420 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1ad2      	subs	r2, r2, r3
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004436:	69b8      	ldr	r0, [r7, #24]
 8004438:	f000 f90a 	bl	8004650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800443c:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <pvPortMalloc+0x18c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <pvPortMalloc+0x18c>)
 8004448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800444a:	4b1a      	ldr	r3, [pc, #104]	@ (80044b4 <pvPortMalloc+0x18c>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <pvPortMalloc+0x194>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d203      	bcs.n	800445e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004456:	4b17      	ldr	r3, [pc, #92]	@ (80044b4 <pvPortMalloc+0x18c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <pvPortMalloc+0x194>)
 800445c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	4b13      	ldr	r3, [pc, #76]	@ (80044b0 <pvPortMalloc+0x188>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	431a      	orrs	r2, r3
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004472:	4b13      	ldr	r3, [pc, #76]	@ (80044c0 <pvPortMalloc+0x198>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	4a11      	ldr	r2, [pc, #68]	@ (80044c0 <pvPortMalloc+0x198>)
 800447a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800447c:	f7ff fa30 	bl	80038e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <pvPortMalloc+0x17a>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60fb      	str	r3, [r7, #12]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <pvPortMalloc+0x176>
	return pvReturn;
 80044a2:	69fb      	ldr	r3, [r7, #28]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	@ 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20001010 	.word	0x20001010
 80044b0:	20001024 	.word	0x20001024
 80044b4:	20001014 	.word	0x20001014
 80044b8:	20001008 	.word	0x20001008
 80044bc:	20001018 	.word	0x20001018
 80044c0:	2000101c 	.word	0x2000101c

080044c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d04f      	beq.n	8004576 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044d6:	2308      	movs	r3, #8
 80044d8:	425b      	negs	r3, r3
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <vPortFree+0xbc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <vPortFree+0x46>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	60fb      	str	r3, [r7, #12]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <vPortFree+0x66>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60bb      	str	r3, [r7, #8]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <vPortFree+0xbc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01e      	beq.n	8004576 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11a      	bne.n	8004576 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <vPortFree+0xbc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	43db      	mvns	r3, r3
 800454a:	401a      	ands	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004550:	f7ff f9b8 	bl	80038c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <vPortFree+0xc0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4413      	add	r3, r2
 800455e:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <vPortFree+0xc0>)
 8004560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004562:	6938      	ldr	r0, [r7, #16]
 8004564:	f000 f874 	bl	8004650 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004568:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <vPortFree+0xc4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a06      	ldr	r2, [pc, #24]	@ (8004588 <vPortFree+0xc4>)
 8004570:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004572:	f7ff f9b5 	bl	80038e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004576:	bf00      	nop
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20001024 	.word	0x20001024
 8004584:	20001014 	.word	0x20001014
 8004588:	20001020 	.word	0x20001020

0800458c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004592:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004598:	4b27      	ldr	r3, [pc, #156]	@ (8004638 <prvHeapInit+0xac>)
 800459a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3307      	adds	r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0307 	bic.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004638 <prvHeapInit+0xac>)
 80045bc:	4413      	add	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045c4:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <prvHeapInit+0xb0>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045ca:	4b1c      	ldr	r3, [pc, #112]	@ (800463c <prvHeapInit+0xb0>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	4413      	add	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045d8:	2208      	movs	r2, #8
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0307 	bic.w	r3, r3, #7
 80045e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a15      	ldr	r2, [pc, #84]	@ (8004640 <prvHeapInit+0xb4>)
 80045ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <prvHeapInit+0xb4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045f6:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <prvHeapInit+0xb4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800460c:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <prvHeapInit+0xb4>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <prvHeapInit+0xb8>)
 800461a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a09      	ldr	r2, [pc, #36]	@ (8004648 <prvHeapInit+0xbc>)
 8004622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004624:	4b09      	ldr	r3, [pc, #36]	@ (800464c <prvHeapInit+0xc0>)
 8004626:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	20000450 	.word	0x20000450
 800463c:	20001008 	.word	0x20001008
 8004640:	20001010 	.word	0x20001010
 8004644:	20001018 	.word	0x20001018
 8004648:	20001014 	.word	0x20001014
 800464c:	20001024 	.word	0x20001024

08004650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004658:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <prvInsertBlockIntoFreeList+0xac>)
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e002      	b.n	8004664 <prvInsertBlockIntoFreeList+0x14>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d8f7      	bhi.n	800465e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4413      	add	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	d108      	bne.n	8004692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	441a      	add	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d118      	bne.n	80046d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <prvInsertBlockIntoFreeList+0xb0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d00d      	beq.n	80046ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e008      	b.n	80046e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <prvInsertBlockIntoFreeList+0xb0>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e003      	b.n	80046e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d002      	beq.n	80046ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20001008 	.word	0x20001008
 8004700:	20001010 	.word	0x20001010

08004704 <memset>:
 8004704:	4402      	add	r2, r0
 8004706:	4603      	mov	r3, r0
 8004708:	4293      	cmp	r3, r2
 800470a:	d100      	bne.n	800470e <memset+0xa>
 800470c:	4770      	bx	lr
 800470e:	f803 1b01 	strb.w	r1, [r3], #1
 8004712:	e7f9      	b.n	8004708 <memset+0x4>

08004714 <__libc_init_array>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	4d0d      	ldr	r5, [pc, #52]	@ (800474c <__libc_init_array+0x38>)
 8004718:	4c0d      	ldr	r4, [pc, #52]	@ (8004750 <__libc_init_array+0x3c>)
 800471a:	1b64      	subs	r4, r4, r5
 800471c:	10a4      	asrs	r4, r4, #2
 800471e:	2600      	movs	r6, #0
 8004720:	42a6      	cmp	r6, r4
 8004722:	d109      	bne.n	8004738 <__libc_init_array+0x24>
 8004724:	4d0b      	ldr	r5, [pc, #44]	@ (8004754 <__libc_init_array+0x40>)
 8004726:	4c0c      	ldr	r4, [pc, #48]	@ (8004758 <__libc_init_array+0x44>)
 8004728:	f000 f818 	bl	800475c <_init>
 800472c:	1b64      	subs	r4, r4, r5
 800472e:	10a4      	asrs	r4, r4, #2
 8004730:	2600      	movs	r6, #0
 8004732:	42a6      	cmp	r6, r4
 8004734:	d105      	bne.n	8004742 <__libc_init_array+0x2e>
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	f855 3b04 	ldr.w	r3, [r5], #4
 800473c:	4798      	blx	r3
 800473e:	3601      	adds	r6, #1
 8004740:	e7ee      	b.n	8004720 <__libc_init_array+0xc>
 8004742:	f855 3b04 	ldr.w	r3, [r5], #4
 8004746:	4798      	blx	r3
 8004748:	3601      	adds	r6, #1
 800474a:	e7f2      	b.n	8004732 <__libc_init_array+0x1e>
 800474c:	08004854 	.word	0x08004854
 8004750:	08004854 	.word	0x08004854
 8004754:	08004854 	.word	0x08004854
 8004758:	08004858 	.word	0x08004858

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
