
12_queue_command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080078a0  080078a0  000088a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079fc  080079fc  000090f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079fc  080079fc  000089fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a04  08007a04  000090f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00008a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a08  08007a08  00008a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  08007a0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001210  200000f4  08007b00  000090f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  08007b00  00009304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d42  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ec  00000000  00000000  0001ce66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00020058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d04  00000000  00000000  00021158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002878e  00000000  00000000  00021e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e71  00000000  00000000  0004a5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f70c5  00000000  00000000  0005e45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a00  00000000  00000000  00155564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00159f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007888 	.word	0x08007888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	08007888 	.word	0x08007888

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000110 	.word	0x20000110
 80005dc:	20000164 	.word	0x20000164

080005e0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
// UART receive interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == USART2)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1e      	ldr	r2, [pc, #120]	@ (800066c <HAL_UART_RxCpltCallback+0x8c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d136      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x84>
    {
        // Echo received byte back to UART
        HAL_UART_Transmit_IT(&huart2, &rx_byte, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	491d      	ldr	r1, [pc, #116]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <HAL_UART_RxCpltCallback+0x94>)
 80005fc:	f003 f826 	bl	800364c <HAL_UART_Transmit_IT>

        // Store byte in command buffer
        command_buffer[command_length++] = rx_byte;
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <HAL_UART_RxCpltCallback+0x98>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	b2d1      	uxtb	r1, r2
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <HAL_UART_RxCpltCallback+0x98>)
 800060a:	7011      	strb	r1, [r2, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 8000610:	7819      	ldrb	r1, [r3, #0]
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <HAL_UART_RxCpltCallback+0x9c>)
 8000614:	5499      	strb	r1, [r3, r2]

        // If Enter key is pressed, notify Task1 (menu) and Task2 (command handler)
        if (rx_byte == '\r')
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0d      	cmp	r3, #13
 800061c:	d112      	bne.n	8000644 <HAL_UART_RxCpltCallback+0x64>
        {
            command_length = 0;
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <HAL_UART_RxCpltCallback+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
            vTaskNotifyGiveFromISR(xTaskHandle1, &xHigherPriorityTaskWoken);
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <HAL_UART_RxCpltCallback+0xa0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f005 ff4e 	bl	80064d0 <vTaskNotifyGiveFromISR>
            vTaskNotifyGiveFromISR(xTaskHandle2, &xHigherPriorityTaskWoken);
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_UART_RxCpltCallback+0xa4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f107 020c 	add.w	r2, r7, #12
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f005 ff46 	bl	80064d0 <vTaskNotifyGiveFromISR>
        }

        // Start next UART receive interrupt
        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	490a      	ldr	r1, [pc, #40]	@ (8000670 <HAL_UART_RxCpltCallback+0x90>)
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <HAL_UART_RxCpltCallback+0x94>)
 800064a:	f003 f85d 	bl	8003708 <HAL_UART_Receive_IT>

        // Yield if higher priority task was woken
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <HAL_UART_RxCpltCallback+0x84>
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_UART_RxCpltCallback+0xa8>)
 8000656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	f3bf 8f6f 	isb	sy
    }
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40004400 	.word	0x40004400
 8000670:	200004a4 	.word	0x200004a4
 8000674:	20000388 	.word	0x20000388
 8000678:	20000488 	.word	0x20000488
 800067c:	20000474 	.word	0x20000474
 8000680:	2000048c 	.word	0x2000048c
 8000684:	20000490 	.word	0x20000490
 8000688:	e000ed04 	.word	0xe000ed04

0800068c <uart_msg>:

// Simple function to send string to UART
void uart_msg(char *s)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff fd9b 	bl	80001d0 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <uart_msg+0x28>)
 80006a6:	f002 ff47 	bl	8003538 <HAL_UART_Transmit>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000388 	.word	0x20000388

080006b8 <Task1_menu_display>:

/* USER CODE BEGIN 4 */

// Task1: Display menu on UART
void Task1_menu_display(void *params)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    char *pdata = menu;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <Task1_menu_display+0x30>)
 80006c2:	60fb      	str	r3, [r7, #12]
    while(1)
    {
        xQueueSend(uart_write_queue, &pdata, portMAX_DELAY); // Send menu string to UART task
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <Task1_menu_display+0x34>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2300      	movs	r3, #0
 80006ce:	f04f 32ff 	mov.w	r2, #4294967295
 80006d2:	f004 fd67 	bl	80051a4 <xQueueGenericSend>
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);          // Wait until Enter is pressed
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	f005 fe9c 	bl	800641c <xTaskNotifyWait>
        xQueueSend(uart_write_queue, &pdata, portMAX_DELAY); // Send menu string to UART task
 80006e4:	bf00      	nop
 80006e6:	e7ed      	b.n	80006c4 <Task1_menu_display+0xc>
 80006e8:	20000000 	.word	0x20000000
 80006ec:	200004a0 	.word	0x200004a0

080006f0 <Task2_cmd_handling>:
    }
}

// Task2: Handle input commands
void Task2_cmd_handling(void *params)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint8_t cmd_code = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
    APP_CMD_t *new_cmd;

    while(1)
    {
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);           // Wait for notification from ISR
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2000      	movs	r0, #0
 8000706:	f005 fe89 	bl	800641c <xTaskNotifyWait>

        // Allocate memory for command
        new_cmd = (APP_CMD_t*)pvPortMalloc(sizeof(APP_CMD_t));
 800070a:	200b      	movs	r0, #11
 800070c:	f006 fa2e 	bl	8006b6c <pvPortMalloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60bb      	str	r3, [r7, #8]

        taskENTER_CRITICAL();
 8000714:	f006 f908 	bl	8006928 <vPortEnterCritical>
        cmd_code = getCommandCode(command_buffer);       // Extract numeric command
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <Task2_cmd_handling+0x54>)
 800071a:	f000 f871 	bl	8000800 <getCommandCode>
 800071e:	4603      	mov	r3, r0
 8000720:	73fb      	strb	r3, [r7, #15]
        new_cmd->cmd_no = cmd_code;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	7bfa      	ldrb	r2, [r7, #15]
 8000726:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8000728:	f006 f930 	bl	800698c <vPortExitCritical>

        // Send command pointer to processing queue
        xQueueSend(command_queue, &new_cmd, portMAX_DELAY);
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <Task2_cmd_handling+0x58>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2300      	movs	r3, #0
 8000736:	f04f 32ff 	mov.w	r2, #4294967295
 800073a:	f004 fd33 	bl	80051a4 <xQueueGenericSend>
        xTaskNotifyWait(0,0,NULL,portMAX_DELAY);           // Wait for notification from ISR
 800073e:	bf00      	nop
 8000740:	e7dc      	b.n	80006fc <Task2_cmd_handling+0xc>
 8000742:	bf00      	nop
 8000744:	20000474 	.word	0x20000474
 8000748:	2000049c 	.word	0x2000049c

0800074c <Task3_cmd_processing>:
    }
}

// Task3: Process commands
void Task3_cmd_processing(void *params)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	@ 0x40
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    char task_msg[50];

    while(1)
    {
        // Receive command from queue
        xQueueReceive(command_queue, (void*)&new_cmd, portMAX_DELAY);
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <Task3_cmd_processing+0x80>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800075c:	f04f 32ff 	mov.w	r2, #4294967295
 8000760:	4618      	mov	r0, r3
 8000762:	f004 fe21 	bl	80053a8 <xQueueReceive>

        // Execute corresponding action
        if(new_cmd->cmd_no == LED_ON)
 8000766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d102      	bne.n	8000774 <Task3_cmd_processing+0x28>
        {
            make_led_on();
 800076e:	f000 f855 	bl	800081c <make_led_on>
 8000772:	e026      	b.n	80007c2 <Task3_cmd_processing+0x76>
        }
        else if(new_cmd->cmd_no == LED_OFF)
 8000774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d102      	bne.n	8000782 <Task3_cmd_processing+0x36>
        {
            make_led_off();
 800077c:	f000 f858 	bl	8000830 <make_led_off>
 8000780:	e01f      	b.n	80007c2 <Task3_cmd_processing+0x76>
        }
        else if(new_cmd->cmd_no == LED_TOGGLE)
 8000782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d102      	bne.n	8000790 <Task3_cmd_processing+0x44>
        {
            led_toggle();
 800078a:	f000 f85b 	bl	8000844 <led_toggle>
 800078e:	e018      	b.n	80007c2 <Task3_cmd_processing+0x76>
        }
        else if(new_cmd->cmd_no == LED_READ_STATUS)
 8000790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d105      	bne.n	80007a4 <Task3_cmd_processing+0x58>
        {
            read_led_status(task_msg);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f85b 	bl	8000858 <read_led_status>
 80007a2:	e00e      	b.n	80007c2 <Task3_cmd_processing+0x76>
        }
        else if(new_cmd->cmd_no == RTC_READ)
 80007a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	d105      	bne.n	80007b8 <Task3_cmd_processing+0x6c>
        {
            read_rtc_info(task_msg);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f871 	bl	8000898 <read_rtc_info>
 80007b6:	e004      	b.n	80007c2 <Task3_cmd_processing+0x76>
        }
        else
        {
            print_error_message(task_msg);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f8d3 	bl	8000968 <print_error_message>
        }

        vPortFree(new_cmd); // Free allocated memory
 80007c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 fa9f 	bl	8006d08 <vPortFree>
        xQueueReceive(command_queue, (void*)&new_cmd, portMAX_DELAY);
 80007ca:	e7c3      	b.n	8000754 <Task3_cmd_processing+0x8>
 80007cc:	2000049c 	.word	0x2000049c

080007d0 <Task4_uart_write>:
    }
}

// Task4: Write messages to UART
void Task4_uart_write(void *params)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    char *data = NULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
    while(1)
    {
         xQueueReceive(uart_write_queue, &data, portMAX_DELAY); // Wait for message
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <Task4_uart_write+0x2c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f107 010c 	add.w	r1, r7, #12
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fddd 	bl	80053a8 <xQueueReceive>
         uart_msg(data);                                        // Send to UART
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff4b 	bl	800068c <uart_msg>
         xQueueReceive(uart_write_queue, &data, portMAX_DELAY); // Wait for message
 80007f6:	bf00      	nop
 80007f8:	e7f0      	b.n	80007dc <Task4_uart_write+0xc>
 80007fa:	bf00      	nop
 80007fc:	200004a0 	.word	0x200004a0

08000800 <getCommandCode>:
    }
}

// Extract numeric command from buffer
uint8_t getCommandCode(uint8_t *buffer)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    return buffer[0] - 48; // Convert ASCII '0'-'9' to number
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3b30      	subs	r3, #48	@ 0x30
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <make_led_on>:

// LED control functions
void make_led_on(void)  { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); }
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f000 ffc0 	bl	80017ac <HAL_GPIO_WritePin>
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <make_led_off>:
void make_led_off(void) { HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); }
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
 8000834:	2200      	movs	r2, #0
 8000836:	2120      	movs	r1, #32
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 ffb6 	bl	80017ac <HAL_GPIO_WritePin>
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <led_toggle>:
void led_toggle(void)   { HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); }
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 ffc5 	bl	80017dc <HAL_GPIO_TogglePin>
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <read_led_status>:

// Read LED status and send to UART
void read_led_status(char *task_msg)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    sprintf(task_msg , "\r\nLED status is : %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 8000860:	687c      	ldr	r4, [r7, #4]
 8000862:	2120      	movs	r1, #32
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 ff88 	bl	800177c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4907      	ldr	r1, [pc, #28]	@ (8000890 <read_led_status+0x38>)
 8000872:	4620      	mov	r0, r4
 8000874:	f006 fb68 	bl	8006f48 <siprintf>
    xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <read_led_status+0x3c>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	1d39      	adds	r1, r7, #4
 800087e:	2300      	movs	r3, #0
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	f004 fc8e 	bl	80051a4 <xQueueGenericSend>
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	080078a0 	.word	0x080078a0
 8000894:	200004a0 	.word	0x200004a0

08000898 <read_rtc_info>:

// Read RTC time/date and send to UART
void read_rtc_info(char *task_msg)
{
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08d      	sub	sp, #52	@ 0x34
 800089c:	af04      	add	r7, sp, #16
 800089e:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]

    // Initialize RTC if not already initialized
    if ((RTC->ISR & RTC_ISR_INITS) == 0)
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <read_rtc_info+0xc0>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d11f      	bne.n	8000900 <read_rtc_info+0x68>
    {
        sTime.Hours = 5; sTime.Minutes = 0; sTime.Seconds = 0;
 80008c0:	2305      	movs	r3, #5
 80008c2:	733b      	strb	r3, [r7, #12]
 80008c4:	2300      	movs	r3, #0
 80008c6:	737b      	strb	r3, [r7, #13]
 80008c8:	2300      	movs	r3, #0
 80008ca:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	481f      	ldr	r0, [pc, #124]	@ (800095c <read_rtc_info+0xc4>)
 80008de:	f002 fb3f 	bl	8002f60 <HAL_RTC_SetTime>

        sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80008e2:	2304      	movs	r3, #4
 80008e4:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_SEPTEMBER;
 80008e6:	2309      	movs	r3, #9
 80008e8:	727b      	strb	r3, [r7, #9]
        sDate.Date = 11;
 80008ea:	230b      	movs	r3, #11
 80008ec:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 80008ee:	2319      	movs	r3, #25
 80008f0:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <read_rtc_info+0xc4>)
 80008fc:	f002 fc29 	bl	8003152 <HAL_RTC_SetDate>
    }

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4814      	ldr	r0, [pc, #80]	@ (800095c <read_rtc_info+0xc4>)
 800090a:	f002 fbc6 	bl	800309a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	@ (800095c <read_rtc_info+0xc4>)
 8000918:	f002 fca2 	bl	8003260 <HAL_RTC_GetDate>

    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 800091c:	6878      	ldr	r0, [r7, #4]
            sTime.Hours, sTime.Minutes, sTime.Seconds,
 800091e:	7b3b      	ldrb	r3, [r7, #12]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000920:	461d      	mov	r5, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000922:	7b7b      	ldrb	r3, [r7, #13]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000924:	461e      	mov	r6, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000926:	7bbb      	ldrb	r3, [r7, #14]
            sDate.Date, sDate.Month, sDate.Year);
 8000928:	7aba      	ldrb	r2, [r7, #10]
 800092a:	7a79      	ldrb	r1, [r7, #9]
 800092c:	7afc      	ldrb	r4, [r7, #11]
    sprintf(task_msg, "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 800092e:	9403      	str	r4, [sp, #12]
 8000930:	9102      	str	r1, [sp, #8]
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	4633      	mov	r3, r6
 8000938:	462a      	mov	r2, r5
 800093a:	4909      	ldr	r1, [pc, #36]	@ (8000960 <read_rtc_info+0xc8>)
 800093c:	f006 fb04 	bl	8006f48 <siprintf>

    xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <read_rtc_info+0xcc>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	1d39      	adds	r1, r7, #4
 8000946:	2300      	movs	r3, #0
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	f004 fc2a 	bl	80051a4 <xQueueGenericSend>
}
 8000950:	bf00      	nop
 8000952:	3724      	adds	r7, #36	@ 0x24
 8000954:	46bd      	mov	sp, r7
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	40002800 	.word	0x40002800
 800095c:	20000364 	.word	0x20000364
 8000960:	080078b8 	.word	0x080078b8
 8000964:	200004a0 	.word	0x200004a0

08000968 <print_error_message>:

// Send error message to UART
void print_error_message(char *task_msg)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    sprintf(task_msg, "\r\nInvalid command received\r\n");
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4908      	ldr	r1, [pc, #32]	@ (8000994 <print_error_message+0x2c>)
 8000974:	4618      	mov	r0, r3
 8000976:	f006 fae7 	bl	8006f48 <siprintf>
    xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <print_error_message+0x30>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	1d39      	adds	r1, r7, #4
 8000980:	2300      	movs	r3, #0
 8000982:	f04f 32ff 	mov.w	r2, #4294967295
 8000986:	f004 fc0d 	bl	80051a4 <xQueueGenericSend>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	080078e8 	.word	0x080078e8
 8000998:	200004a0 	.word	0x200004a0

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fb35 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f885 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 f963 	bl	8000c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ae:	f000 f931 	bl	8000c14 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80009b2:	f000 f8d3 	bl	8000b5c <MX_RTC_Init>
  /* definition and creation of defaultTask */
 // osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 // defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  sprintf(msg,"QUEUE DEMO\r\n");
 80009b6:	492c      	ldr	r1, [pc, #176]	@ (8000a68 <main+0xcc>)
 80009b8:	482c      	ldr	r0, [pc, #176]	@ (8000a6c <main+0xd0>)
 80009ba:	f006 fac5 	bl	8006f48 <siprintf>
  uart_msg(msg);
 80009be:	482b      	ldr	r0, [pc, #172]	@ (8000a6c <main+0xd0>)
 80009c0:	f7ff fe64 	bl	800068c <uart_msg>

  command_queue = xQueueCreate(10, sizeof(APP_CMD_t*));
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	200a      	movs	r0, #10
 80009ca:	f004 fb91 	bl	80050f0 <xQueueGenericCreate>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <main+0xd4>)
 80009d2:	6013      	str	r3, [r2, #0]

  uart_write_queue = xQueueCreate(10, sizeof(char*));
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	200a      	movs	r0, #10
 80009da:	f004 fb89 	bl	80050f0 <xQueueGenericCreate>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a24      	ldr	r2, [pc, #144]	@ (8000a74 <main+0xd8>)
 80009e2:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  if((command_queue != NULL ) && (uart_write_queue != NULL ))
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <main+0xd4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d033      	beq.n	8000a54 <main+0xb8>
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <main+0xd8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d02f      	beq.n	8000a54 <main+0xb8>
  {
      // Create tasks
      xTaskCreate(Task1_menu_display, "TASK 1-MENU", configMINIMAL_STACK_SIZE, NULL, 1, &xTaskHandle1);
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <main+0xdc>)
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2280      	movs	r2, #128	@ 0x80
 8000a00:	491e      	ldr	r1, [pc, #120]	@ (8000a7c <main+0xe0>)
 8000a02:	481f      	ldr	r0, [pc, #124]	@ (8000a80 <main+0xe4>)
 8000a04:	f004 ff22 	bl	800584c <xTaskCreate>
      xTaskCreate(Task2_cmd_handling, "TASK 2-CMD_HANDLING", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle2);
 8000a08:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <main+0xe8>)
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2280      	movs	r2, #128	@ 0x80
 8000a14:	491c      	ldr	r1, [pc, #112]	@ (8000a88 <main+0xec>)
 8000a16:	481d      	ldr	r0, [pc, #116]	@ (8000a8c <main+0xf0>)
 8000a18:	f004 ff18 	bl	800584c <xTaskCreate>
      xTaskCreate(Task3_cmd_processing, "TASK 3-CMD_PROCESS", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle3);
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <main+0xf4>)
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	2302      	movs	r3, #2
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	491a      	ldr	r1, [pc, #104]	@ (8000a94 <main+0xf8>)
 8000a2a:	481b      	ldr	r0, [pc, #108]	@ (8000a98 <main+0xfc>)
 8000a2c:	f004 ff0e 	bl	800584c <xTaskCreate>
      xTaskCreate(Task4_uart_write, "TASK 4-UART_WRITE", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskHandle4);
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <main+0x100>)
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	2302      	movs	r3, #2
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	4918      	ldr	r1, [pc, #96]	@ (8000aa0 <main+0x104>)
 8000a3e:	4819      	ldr	r0, [pc, #100]	@ (8000aa4 <main+0x108>)
 8000a40:	f004 ff04 	bl	800584c <xTaskCreate>

      HAL_UART_Receive_IT(&huart2, &rx_byte, 1); // Start UART receive interrupt
 8000a44:	2201      	movs	r2, #1
 8000a46:	4918      	ldr	r1, [pc, #96]	@ (8000aa8 <main+0x10c>)
 8000a48:	4818      	ldr	r0, [pc, #96]	@ (8000aac <main+0x110>)
 8000a4a:	f002 fe5d 	bl	8003708 <HAL_UART_Receive_IT>

      osKernelStart(); // Start FreeRTOS scheduler
 8000a4e:	f004 fa29 	bl	8004ea4 <osKernelStart>
 8000a52:	e006      	b.n	8000a62 <main+0xc6>
  }
  else
  {
	  sprintf(msg,"QUEUE Creation Failed\r\n");
 8000a54:	4916      	ldr	r1, [pc, #88]	@ (8000ab0 <main+0x114>)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <main+0xd0>)
 8000a58:	f006 fa76 	bl	8006f48 <siprintf>
	  uart_msg(msg);
 8000a5c:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <main+0xd0>)
 8000a5e:	f7ff fe15 	bl	800068c <uart_msg>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <main+0xc6>
 8000a66:	bf00      	nop
 8000a68:	08007908 	.word	0x08007908
 8000a6c:	20000410 	.word	0x20000410
 8000a70:	2000049c 	.word	0x2000049c
 8000a74:	200004a0 	.word	0x200004a0
 8000a78:	2000048c 	.word	0x2000048c
 8000a7c:	08007918 	.word	0x08007918
 8000a80:	080006b9 	.word	0x080006b9
 8000a84:	20000490 	.word	0x20000490
 8000a88:	08007924 	.word	0x08007924
 8000a8c:	080006f1 	.word	0x080006f1
 8000a90:	20000494 	.word	0x20000494
 8000a94:	08007938 	.word	0x08007938
 8000a98:	0800074d 	.word	0x0800074d
 8000a9c:	20000498 	.word	0x20000498
 8000aa0:	0800794c 	.word	0x0800794c
 8000aa4:	080007d1 	.word	0x080007d1
 8000aa8:	200004a4 	.word	0x200004a4
 8000aac:	20000388 	.word	0x20000388
 8000ab0:	08007960 	.word	0x08007960

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b096      	sub	sp, #88	@ 0x58
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2244      	movs	r2, #68	@ 0x44
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 fa62 	bl	8006f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ad6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ada:	f000 fea7 	bl	800182c <HAL_PWREx_ControlVoltageScaling>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae4:	f000 f92c 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af2:	2310      	movs	r3, #16
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af6:	2301      	movs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afe:	2302      	movs	r3, #2
 8000b00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b06:	230a      	movs	r3, #10
 8000b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fedc 	bl	80018d8 <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000b26:	f000 f90b 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2104      	movs	r1, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 faa4 	bl	8002090 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b4e:	f000 f8f7 	bl	8000d40 <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3758      	adds	r7, #88	@ 0x58
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b76:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <MX_RTC_Init+0xb4>)
 8000b78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b82:	227f      	movs	r2, #127	@ 0x7f
 8000b84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b88:	22ff      	movs	r2, #255	@ 0xff
 8000b8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ba4:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000ba6:	f002 f953 	bl	8002e50 <HAL_RTC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f8c6 	bl	8000d40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000bd0:	f002 f9c6 	bl	8002f60 <HAL_RTC_SetTime>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000bda:	f000 f8b1 	bl	8000d40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bde:	2301      	movs	r3, #1
 8000be0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000be2:	2301      	movs	r3, #1
 8000be4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_RTC_Init+0xb0>)
 8000bf6:	f002 faac 	bl	8003152 <HAL_RTC_SetDate>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000c00:	f000 f89e 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000364 	.word	0x20000364
 8000c10:	40002800 	.word	0x40002800

08000c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <MX_USART2_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c58:	f002 fc20 	bl	800349c <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f86d 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000388 	.word	0x20000388
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a18      	ldr	r2, [pc, #96]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_GPIO_Init+0xc4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f000 fd5b 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <MX_GPIO_Init+0xc8>)
 8000d0e:	f000 fb8b 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d12:	2320      	movs	r3, #32
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2c:	f000 fb7c 	bl	8001428 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000800 	.word	0x48000800

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	210f      	movs	r1, #15
 8000d86:	f06f 0001 	mvn.w	r0, #1
 8000d8a:	f000 fa98 	bl	80012be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0a4      	sub	sp, #144	@ 0x90
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2288      	movs	r2, #136	@ 0x88
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f006 f8ed 	bl	8006f8c <memset>
  if(hrtc->Instance==RTC)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_RTC_MspInit+0x5c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d118      	bne.n	8000dee <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fb82 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000dda:	f7ff ffb1 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <HAL_RTC_MspInit+0x60>)
 8000de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000de4:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <HAL_RTC_MspInit+0x60>)
 8000de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000dee:	bf00      	nop
 8000df0:	3790      	adds	r7, #144	@ 0x90
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0ac      	sub	sp, #176	@ 0xb0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2288      	movs	r2, #136	@ 0x88
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 f8b3 	bl	8006f8c <memset>
  if(huart->Instance==USART2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a25      	ldr	r2, [pc, #148]	@ (8000ec0 <HAL_UART_MspInit+0xc0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d143      	bne.n	8000eb8 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fb4b 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e48:	f7ff ff7a 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e50:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	4a16      	ldr	r2, [pc, #88]	@ (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_UART_MspInit+0xc4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e94:	2307      	movs	r3, #7
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f000 fac0 	bl	8001428 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2105      	movs	r1, #5
 8000eac:	2026      	movs	r0, #38	@ 0x26
 8000eae:	f000 fa06 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb2:	2026      	movs	r0, #38	@ 0x26
 8000eb4:	f000 fa1f 	bl	80012f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	37b0      	adds	r7, #176	@ 0xb0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f8e1 	bl	80010c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f06:	f005 f9e3 	bl	80062d0 <xTaskGetSchedulerState>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d001      	beq.n	8000f14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f10:	f005 fd9a 	bl	8006a48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <USART2_IRQHandler+0x10>)
 8000f1e:	f002 fc3f 	bl	80037a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000388 	.word	0x20000388

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f006 f81e 	bl	8006f9c <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20018000 	.word	0x20018000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	200004a8 	.word	0x200004a8
 8000f94:	20001308 	.word	0x20001308

08000f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f005 ffdd 	bl	8006fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fcd5 	bl	800099c <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001000:	08007a0c 	.word	0x08007a0c
  ldr r2, =_sbss
 8001004:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001008:	20001304 	.word	0x20001304

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_Init+0x3c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_Init+0x3c>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001024:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f93e 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102c:	200f      	movs	r0, #15
 800102e:	f000 f80f 	bl	8001050 <HAL_InitTick>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	e001      	b.n	8001042 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103e:	f7ff fe85 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001042:	79fb      	ldrb	r3, [r7, #7]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_InitTick+0x70>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <HAL_InitTick+0x6c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f949 	bl	8001312 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10f      	bne.n	80010a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d809      	bhi.n	80010a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f913 	bl	80012be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_InitTick+0x74>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e007      	b.n	80010b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e004      	b.n	80010b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e001      	b.n	80010b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000009c 	.word	0x2000009c
 80010c0:	20000094 	.word	0x20000094
 80010c4:	20000098 	.word	0x20000098

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2000009c 	.word	0x2000009c
 80010ec:	200004ac 	.word	0x200004ac

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200004ac 	.word	0x200004ac

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	@ (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff29 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff3e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff8e 	bl	80011fc <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff31 	bl	800116c <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa2 	bl	8001264 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d008      	beq.n	8001354 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2204      	movs	r2, #4
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e022      	b.n	800139a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020e 	bic.w	r2, r2, #14
 8001362:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001378:	f003 021c 	and.w	r2, r3, #28
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d005      	beq.n	80013ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2204      	movs	r2, #4
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e029      	b.n	800141e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 020e 	bic.w	r2, r2, #14
 80013d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f003 021c 	and.w	r2, r3, #28
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
    }
  }
  return status;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e17f      	b.n	8001738 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8171 	beq.w	8001732 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x40>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 0201 	and.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d118      	bne.n	8001508 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	6939      	ldr	r1, [r7, #16]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ac 	beq.w	8001732 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b5f      	ldr	r3, [pc, #380]	@ (8001758 <HAL_GPIO_Init+0x330>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015de:	4a5e      	ldr	r2, [pc, #376]	@ (8001758 <HAL_GPIO_Init+0x330>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001758 <HAL_GPIO_Init+0x330>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f2:	4a5a      	ldr	r2, [pc, #360]	@ (800175c <HAL_GPIO_Init+0x334>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800161c:	d025      	beq.n	800166a <HAL_GPIO_Init+0x242>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4f      	ldr	r2, [pc, #316]	@ (8001760 <HAL_GPIO_Init+0x338>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01f      	beq.n	8001666 <HAL_GPIO_Init+0x23e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4e      	ldr	r2, [pc, #312]	@ (8001764 <HAL_GPIO_Init+0x33c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x23a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4d      	ldr	r2, [pc, #308]	@ (8001768 <HAL_GPIO_Init+0x340>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x236>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4c      	ldr	r2, [pc, #304]	@ (800176c <HAL_GPIO_Init+0x344>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x232>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4b      	ldr	r2, [pc, #300]	@ (8001770 <HAL_GPIO_Init+0x348>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x22e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4a      	ldr	r2, [pc, #296]	@ (8001774 <HAL_GPIO_Init+0x34c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x22a>
 800164e:	2306      	movs	r3, #6
 8001650:	e00c      	b.n	800166c <HAL_GPIO_Init+0x244>
 8001652:	2307      	movs	r3, #7
 8001654:	e00a      	b.n	800166c <HAL_GPIO_Init+0x244>
 8001656:	2305      	movs	r3, #5
 8001658:	e008      	b.n	800166c <HAL_GPIO_Init+0x244>
 800165a:	2304      	movs	r3, #4
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x244>
 800165e:	2303      	movs	r3, #3
 8001660:	e004      	b.n	800166c <HAL_GPIO_Init+0x244>
 8001662:	2302      	movs	r3, #2
 8001664:	e002      	b.n	800166c <HAL_GPIO_Init+0x244>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x244>
 800166a:	2300      	movs	r3, #0
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	f002 0203 	and.w	r2, r2, #3
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	4093      	lsls	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167c:	4937      	ldr	r1, [pc, #220]	@ (800175c <HAL_GPIO_Init+0x334>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <HAL_GPIO_Init+0x350>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ae:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <HAL_GPIO_Init+0x350>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016b4:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <HAL_GPIO_Init+0x350>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d8:	4a27      	ldr	r2, [pc, #156]	@ (8001778 <HAL_GPIO_Init+0x350>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <HAL_GPIO_Init+0x350>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001702:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_GPIO_Init+0x350>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <HAL_GPIO_Init+0x350>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800172c:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <HAL_GPIO_Init+0x350>)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f ae78 	bne.w	8001438 <HAL_GPIO_Init+0x10>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000
 8001760:	48000400 	.word	0x48000400
 8001764:	48000800 	.word	0x48000800
 8001768:	48000c00 	.word	0x48000c00
 800176c:	48001000 	.word	0x48001000
 8001770:	48001400 	.word	0x48001400
 8001774:	48001800 	.word	0x48001800
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	041a      	lsls	r2, r3, #16
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43d9      	mvns	r1, r3
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	400b      	ands	r3, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <HAL_PWREx_GetVoltageRange+0x18>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40007000 	.word	0x40007000

0800182c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800183a:	d130      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800183c:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001848:	d038      	beq.n	80018bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2232      	movs	r2, #50	@ 0x32
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	4a1b      	ldr	r2, [pc, #108]	@ (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	3301      	adds	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001870:	e002      	b.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3b01      	subs	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001884:	d102      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f2      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001898:	d110      	bne.n	80018bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e00f      	b.n	80018be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018aa:	d007      	beq.n	80018bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018b4:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40007000 	.word	0x40007000
 80018d0:	20000094 	.word	0x20000094
 80018d4:	431bde83 	.word	0x431bde83

080018d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e3ca      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4b97      	ldr	r3, [pc, #604]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f4:	4b94      	ldr	r3, [pc, #592]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80e4 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_RCC_OscConfig+0x4a>
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	f040 808b 	bne.w	8001a30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b01      	cmp	r3, #1
 800191e:	f040 8087 	bne.w	8001a30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001922:	4b89      	ldr	r3, [pc, #548]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x62>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e3a2      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1a      	ldr	r2, [r3, #32]
 800193e:	4b82      	ldr	r3, [pc, #520]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_RCC_OscConfig+0x7c>
 800194a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001952:	e005      	b.n	8001960 <HAL_RCC_OscConfig+0x88>
 8001954:	4b7c      	ldr	r3, [pc, #496]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001960:	4293      	cmp	r3, r2
 8001962:	d223      	bcs.n	80019ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fd55 	bl	8002418 <RCC_SetFlashLatencyFromMSIRange>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e383      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001978:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a72      	ldr	r2, [pc, #456]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b70      	ldr	r3, [pc, #448]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	496d      	ldr	r1, [pc, #436]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001996:	4b6c      	ldr	r3, [pc, #432]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4968      	ldr	r1, [pc, #416]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
 80019aa:	e025      	b.n	80019f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a65      	ldr	r2, [pc, #404]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4960      	ldr	r1, [pc, #384]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	495b      	ldr	r1, [pc, #364]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd15 	bl	8002418 <RCC_SetFlashLatencyFromMSIRange>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e343      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f8:	f000 fc4a 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b52      	ldr	r3, [pc, #328]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	4950      	ldr	r1, [pc, #320]	@ (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	4a4e      	ldr	r2, [pc, #312]	@ (8001b50 <HAL_RCC_OscConfig+0x278>)
 8001a16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a18:	4b4e      	ldr	r3, [pc, #312]	@ (8001b54 <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb17 	bl	8001050 <HAL_InitTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d052      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	e327      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d032      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a38:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a42      	ldr	r2, [pc, #264]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb54 	bl	80010f0 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fb50 	bl	80010f0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e310      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6a:	4b37      	ldr	r3, [pc, #220]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4931      	ldr	r1, [pc, #196]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	492c      	ldr	r1, [pc, #176]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e01a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a29      	ldr	r2, [pc, #164]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fb21 	bl	80010f0 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fb1d 	bl	80010f0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e2dd      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac4:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x1da>
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d074      	beq.n	8001bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x21a>
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	d10e      	bne.n	8001b0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d10b      	bne.n	8001b0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d064      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d160      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e2ba      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x24a>
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e026      	b.n	8001b70 <HAL_RCC_OscConfig+0x298>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b2a:	d115      	bne.n	8001b58 <HAL_RCC_OscConfig+0x280>
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001b32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a02      	ldr	r2, [pc, #8]	@ (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x298>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08007980 	.word	0x08007980
 8001b50:	20000094 	.word	0x20000094
 8001b54:	20000098 	.word	0x20000098
 8001b58:	4ba0      	ldr	r3, [pc, #640]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a9f      	ldr	r2, [pc, #636]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b9d      	ldr	r3, [pc, #628]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a9c      	ldr	r2, [pc, #624]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff faba 	bl	80010f0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fab6 	bl	80010f0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e276      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	4b92      	ldr	r3, [pc, #584]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2a8>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff faa6 	bl	80010f0 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff faa2 	bl	80010f0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	@ 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e262      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bba:	4b88      	ldr	r3, [pc, #544]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2d0>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d060      	beq.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_OscConfig+0x310>
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d119      	bne.n	8001c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d116      	bne.n	8001c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_OscConfig+0x328>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e23f      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b76      	ldr	r3, [pc, #472]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	4973      	ldr	r1, [pc, #460]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c14:	e040      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d023      	beq.n	8001c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a6e      	ldr	r2, [pc, #440]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fa61 	bl	80010f0 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7ff fa5d 	bl	80010f0 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e21d      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c44:	4b65      	ldr	r3, [pc, #404]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b62      	ldr	r3, [pc, #392]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	495f      	ldr	r1, [pc, #380]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e018      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b5d      	ldr	r3, [pc, #372]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fa3d 	bl	80010f0 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fa39 	bl	80010f0 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1f9      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8c:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d03c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cac:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fa18 	bl	80010f0 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fa14 	bl	80010f0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1d4      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ef      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x3ec>
 8001ce4:	e01b      	b.n	8001d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cec:	4a3b      	ldr	r2, [pc, #236]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f9fb 	bl	80010f0 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f9f7 	bl	80010f0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1b7      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d10:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ef      	bne.n	8001cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80a6 	beq.w	8001e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	4a26      	ldr	r2, [pc, #152]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_RCC_OscConfig+0x508>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d118      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_RCC_OscConfig+0x508>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_RCC_OscConfig+0x508>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d70:	f7ff f9be 	bl	80010f0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7ff f9ba 	bl	80010f0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e17a      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_RCC_OscConfig+0x508>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4d8>
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dae:	e029      	b.n	8001e04 <HAL_RCC_OscConfig+0x52c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d115      	bne.n	8001de4 <HAL_RCC_OscConfig+0x50c>
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dbe:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dce:	4a03      	ldr	r2, [pc, #12]	@ (8001ddc <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dd8:	e014      	b.n	8001e04 <HAL_RCC_OscConfig+0x52c>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
 8001de4:	4b9c      	ldr	r3, [pc, #624]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	4a9b      	ldr	r2, [pc, #620]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df4:	4b98      	ldr	r3, [pc, #608]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfa:	4a97      	ldr	r2, [pc, #604]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d016      	beq.n	8001e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f970 	bl	80010f0 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff f96c 	bl	80010f0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e12a      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ed      	beq.n	8001e14 <HAL_RCC_OscConfig+0x53c>
 8001e38:	e015      	b.n	8001e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f959 	bl	80010f0 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff f955 	bl	80010f0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e113      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e58:	4b7f      	ldr	r3, [pc, #508]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ed      	bne.n	8001e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	4a79      	ldr	r2, [pc, #484]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80fe 	beq.w	800207e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	f040 80d0 	bne.w	800202c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e8c:	4b72      	ldr	r3, [pc, #456]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d130      	bne.n	8001f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d127      	bne.n	8001f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d11f      	bne.n	8001f02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ecc:	2a07      	cmp	r2, #7
 8001ece:	bf14      	ite	ne
 8001ed0:	2201      	movne	r2, #1
 8001ed2:	2200      	moveq	r2, #0
 8001ed4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d113      	bne.n	8001f02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	3b01      	subs	r3, #1
 8001efc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d06e      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d069      	beq.n	8001fdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f08:	4b53      	ldr	r3, [pc, #332]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f14:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0ad      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f24:	4b4c      	ldr	r3, [pc, #304]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f30:	f7ff f8de 	bl	80010f0 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f8da 	bl	80010f0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e09a      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4a:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f56:	4b40      	ldr	r3, [pc, #256]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_RCC_OscConfig+0x784>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f70:	0212      	lsls	r2, r2, #8
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f78:	0852      	lsrs	r2, r2, #1
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	0552      	lsls	r2, r2, #21
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f84:	0852      	lsrs	r2, r2, #1
 8001f86:	3a01      	subs	r2, #1
 8001f88:	0652      	lsls	r2, r2, #25
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f90:	0912      	lsrs	r2, r2, #4
 8001f92:	0452      	lsls	r2, r2, #17
 8001f94:	430a      	orrs	r2, r1
 8001f96:	4930      	ldr	r1, [pc, #192]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a2a      	ldr	r2, [pc, #168]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb4:	f7ff f89c 	bl	80010f0 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff f898 	bl	80010f0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e058      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fda:	e050      	b.n	800207e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e04f      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d148      	bne.n	800207e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a16      	ldr	r2, [pc, #88]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002004:	f7ff f874 	bl	80010f0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff f870 	bl	80010f0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e030      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x734>
 800202a:	e028      	b.n	800207e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d023      	beq.n	800207a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a08      	ldr	r2, [pc, #32]	@ (8002058 <HAL_RCC_OscConfig+0x780>)
 8002038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff f857 	bl	80010f0 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002044:	e00c      	b.n	8002060 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff f853 	bl	80010f0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d905      	bls.n	8002060 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e013      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
 8002058:	40021000 	.word	0x40021000
 800205c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_OscConfig+0x7b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ec      	bne.n	8002046 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x7b0>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4905      	ldr	r1, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x7b0>)
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_OscConfig+0x7b4>)
 8002074:	4013      	ands	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e001      	b.n	800207e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	feeefffc 	.word	0xfeeefffc

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0e7      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b75      	ldr	r3, [pc, #468]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d910      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b72      	ldr	r3, [pc, #456]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4970      	ldr	r1, [pc, #448]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b6e      	ldr	r3, [pc, #440]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cf      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b66      	ldr	r3, [pc, #408]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d908      	bls.n	8002102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4960      	ldr	r1, [pc, #384]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d04c      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	4b5a      	ldr	r3, [pc, #360]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d121      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0a6      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	4b54      	ldr	r3, [pc, #336]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d115      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e09a      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002146:	4b4e      	ldr	r3, [pc, #312]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e08e      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002156:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e086      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4943      	ldr	r1, [pc, #268]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002178:	f7fe ffba 	bl	80010f0 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe ffb6 	bl	80010f0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e06e      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b31      	ldr	r3, [pc, #196]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d208      	bcs.n	80021d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	492b      	ldr	r1, [pc, #172]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d6:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d210      	bcs.n	8002206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 0207 	bic.w	r2, r3, #7
 80021ec:	4923      	ldr	r1, [pc, #140]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f4:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e036      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002212:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4918      	ldr	r1, [pc, #96]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4910      	ldr	r1, [pc, #64]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002244:	f000 f824 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	490b      	ldr	r1, [pc, #44]	@ (8002284 <HAL_RCC_ClockConfig+0x1f4>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1f8>)
 8002262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_RCC_ClockConfig+0x1fc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fef1 	bl	8001050 <HAL_InitTick>
 800226e:	4603      	mov	r3, r0
 8002270:	72fb      	strb	r3, [r7, #11]

  return status;
 8002272:	7afb      	ldrb	r3, [r7, #11]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	08007980 	.word	0x08007980
 8002288:	20000094 	.word	0x20000094
 800228c:	20000098 	.word	0x20000098

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229e:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x34>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022c4:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d0:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022ec:	4a2b      	ldr	r2, [pc, #172]	@ (800239c <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d102      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	e004      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d101      	bne.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002314:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d134      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0xa6>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d003      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0xac>
 8002334:	e005      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002338:	617b      	str	r3, [r7, #20]
      break;
 800233a:	e005      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800233e:	617b      	str	r3, [r7, #20]
      break;
 8002340:	e002      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	617b      	str	r3, [r7, #20]
      break;
 8002346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	3301      	adds	r3, #1
 8002354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	0e5b      	lsrs	r3, r3, #25
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	3301      	adds	r3, #1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002388:	69bb      	ldr	r3, [r7, #24]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	08007998 	.word	0x08007998
 80023a0:	00f42400 	.word	0x00f42400
 80023a4:	007a1200 	.word	0x007a1200

080023a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000094 	.word	0x20000094

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c4:	f7ff fff0 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4904      	ldr	r1, [pc, #16]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08007990 	.word	0x08007990

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023f0:	f7ff ffda 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0adb      	lsrs	r3, r3, #11
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08007990 	.word	0x08007990

08002418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002430:	f7ff f9ee 	bl	8001810 <HAL_PWREx_GetVoltageRange>
 8002434:	6178      	str	r0, [r7, #20]
 8002436:	e014      	b.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	4a24      	ldr	r2, [pc, #144]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	@ 0x58
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002450:	f7ff f9de 	bl	8001810 <HAL_PWREx_GetVoltageRange>
 8002454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	4a1d      	ldr	r2, [pc, #116]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002468:	d10b      	bne.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b80      	cmp	r3, #128	@ 0x80
 800246e:	d919      	bls.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2ba0      	cmp	r3, #160	@ 0xa0
 8002474:	d902      	bls.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002476:	2302      	movs	r3, #2
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e013      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800247c:	2301      	movs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e010      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b80      	cmp	r3, #128	@ 0x80
 8002486:	d902      	bls.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002488:	2303      	movs	r3, #3
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e00a      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b80      	cmp	r3, #128	@ 0x80
 8002492:	d102      	bne.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002494:	2302      	movs	r3, #2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e004      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b70      	cmp	r3, #112	@ 0x70
 800249e:	d101      	bne.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a0:	2301      	movs	r3, #1
 80024a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0207 	bic.w	r2, r3, #7
 80024ac:	4909      	ldr	r1, [pc, #36]	@ (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e0:	2300      	movs	r3, #0
 80024e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d041      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024fc:	d02a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002502:	d824      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002504:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800250a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800250e:	d81e      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002518:	d010      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800251a:	e018      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800251c:	4b86      	ldr	r3, [pc, #536]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a85      	ldr	r2, [pc, #532]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002526:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002528:	e015      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fabb 	bl	8002aac <RCCEx_PLLSAI1_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253a:	e00c      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3320      	adds	r3, #32
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fba6 	bl	8002c94 <RCCEx_PLLSAI2_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254c:	e003      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	74fb      	strb	r3, [r7, #19]
      break;
 8002552:	e000      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800255c:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800256a:	4973      	ldr	r1, [pc, #460]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002572:	e001      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d041      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002588:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800258c:	d02a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800258e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002592:	d824      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800259a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800259e:	d81e      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a8:	d010      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025aa:	e018      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ac:	4b62      	ldr	r3, [pc, #392]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a61      	ldr	r2, [pc, #388]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b8:	e015      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fa73 	bl	8002aac <RCCEx_PLLSAI1_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ca:	e00c      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3320      	adds	r3, #32
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fb5e 	bl	8002c94 <RCCEx_PLLSAI2_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025dc:	e003      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	74fb      	strb	r3, [r7, #19]
      break;
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ec:	4b52      	ldr	r3, [pc, #328]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025fa:	494f      	ldr	r1, [pc, #316]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a0 	beq.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800261a:	4b47      	ldr	r3, [pc, #284]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	4a40      	ldr	r2, [pc, #256]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	@ 0x58
 800263c:	4b3e      	ldr	r3, [pc, #248]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264c:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a3a      	ldr	r2, [pc, #232]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002658:	f7fe fd4a 	bl	80010f0 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265e:	e009      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fd46 	bl	80010f0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	74fb      	strb	r3, [r7, #19]
        break;
 8002672:	e005      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002674:	4b31      	ldr	r3, [pc, #196]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d15c      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002686:	4b2c      	ldr	r3, [pc, #176]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01f      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d019      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a4:	4b24      	ldr	r3, [pc, #144]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b0:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	4a20      	ldr	r2, [pc, #128]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d0:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fd05 	bl	80010f0 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e8:	e00b      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fd01 	bl	80010f0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d902      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002700:	e006      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ec      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002726:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800272e:	e009      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	74bb      	strb	r3, [r7, #18]
 8002734:	e006      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002744:	7c7b      	ldrb	r3, [r7, #17]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b9e      	ldr	r3, [pc, #632]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	4a9d      	ldr	r2, [pc, #628]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002762:	4b98      	ldr	r3, [pc, #608]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002768:	f023 0203 	bic.w	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	4994      	ldr	r1, [pc, #592]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002784:	4b8f      	ldr	r3, [pc, #572]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278a:	f023 020c 	bic.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002792:	498c      	ldr	r1, [pc, #560]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a6:	4b87      	ldr	r3, [pc, #540]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	4983      	ldr	r1, [pc, #524]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	497b      	ldr	r1, [pc, #492]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ea:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f8:	4972      	ldr	r1, [pc, #456]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800280c:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	496a      	ldr	r1, [pc, #424]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800282e:	4b65      	ldr	r3, [pc, #404]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283c:	4961      	ldr	r1, [pc, #388]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002850:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	4959      	ldr	r1, [pc, #356]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002872:	4b54      	ldr	r3, [pc, #336]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002878:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002880:	4950      	ldr	r1, [pc, #320]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002894:	4b4b      	ldr	r3, [pc, #300]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	4948      	ldr	r1, [pc, #288]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b6:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	493f      	ldr	r1, [pc, #252]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d028      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d8:	4b3a      	ldr	r3, [pc, #232]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e6:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028f6:	d106      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a31      	ldr	r2, [pc, #196]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
 8002904:	e011      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800290e:	d10c      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8c8 	bl	8002aac <RCCEx_PLLSAI1_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d028      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	491f      	ldr	r1, [pc, #124]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002954:	d106      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002956:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4a1a      	ldr	r2, [pc, #104]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002960:	60d3      	str	r3, [r2, #12]
 8002962:	e011      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f899 	bl	8002aac <RCCEx_PLLSAI1_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02b      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029b2:	d109      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a02      	ldr	r2, [pc, #8]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029be:	60d3      	str	r3, [r2, #12]
 80029c0:	e014      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2101      	movs	r1, #1
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f867 	bl	8002aac <RCCEx_PLLSAI1_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d02f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a06:	4928      	ldr	r1, [pc, #160]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f844 	bl	8002aac <RCCEx_PLLSAI1_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d014      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	74bb      	strb	r3, [r7, #18]
 8002a32:	e011      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3320      	adds	r3, #32
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f925 	bl	8002c94 <RCCEx_PLLSAI2_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a72:	490d      	ldr	r1, [pc, #52]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a96:	4904      	ldr	r1, [pc, #16]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aba:	4b75      	ldr	r3, [pc, #468]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d018      	beq.n	8002af8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ac6:	4b72      	ldr	r3, [pc, #456]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0203 	and.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d10d      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ade:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
       ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d047      	beq.n	8002b82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e044      	b.n	8002b82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d018      	beq.n	8002b32 <RCCEx_PLLSAI1_Config+0x86>
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d825      	bhi.n	8002b50 <RCCEx_PLLSAI1_Config+0xa4>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d002      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0x62>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d009      	beq.n	8002b20 <RCCEx_PLLSAI1_Config+0x74>
 8002b0c:	e020      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b0e:	4b60      	ldr	r3, [pc, #384]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11d      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e01a      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b20:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e013      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b32:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b3e:	4b54      	ldr	r3, [pc, #336]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b4e:	e006      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e004      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b56:	bf00      	nop
 8002b58:	e002      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	4944      	ldr	r1, [pc, #272]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d17d      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b88:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a40      	ldr	r2, [pc, #256]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b94:	f7fe faac 	bl	80010f0 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9a:	e009      	b.n	8002bb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b9c:	f7fe faa8 	bl	80010f0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d902      	bls.n	8002bb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	73fb      	strb	r3, [r7, #15]
        break;
 8002bae:	e005      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bb0:	4b37      	ldr	r3, [pc, #220]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ef      	bne.n	8002b9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d160      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d111      	bne.n	8002bec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc8:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6892      	ldr	r2, [r2, #8]
 8002bd8:	0211      	lsls	r1, r2, #8
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	0912      	lsrs	r2, r2, #4
 8002be0:	0452      	lsls	r2, r2, #17
 8002be2:	430a      	orrs	r2, r1
 8002be4:	492a      	ldr	r1, [pc, #168]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	610b      	str	r3, [r1, #16]
 8002bea:	e027      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d112      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf2:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002bfa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	0211      	lsls	r1, r2, #8
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6912      	ldr	r2, [r2, #16]
 8002c08:	0852      	lsrs	r2, r2, #1
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0552      	lsls	r2, r2, #21
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	491f      	ldr	r1, [pc, #124]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	610b      	str	r3, [r1, #16]
 8002c16:	e011      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6952      	ldr	r2, [r2, #20]
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0652      	lsls	r2, r2, #25
 8002c34:	430a      	orrs	r2, r1
 8002c36:	4916      	ldr	r1, [pc, #88]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c3c:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a13      	ldr	r2, [pc, #76]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fa52 	bl	80010f0 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4e:	e009      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c50:	f7fe fa4e 	bl	80010f0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	73fb      	strb	r3, [r7, #15]
          break;
 8002c62:	e005      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4904      	ldr	r1, [pc, #16]	@ (8002c90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000

08002c94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cae:	4b67      	ldr	r3, [pc, #412]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d10d      	bne.n	8002cda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cc6:	4b61      	ldr	r3, [pc, #388]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d047      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e044      	b.n	8002d6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d018      	beq.n	8002d1a <RCCEx_PLLSAI2_Config+0x86>
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d825      	bhi.n	8002d38 <RCCEx_PLLSAI2_Config+0xa4>
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0x62>
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d009      	beq.n	8002d08 <RCCEx_PLLSAI2_Config+0x74>
 8002cf4:	e020      	b.n	8002d38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cf6:	4b55      	ldr	r3, [pc, #340]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11d      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e01a      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d08:	4b50      	ldr	r3, [pc, #320]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e013      	b.n	8002d42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d26:	4b49      	ldr	r3, [pc, #292]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d36:	e006      	b.n	8002d46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e004      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e002      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	430b      	orrs	r3, r1
 8002d64:	4939      	ldr	r1, [pc, #228]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d167      	bne.n	8002e40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d70:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a35      	ldr	r2, [pc, #212]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe f9b8 	bl	80010f0 <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d82:	e009      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d84:	f7fe f9b4 	bl	80010f0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	73fb      	strb	r3, [r7, #15]
        break;
 8002d96:	e005      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d98:	4b2c      	ldr	r3, [pc, #176]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ef      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d14a      	bne.n	8002e40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002db0:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	0211      	lsls	r1, r2, #8
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68d2      	ldr	r2, [r2, #12]
 8002dc6:	0912      	lsrs	r2, r2, #4
 8002dc8:	0452      	lsls	r2, r2, #17
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	491f      	ldr	r1, [pc, #124]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	614b      	str	r3, [r1, #20]
 8002dd2:	e011      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ddc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6892      	ldr	r2, [r2, #8]
 8002de4:	0211      	lsls	r1, r2, #8
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6912      	ldr	r2, [r2, #16]
 8002dea:	0852      	lsrs	r2, r2, #1
 8002dec:	3a01      	subs	r2, #1
 8002dee:	0652      	lsls	r2, r2, #25
 8002df0:	430a      	orrs	r2, r1
 8002df2:	4916      	ldr	r1, [pc, #88]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe f974 	bl	80010f0 <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e0a:	e009      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e0c:	f7fe f970 	bl	80010f0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e1e:	e005      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e20:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ef      	beq.n	8002e0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	4904      	ldr	r1, [pc, #16]	@ (8002e4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d079      	beq.n	8002f56 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd ff90 	bl	8000d9c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d058      	beq.n	8002f44 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	22ca      	movs	r2, #202	@ 0xca
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2253      	movs	r2, #83	@ 0x53
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa4e 	bl	8003344 <RTC_EnterInitMode>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d127      	bne.n	8002f02 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ec4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68d2      	ldr	r2, [r2, #12]
 8002eec:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6919      	ldr	r1, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa52 	bl	80033ac <RTC_ExitInitMode>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d113      	bne.n	8002f3a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0203 	bic.w	r2, r2, #3
 8002f20:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	22ff      	movs	r2, #255	@ 0xff
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f42:	e001      	b.n	8002f48 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_RTC_SetTime+0x1a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e08b      	b.n	8003092 <HAL_RTC_SetTime+0x132>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	22ca      	movs	r2, #202	@ 0xca
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2253      	movs	r2, #83	@ 0x53
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f9d2 	bl	8003344 <RTC_EnterInitMode>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d163      	bne.n	8003072 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d126      	bne.n	8002ffe <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fa2d 	bl	8003428 <RTC_ByteToBcd2>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fa26 	bl	8003428 <RTC_ByteToBcd2>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fe0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa1e 	bl	8003428 <RTC_ByteToBcd2>
 8002fec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	78db      	ldrb	r3, [r3, #3]
 8002ff6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e018      	b.n	8003030 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800301e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003024:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	78db      	ldrb	r3, [r3, #3]
 800302a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800303a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800303e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800304e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f99f 	bl	80033ac <RTC_ExitInitMode>
 800306e:	4603      	mov	r3, r0
 8003070:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	22ff      	movs	r2, #255	@ 0xff
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
}
 8003092:	4618      	mov	r0, r3
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}

0800309a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80030c8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80030cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	0d9b      	lsrs	r3, r3, #22
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11a      	bne.n	8003148 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f9a6 	bl	8003468 <RTC_Bcd2ToByte>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f99d 	bl	8003468 <RTC_Bcd2ToByte>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	789b      	ldrb	r3, [r3, #2]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f994 	bl	8003468 <RTC_Bcd2ToByte>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003152:	b590      	push	{r4, r7, lr}
 8003154:	b087      	sub	sp, #28
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_RTC_SetDate+0x1a>
 8003168:	2302      	movs	r3, #2
 800316a:	e075      	b.n	8003258 <HAL_RTC_SetDate+0x106>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10e      	bne.n	80031a0 <HAL_RTC_SetDate+0x4e>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	f023 0310 	bic.w	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	330a      	adds	r3, #10
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d11c      	bne.n	80031e0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	78db      	ldrb	r3, [r3, #3]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f93c 	bl	8003428 <RTC_ByteToBcd2>
 80031b0:	4603      	mov	r3, r0
 80031b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f935 	bl	8003428 <RTC_ByteToBcd2>
 80031be:	4603      	mov	r3, r0
 80031c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	789b      	ldrb	r3, [r3, #2]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f92d 	bl	8003428 <RTC_ByteToBcd2>
 80031ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e00e      	b.n	80031fe <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	78db      	ldrb	r3, [r3, #3]
 80031e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031ec:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	22ca      	movs	r2, #202	@ 0xca
 8003204:	625a      	str	r2, [r3, #36]	@ 0x24
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2253      	movs	r2, #83	@ 0x53
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f898 	bl	8003344 <RTC_EnterInitMode>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003228:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800322c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8bc 	bl	80033ac <RTC_ExitInitMode>
 8003234:	4603      	mov	r3, r0
 8003236:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	22ff      	movs	r2, #255	@ 0xff
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003256:	7cfb      	ldrb	r3, [r7, #19]
}
 8003258:	4618      	mov	r0, r3
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}

08003260 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003276:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800327a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11a      	bne.n	80032f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	78db      	ldrb	r3, [r3, #3]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f8d2 	bl	8003468 <RTC_Bcd2ToByte>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f8c9 	bl	8003468 <RTC_Bcd2ToByte>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	789b      	ldrb	r3, [r3, #2]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f8c0 	bl	8003468 <RTC_Bcd2ToByte>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0d      	ldr	r2, [pc, #52]	@ (8003340 <HAL_RTC_WaitForSynchro+0x44>)
 800330a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800330c:	f7fd fef0 	bl	80010f0 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003312:	e009      	b.n	8003328 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003314:	f7fd feec 	bl	80010f0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003322:	d901      	bls.n	8003328 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e007      	b.n	8003338 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ee      	beq.n	8003314 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	0003ff5f 	.word	0x0003ff5f

08003344 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d120      	bne.n	80033a0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003368:	f7fd fec2 	bl	80010f0 <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800336e:	e00d      	b.n	800338c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003370:	f7fd febe 	bl	80010f0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800337e:	d905      	bls.n	800338c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2203      	movs	r2, #3
 8003388:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <RTC_EnterInitMode+0x5c>
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d1e7      	bne.n	8003370 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80033b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <RTC_ExitInitMode+0x78>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <RTC_ExitInitMode+0x78>)
 80033be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80033c4:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <RTC_ExitInitMode+0x78>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10c      	bne.n	80033ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff93 	bl	80032fc <HAL_RTC_WaitForSynchro>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01e      	beq.n	800341a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2203      	movs	r2, #3
 80033e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e017      	b.n	800341a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <RTC_ExitInitMode+0x78>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <RTC_ExitInitMode+0x78>)
 80033f0:	f023 0320 	bic.w	r3, r3, #32
 80033f4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff80 	bl	80032fc <HAL_RTC_WaitForSynchro>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <RTC_ExitInitMode+0x78>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <RTC_ExitInitMode+0x78>)
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	6093      	str	r3, [r2, #8]
  }

  return status;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40002800 	.word	0x40002800

08003428 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800343a:	e005      	b.n	8003448 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003442:	7afb      	ldrb	r3, [r7, #11]
 8003444:	3b0a      	subs	r3, #10
 8003446:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	2b09      	cmp	r3, #9
 800344c:	d8f6      	bhi.n	800343c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	b2da      	uxtb	r2, r3
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	4313      	orrs	r3, r2
 800345a:	b2db      	uxtb	r3, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4413      	add	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	b2da      	uxtb	r2, r3
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	4413      	add	r3, r2
 800348e:	b2db      	uxtb	r3, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e040      	b.n	8003530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fc9e 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	@ 0x24
 80034c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 ff3a 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fc7f 	bl	8003dec <UART_SetConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e01b      	b.n	8003530 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 ffb9 	bl	80044a0 <UART_CheckIdleState>
 800352e:	4603      	mov	r3, r0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	@ 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800354c:	2b20      	cmp	r3, #32
 800354e:	d177      	bne.n	8003640 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_UART_Transmit+0x24>
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e070      	b.n	8003642 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2221      	movs	r2, #33	@ 0x21
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800356e:	f7fd fdbf 	bl	80010f0 <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358c:	d108      	bne.n	80035a0 <HAL_UART_Transmit+0x68>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a8:	e02f      	b.n	800360a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f001 f81b 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e03b      	b.n	8003642 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035dc:	b292      	uxth	r2, r2
 80035de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	3302      	adds	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e007      	b.n	80035f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1c9      	bne.n	80035aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	@ 0x40
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 ffe5 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e005      	b.n	8003642 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800364c:	b480      	push	{r7}
 800364e:	b08b      	sub	sp, #44	@ 0x2c
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800365e:	2b20      	cmp	r3, #32
 8003660:	d147      	bne.n	80036f2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_UART_Transmit_IT+0x22>
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e040      	b.n	80036f4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2221      	movs	r2, #33	@ 0x21
 800369a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a4:	d107      	bne.n	80036b6 <HAL_UART_Transmit_IT+0x6a>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <HAL_UART_Transmit_IT+0xb4>)
 80036b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80036b4:	e002      	b.n	80036bc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <HAL_UART_Transmit_IT+0xb8>)
 80036ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	69f9      	ldr	r1, [r7, #28]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e6      	bne.n	80036bc <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	372c      	adds	r7, #44	@ 0x2c
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	08004a03 	.word	0x08004a03
 8003704:	0800494d 	.word	0x0800494d

08003708 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800371c:	2b20      	cmp	r3, #32
 800371e:	d137      	bne.n	8003790 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Receive_IT+0x24>
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e030      	b.n	8003792 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_UART_Receive_IT+0x94>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d01f      	beq.n	8003780 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	613b      	str	r3, [r7, #16]
   return(result);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	69f9      	ldr	r1, [r7, #28]
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	61bb      	str	r3, [r7, #24]
   return(result);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	461a      	mov	r2, r3
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 ffa0 	bl	80046cc <UART_Start_Receive_IT>
 800378c:	4603      	mov	r3, r0
 800378e:	e000      	b.n	8003792 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3728      	adds	r7, #40	@ 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40008000 	.word	0x40008000

080037a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0ba      	sub	sp, #232	@ 0xe8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80037ce:	4013      	ands	r3, r2
 80037d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80037d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d115      	bne.n	8003808 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00f      	beq.n	8003808 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 82ca 	beq.w	8003d92 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
      }
      return;
 8003806:	e2c4      	b.n	8003d92 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8117 	beq.w	8003a40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800381e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003822:	4b85      	ldr	r3, [pc, #532]	@ (8003a38 <HAL_UART_IRQHandler+0x298>)
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 810a 	beq.w	8003a40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <HAL_UART_IRQHandler+0xbc>
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d011      	beq.n	800388c <HAL_UART_IRQHandler+0xec>
 8003868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2202      	movs	r2, #2
 800387a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003882:	f043 0204 	orr.w	r2, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800388c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d011      	beq.n	80038bc <HAL_UART_IRQHandler+0x11c>
 8003898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2204      	movs	r2, #4
 80038aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d017      	beq.n	80038f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2208      	movs	r2, #8
 80038e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ee:	f043 0208 	orr.w	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <HAL_UART_IRQHandler+0x18a>
 8003904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003908:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8230 	beq.w	8003d96 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003964:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800397a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	d04f      	beq.n	8003a22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 ff68 	bl	8004858 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b40      	cmp	r3, #64	@ 0x40
 8003994:	d141      	bne.n	8003a1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1d9      	bne.n	8003996 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ee:	4a13      	ldr	r2, [pc, #76]	@ (8003a3c <HAL_UART_IRQHandler+0x29c>)
 80039f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fcd5 	bl	80013a6 <HAL_DMA_Abort_IT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00f      	b.n	8003a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9d4 	bl	8003dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e00b      	b.n	8003a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9d0 	bl	8003dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e007      	b.n	8003a32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9cc 	bl	8003dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a30:	e1b1      	b.n	8003d96 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a32:	bf00      	nop
    return;
 8003a34:	e1af      	b.n	8003d96 <HAL_UART_IRQHandler+0x5f6>
 8003a36:	bf00      	nop
 8003a38:	04000120 	.word	0x04000120
 8003a3c:	08004921 	.word	0x08004921

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 816a 	bne.w	8003d1e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8163 	beq.w	8003d1e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 815c 	beq.w	8003d1e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b40      	cmp	r3, #64	@ 0x40
 8003a7a:	f040 80d4 	bne.w	8003c26 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80ad 	beq.w	8003bee <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	f080 80a5 	bcs.w	8003bee <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 8086 	bne.w	8003bcc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1da      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e1      	bne.n	8003b0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e3      	bne.n	8003b46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9c:	f023 0310 	bic.w	r3, r3, #16
 8003ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e4      	bne.n	8003b8c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fbaf 	bl	800132a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8f4 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003bec:	e0d5      	b.n	8003d9a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003bf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	f040 80ce 	bne.w	8003d9a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 80c5 	bne.w	8003d9a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8d8 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
      return;
 8003c24:	e0b9      	b.n	8003d9a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80ab 	beq.w	8003d9e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a6 	beq.w	8003d9e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e4      	bne.n	8003c52 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	623b      	str	r3, [r7, #32]
   return(result);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cac:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e3      	bne.n	8003c88 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f023 0310 	bic.w	r3, r3, #16
 8003ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	69b9      	ldr	r1, [r7, #24]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	617b      	str	r3, [r7, #20]
   return(result);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e4      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f85c 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d1c:	e03f      	b.n	8003d9e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00e      	beq.n	8003d48 <HAL_UART_IRQHandler+0x5a8>
 8003d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 f8a5 	bl	8004e90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d46:	e02d      	b.n	8003da4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
    }
    return;
 8003d70:	e017      	b.n	8003da2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <HAL_UART_IRQHandler+0x604>
 8003d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fe99 	bl	8004ac2 <UART_EndTransmit_IT>
    return;
 8003d90:	e008      	b.n	8003da4 <HAL_UART_IRQHandler+0x604>
      return;
 8003d92:	bf00      	nop
 8003d94:	e006      	b.n	8003da4 <HAL_UART_IRQHandler+0x604>
    return;
 8003d96:	bf00      	nop
 8003d98:	e004      	b.n	8003da4 <HAL_UART_IRQHandler+0x604>
      return;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <HAL_UART_IRQHandler+0x604>
      return;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_UART_IRQHandler+0x604>
    return;
 8003da2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003da4:	37e8      	adds	r7, #232	@ 0xe8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b08a      	sub	sp, #40	@ 0x28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4ba4      	ldr	r3, [pc, #656]	@ (80040ac <UART_SetConfig+0x2c0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a99      	ldr	r2, [pc, #612]	@ (80040b0 <UART_SetConfig+0x2c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e54:	4313      	orrs	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a90      	ldr	r2, [pc, #576]	@ (80040b4 <UART_SetConfig+0x2c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d126      	bne.n	8003ec4 <UART_SetConfig+0xd8>
 8003e76:	4b90      	ldr	r3, [pc, #576]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0xd0>
 8003e84:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <UART_SetConfig+0xa0>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	e116      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eaa:	e112      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	e10e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eba:	e10a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec2:	e106      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80040bc <UART_SetConfig+0x2d0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d138      	bne.n	8003f40 <UART_SetConfig+0x154>
 8003ece:	4b7a      	ldr	r3, [pc, #488]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d82d      	bhi.n	8003f38 <UART_SetConfig+0x14c>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART_SetConfig+0xf8>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e0d8      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e0d4      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e0d0      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e0cc      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e0c8      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5e      	ldr	r2, [pc, #376]	@ (80040c0 <UART_SetConfig+0x2d4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d125      	bne.n	8003f96 <UART_SetConfig+0x1aa>
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f54:	2b30      	cmp	r3, #48	@ 0x30
 8003f56:	d016      	beq.n	8003f86 <UART_SetConfig+0x19a>
 8003f58:	2b30      	cmp	r3, #48	@ 0x30
 8003f5a:	d818      	bhi.n	8003f8e <UART_SetConfig+0x1a2>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d00a      	beq.n	8003f76 <UART_SetConfig+0x18a>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d814      	bhi.n	8003f8e <UART_SetConfig+0x1a2>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <UART_SetConfig+0x182>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d008      	beq.n	8003f7e <UART_SetConfig+0x192>
 8003f6c:	e00f      	b.n	8003f8e <UART_SetConfig+0x1a2>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f74:	e0ad      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f76:	2302      	movs	r3, #2
 8003f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7c:	e0a9      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f84:	e0a5      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f86:	2308      	movs	r3, #8
 8003f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8c:	e0a1      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f8e:	2310      	movs	r3, #16
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f94:	e09d      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80040c4 <UART_SetConfig+0x2d8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d125      	bne.n	8003fec <UART_SetConfig+0x200>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fac:	d016      	beq.n	8003fdc <UART_SetConfig+0x1f0>
 8003fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fb0:	d818      	bhi.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fb2:	2b80      	cmp	r3, #128	@ 0x80
 8003fb4:	d00a      	beq.n	8003fcc <UART_SetConfig+0x1e0>
 8003fb6:	2b80      	cmp	r3, #128	@ 0x80
 8003fb8:	d814      	bhi.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <UART_SetConfig+0x1d8>
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x1e8>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e082      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e07e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e07a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e076      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fea:	e072      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <UART_SetConfig+0x2dc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12a      	bne.n	800404c <UART_SetConfig+0x260>
 8003ff6:	4b30      	ldr	r3, [pc, #192]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0x250>
 8004006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400a:	d81b      	bhi.n	8004044 <UART_SetConfig+0x258>
 800400c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004010:	d00c      	beq.n	800402c <UART_SetConfig+0x240>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004016:	d815      	bhi.n	8004044 <UART_SetConfig+0x258>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <UART_SetConfig+0x238>
 800401c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004020:	d008      	beq.n	8004034 <UART_SetConfig+0x248>
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x258>
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402a:	e052      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800402c:	2302      	movs	r3, #2
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004032:	e04e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004034:	2304      	movs	r3, #4
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403a:	e04a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800403c:	2308      	movs	r3, #8
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004042:	e046      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004044:	2310      	movs	r3, #16
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404a:	e042      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <UART_SetConfig+0x2c4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d13a      	bne.n	80040cc <UART_SetConfig+0x2e0>
 8004056:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <UART_SetConfig+0x2cc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004064:	d01a      	beq.n	800409c <UART_SetConfig+0x2b0>
 8004066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800406a:	d81b      	bhi.n	80040a4 <UART_SetConfig+0x2b8>
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004070:	d00c      	beq.n	800408c <UART_SetConfig+0x2a0>
 8004072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004076:	d815      	bhi.n	80040a4 <UART_SetConfig+0x2b8>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <UART_SetConfig+0x298>
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004080:	d008      	beq.n	8004094 <UART_SetConfig+0x2a8>
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x2b8>
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408a:	e022      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004092:	e01e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409a:	e01a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a2:	e016      	b.n	80040d2 <UART_SetConfig+0x2e6>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040aa:	e012      	b.n	80040d2 <UART_SetConfig+0x2e6>
 80040ac:	efff69f3 	.word	0xefff69f3
 80040b0:	40008000 	.word	0x40008000
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004800 	.word	0x40004800
 80040c4:	40004c00 	.word	0x40004c00
 80040c8:	40005000 	.word	0x40005000
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a9f      	ldr	r2, [pc, #636]	@ (8004354 <UART_SetConfig+0x568>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d17a      	bne.n	80041d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d824      	bhi.n	800412e <UART_SetConfig+0x342>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x300>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	08004119 	.word	0x08004119
 80040f8:	0800412f 	.word	0x0800412f
 80040fc:	0800411f 	.word	0x0800411f
 8004100:	0800412f 	.word	0x0800412f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800412f 	.word	0x0800412f
 800410c:	08004127 	.word	0x08004127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe f956 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e010      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004118:	4b8f      	ldr	r3, [pc, #572]	@ (8004358 <UART_SetConfig+0x56c>)
 800411a:	61fb      	str	r3, [r7, #28]
        break;
 800411c:	e00d      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411e:	f7fe f8b7 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8004122:	61f8      	str	r0, [r7, #28]
        break;
 8004124:	e009      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412a:	61fb      	str	r3, [r7, #28]
        break;
 800412c:	e005      	b.n	800413a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80fb 	beq.w	8004338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	429a      	cmp	r2, r3
 8004150:	d305      	bcc.n	800415e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004164:	e0e8      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2200      	movs	r2, #0
 800416a:	461c      	mov	r4, r3
 800416c:	4615      	mov	r5, r2
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	022b      	lsls	r3, r5, #8
 8004178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800417c:	0222      	lsls	r2, r4, #8
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	6849      	ldr	r1, [r1, #4]
 8004182:	0849      	lsrs	r1, r1, #1
 8004184:	2000      	movs	r0, #0
 8004186:	4688      	mov	r8, r1
 8004188:	4681      	mov	r9, r0
 800418a:	eb12 0a08 	adds.w	sl, r2, r8
 800418e:	eb43 0b09 	adc.w	fp, r3, r9
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a0:	4650      	mov	r0, sl
 80041a2:	4659      	mov	r1, fp
 80041a4:	f7fc f86c 	bl	8000280 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b6:	d308      	bcc.n	80041ca <UART_SetConfig+0x3de>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041be:	d204      	bcs.n	80041ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e0b6      	b.n	8004338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041d0:	e0b2      	b.n	8004338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041da:	d15e      	bne.n	800429a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d828      	bhi.n	8004236 <UART_SetConfig+0x44a>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <UART_SetConfig+0x400>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004237 	.word	0x08004237
 80041fc:	08004227 	.word	0x08004227
 8004200:	08004237 	.word	0x08004237
 8004204:	08004237 	.word	0x08004237
 8004208:	08004237 	.word	0x08004237
 800420c:	0800422f 	.word	0x0800422f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe f8d6 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8004214:	61f8      	str	r0, [r7, #28]
        break;
 8004216:	e014      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe f8e8 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 800421c:	61f8      	str	r0, [r7, #28]
        break;
 800421e:	e010      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <UART_SetConfig+0x56c>)
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe f833 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800422a:	61f8      	str	r0, [r7, #28]
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e005      	b.n	8004242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d077      	beq.n	8004338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005a      	lsls	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d916      	bls.n	8004292 <UART_SetConfig+0x4a6>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426a:	d212      	bcs.n	8004292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f023 030f 	bic.w	r3, r3, #15
 8004274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	b29a      	uxth	r2, r3
 8004282:	8afb      	ldrh	r3, [r7, #22]
 8004284:	4313      	orrs	r3, r2
 8004286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	8afa      	ldrh	r2, [r7, #22]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e052      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004298:	e04e      	b.n	8004338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d827      	bhi.n	80042f2 <UART_SetConfig+0x506>
 80042a2:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <UART_SetConfig+0x4bc>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	080042f3 	.word	0x080042f3
 80042b8:	080042e3 	.word	0x080042e3
 80042bc:	080042f3 	.word	0x080042f3
 80042c0:	080042f3 	.word	0x080042f3
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7fe f878 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 80042d0:	61f8      	str	r0, [r7, #28]
        break;
 80042d2:	e014      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe f88a 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 80042d8:	61f8      	str	r0, [r7, #28]
        break;
 80042da:	e010      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <UART_SetConfig+0x56c>)
 80042de:	61fb      	str	r3, [r7, #28]
        break;
 80042e0:	e00d      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fd ffd5 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80042e6:	61f8      	str	r0, [r7, #28]
        break;
 80042e8:	e009      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ee:	61fb      	str	r3, [r7, #28]
        break;
 80042f0:	e005      	b.n	80042fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042fc:	bf00      	nop
    }

    if (pclk != 0U)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d019      	beq.n	8004338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	085a      	lsrs	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	441a      	add	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d909      	bls.n	8004332 <UART_SetConfig+0x546>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d205      	bcs.n	8004332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e002      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	@ 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40008000 	.word	0x40008000
 8004358:	00f42400 	.word	0x00f42400

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b098      	sub	sp, #96	@ 0x60
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fc fe1e 	bl	80010f0 <HAL_GetTick>
 80044b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d12e      	bne.n	8004522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f88c 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d021      	beq.n	8004522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800450a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e6      	bne.n	80044de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e062      	b.n	80045e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d149      	bne.n	80045c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004538:	2200      	movs	r2, #0
 800453a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f856 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03c      	beq.n	80045c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	623b      	str	r3, [r7, #32]
   return(result);
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
 800456a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800456e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60fb      	str	r3, [r7, #12]
   return(result);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	617b      	str	r3, [r7, #20]
   return(result);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e011      	b.n	80045e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3758      	adds	r7, #88	@ 0x58
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004600:	e04f      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d04b      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fc fd71 	bl	80010f0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e04e      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d037      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b80      	cmp	r3, #128	@ 0x80
 8004636:	d034      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b40      	cmp	r3, #64	@ 0x40
 800463c:	d031      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b08      	cmp	r3, #8
 800464a:	d110      	bne.n	800466e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2208      	movs	r2, #8
 8004652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8ff 	bl	8004858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2208      	movs	r2, #8
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e029      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467c:	d111      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f8e5 	bl	8004858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00f      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d0a0      	beq.n	8004602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b097      	sub	sp, #92	@ 0x5c
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fe:	d10e      	bne.n	800471e <UART_Start_Receive_IT+0x52>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <UART_Start_Receive_IT+0x48>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800470e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004712:	e02d      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	22ff      	movs	r2, #255	@ 0xff
 8004718:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800471c:	e028      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <UART_Start_Receive_IT+0x76>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <UART_Start_Receive_IT+0x6c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	@ 0xff
 8004732:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004736:	e01b      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	227f      	movs	r2, #127	@ 0x7f
 800473c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004740:	e016      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800474a:	d10d      	bne.n	8004768 <UART_Start_Receive_IT+0x9c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <UART_Start_Receive_IT+0x92>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	227f      	movs	r2, #127	@ 0x7f
 8004758:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800475c:	e008      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	223f      	movs	r2, #63	@ 0x3f
 8004762:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004766:	e003      	b.n	8004770 <UART_Start_Receive_IT+0xa4>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2222      	movs	r2, #34	@ 0x22
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	657b      	str	r3, [r7, #84]	@ 0x54
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80047a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80047ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047bc:	d107      	bne.n	80047ce <UART_Start_Receive_IT+0x102>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a21      	ldr	r2, [pc, #132]	@ (8004850 <UART_Start_Receive_IT+0x184>)
 80047ca:	669a      	str	r2, [r3, #104]	@ 0x68
 80047cc:	e002      	b.n	80047d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a20      	ldr	r2, [pc, #128]	@ (8004854 <UART_Start_Receive_IT+0x188>)
 80047d2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d019      	beq.n	8004810 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80047f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_Start_Receive_IT+0x110>
 800480e:	e018      	b.n	8004842 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f043 0320 	orr.w	r3, r3, #32
 8004824:	653b      	str	r3, [r7, #80]	@ 0x50
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61bb      	str	r3, [r7, #24]
   return(result);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	375c      	adds	r7, #92	@ 0x5c
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	08004cd5 	.word	0x08004cd5
 8004854:	08004b19 	.word	0x08004b19

08004858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b095      	sub	sp, #84	@ 0x54
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004880:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d118      	bne.n	8004900 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	60bb      	str	r3, [r7, #8]
   return(result);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f023 0310 	bic.w	r3, r3, #16
 80048e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	613b      	str	r3, [r7, #16]
   return(result);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004914:	bf00      	nop
 8004916:	3754      	adds	r7, #84	@ 0x54
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fa3e 	bl	8003dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b08f      	sub	sp, #60	@ 0x3c
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004958:	2b21      	cmp	r3, #33	@ 0x21
 800495a:	d14c      	bne.n	80049f6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d132      	bne.n	80049ce <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	61fb      	str	r3, [r7, #28]
   return(result);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004988:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800498c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	613b      	str	r3, [r7, #16]
   return(result);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80049cc:	e013      	b.n	80049f6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d2:	781a      	ldrb	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80049f6:	bf00      	nop
 80049f8:	373c      	adds	r7, #60	@ 0x3c
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b091      	sub	sp, #68	@ 0x44
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a0e:	2b21      	cmp	r3, #33	@ 0x21
 8004a10:	d151      	bne.n	8004ab6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d132      	bne.n	8004a84 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	69b9      	ldr	r1, [r7, #24]
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a82:	e018      	b.n	8004ab6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a96:	b292      	uxth	r2, r2
 8004a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004ab6:	bf00      	nop
 8004ab8:	3744      	adds	r7, #68	@ 0x44
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6979      	ldr	r1, [r7, #20]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	613b      	str	r3, [r7, #16]
   return(result);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e6      	bne.n	8004aca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff f94f 	bl	8003dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0e:	bf00      	nop
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b09c      	sub	sp, #112	@ 0x70
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b30:	2b22      	cmp	r3, #34	@ 0x22
 8004b32:	f040 80be 	bne.w	8004cb2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b44:	b2d9      	uxtb	r1, r3
 8004b46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	400a      	ands	r2, r1
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 80a3 	bne.w	8004cc6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ba0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e6      	bne.n	8004b80 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e5      	bne.n	8004bb2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a34      	ldr	r2, [pc, #208]	@ (8004cd0 <UART_RxISR_8BIT+0x1b8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01f      	beq.n	8004c44 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d12e      	bne.n	8004caa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0310 	bic.w	r3, r3, #16
 8004c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d103      	bne.n	8004c9a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff f896 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ca8:	e00d      	b.n	8004cc6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fb fc98 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8004cb0:	e009      	b.n	8004cc6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	8b1b      	ldrh	r3, [r3, #24]
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	831a      	strh	r2, [r3, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	3770      	adds	r7, #112	@ 0x70
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40008000 	.word	0x40008000

08004cd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b09c      	sub	sp, #112	@ 0x70
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cec:	2b22      	cmp	r3, #34	@ 0x22
 8004cee:	f040 80be 	bne.w	8004e6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004d06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 80a3 	bne.w	8004e82 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e6      	bne.n	8004d3c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e5      	bne.n	8004d6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <UART_RxISR_16BIT+0x1b8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01f      	beq.n	8004e00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d018      	beq.n	8004e00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d12e      	bne.n	8004e66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f023 0310 	bic.w	r3, r3, #16
 8004e22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d103      	bne.n	8004e56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2210      	movs	r2, #16
 8004e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fe ffb8 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e64:	e00d      	b.n	8004e82 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fbba 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8004e6c:	e009      	b.n	8004e82 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	8b1b      	ldrh	r3, [r3, #24]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	831a      	strh	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	3770      	adds	r7, #112	@ 0x70
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40008000 	.word	0x40008000

08004e90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ea8:	f000 fe08 	bl	8005abc <vTaskStartScheduler>
  
  return osOK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f103 0208 	add.w	r2, r3, #8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f103 0208 	add.w	r2, r3, #8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0208 	add.w	r2, r3, #8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d103      	bne.n	8004f74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e00c      	b.n	8004f8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3308      	adds	r3, #8
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e002      	b.n	8004f82 <vListInsert+0x2e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d2f6      	bcs.n	8004f7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6852      	ldr	r2, [r2, #4]
 8004fe6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d103      	bne.n	8004ffa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005048:	f001 fc6e 	bl	8006928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	3b01      	subs	r3, #1
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	22ff      	movs	r2, #255	@ 0xff
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	22ff      	movs	r2, #255	@ 0xff
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d114      	bne.n	80050c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01a      	beq.n	80050dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3310      	adds	r3, #16
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff50 	bl	8005f50 <xTaskRemoveFromEventList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d012      	beq.n	80050dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <xQueueGenericReset+0xd0>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	e009      	b.n	80050dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3310      	adds	r3, #16
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fef0 	bl	8004eb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3324      	adds	r3, #36	@ 0x24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff feeb 	bl	8004eb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050dc:	f001 fc56 	bl	800698c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050e0:	2301      	movs	r3, #1
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	@ 0x28
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <xQueueGenericCreate+0x2c>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	613b      	str	r3, [r7, #16]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3348      	adds	r3, #72	@ 0x48
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fd1e 	bl	8006b6c <pvPortMalloc>
 8005130:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d011      	beq.n	800515c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3348      	adds	r3, #72	@ 0x48
 8005140:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800514a:	79fa      	ldrb	r2, [r7, #7]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f805 	bl	8005166 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800515c:	69bb      	ldr	r3, [r7, #24]
	}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e002      	b.n	8005188 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005194:	2101      	movs	r1, #1
 8005196:	69b8      	ldr	r0, [r7, #24]
 8005198:	f7ff ff40 	bl	800501c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	@ 0x38
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <xQueueGenericSend+0x34>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <xQueueGenericSend+0x42>
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <xQueueGenericSend+0x46>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueGenericSend+0x48>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <xQueueGenericSend+0x64>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d103      	bne.n	8005216 <xQueueGenericSend+0x72>
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <xQueueGenericSend+0x76>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericSend+0x78>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericSend+0x94>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005238:	f001 f84a 	bl	80062d0 <xTaskGetSchedulerState>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <xQueueGenericSend+0xa4>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <xQueueGenericSend+0xa8>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <xQueueGenericSend+0xaa>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <xQueueGenericSend+0xc6>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526a:	f001 fb5d 	bl	8006928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <xQueueGenericSend+0xdc>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d129      	bne.n	80052d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005286:	f000 f971 	bl	800556c <prvCopyDataToQueue>
 800528a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	3324      	adds	r3, #36	@ 0x24
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe59 	bl	8005f50 <xTaskRemoveFromEventList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d013      	beq.n	80052cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052a4:	4b3f      	ldr	r3, [pc, #252]	@ (80053a4 <xQueueGenericSend+0x200>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	e00a      	b.n	80052cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052bc:	4b39      	ldr	r3, [pc, #228]	@ (80053a4 <xQueueGenericSend+0x200>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052cc:	f001 fb5e 	bl	800698c <vPortExitCritical>
				return pdPASS;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e063      	b.n	800539c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052da:	f001 fb57 	bl	800698c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	e05c      	b.n	800539c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fe93 	bl	8006018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052f6:	f001 fb49 	bl	800698c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fa:	f000 fc41 	bl	8005b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052fe:	f001 fb13 	bl	8006928 <vPortEnterCritical>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005308:	b25b      	sxtb	r3, r3
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d103      	bne.n	8005318 <xQueueGenericSend+0x174>
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800531e:	b25b      	sxtb	r3, r3
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d103      	bne.n	800532e <xQueueGenericSend+0x18a>
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800532e:	f001 fb2d 	bl	800698c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005332:	1d3a      	adds	r2, r7, #4
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fe82 	bl	8006044 <xTaskCheckForTimeOut>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d124      	bne.n	8005390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005348:	f000 fa08 	bl	800575c <prvIsQueueFull>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	3310      	adds	r3, #16
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fdd2 	bl	8005f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005362:	f000 f993 	bl	800568c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005366:	f000 fc19 	bl	8005b9c <xTaskResumeAll>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f af7c 	bne.w	800526a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <xQueueGenericSend+0x200>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	e772      	b.n	800526a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005386:	f000 f981 	bl	800568c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538a:	f000 fc07 	bl	8005b9c <xTaskResumeAll>
 800538e:	e76c      	b.n	800526a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005392:	f000 f97b 	bl	800568c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005396:	f000 fc01 	bl	8005b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800539a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800539c:	4618      	mov	r0, r3
 800539e:	3738      	adds	r7, #56	@ 0x38
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	@ 0x30
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <xQueueReceive+0x32>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	623b      	str	r3, [r7, #32]
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	e7fd      	b.n	80053d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <xQueueReceive+0x40>
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <xQueueReceive+0x44>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <xQueueReceive+0x46>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <xQueueReceive+0x62>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	61fb      	str	r3, [r7, #28]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800540a:	f000 ff61 	bl	80062d0 <xTaskGetSchedulerState>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <xQueueReceive+0x72>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueReceive+0x76>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueReceive+0x78>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueReceive+0x94>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61bb      	str	r3, [r7, #24]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800543c:	f001 fa74 	bl	8006928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01f      	beq.n	800548c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005450:	f000 f8f6 	bl	8005640 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	1e5a      	subs	r2, r3, #1
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800545c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00f      	beq.n	8005484 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	3310      	adds	r3, #16
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fd71 	bl	8005f50 <xTaskRemoveFromEventList>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005474:	4b3c      	ldr	r3, [pc, #240]	@ (8005568 <xQueueReceive+0x1c0>)
 8005476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005484:	f001 fa82 	bl	800698c <vPortExitCritical>
				return pdPASS;
 8005488:	2301      	movs	r3, #1
 800548a:	e069      	b.n	8005560 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005492:	f001 fa7b 	bl	800698c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005496:	2300      	movs	r3, #0
 8005498:	e062      	b.n	8005560 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fdb7 	bl	8006018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054aa:	2301      	movs	r3, #1
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ae:	f001 fa6d 	bl	800698c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054b2:	f000 fb65 	bl	8005b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054b6:	f001 fa37 	bl	8006928 <vPortEnterCritical>
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d103      	bne.n	80054d0 <xQueueReceive+0x128>
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054d6:	b25b      	sxtb	r3, r3
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d103      	bne.n	80054e6 <xQueueReceive+0x13e>
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054e6:	f001 fa51 	bl	800698c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ea:	1d3a      	adds	r2, r7, #4
 80054ec:	f107 0310 	add.w	r3, r7, #16
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fda6 	bl	8006044 <xTaskCheckForTimeOut>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d123      	bne.n	8005546 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005500:	f000 f916 	bl	8005730 <prvIsQueueEmpty>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d017      	beq.n	800553a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	3324      	adds	r3, #36	@ 0x24
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4611      	mov	r1, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fcf6 	bl	8005f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800551a:	f000 f8b7 	bl	800568c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800551e:	f000 fb3d 	bl	8005b9c <xTaskResumeAll>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d189      	bne.n	800543c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005528:	4b0f      	ldr	r3, [pc, #60]	@ (8005568 <xQueueReceive+0x1c0>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	e780      	b.n	800543c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800553a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800553c:	f000 f8a6 	bl	800568c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005540:	f000 fb2c 	bl	8005b9c <xTaskResumeAll>
 8005544:	e77a      	b.n	800543c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005548:	f000 f8a0 	bl	800568c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800554c:	f000 fb26 	bl	8005b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005552:	f000 f8ed 	bl	8005730 <prvIsQueueEmpty>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	f43f af6f 	beq.w	800543c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800555e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005560:	4618      	mov	r0, r3
 8005562:	3730      	adds	r7, #48	@ 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10d      	bne.n	80055a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d14d      	bne.n	800562e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 feb8 	bl	800630c <xTaskPriorityDisinherit>
 800559c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	e043      	b.n	800562e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d119      	bne.n	80055e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6858      	ldr	r0, [r3, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	461a      	mov	r2, r3
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	f001 fd1c 	bl	8006ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d32b      	bcc.n	800562e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	e026      	b.n	800562e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68d8      	ldr	r0, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	461a      	mov	r2, r3
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	f001 fd02 	bl	8006ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	425b      	negs	r3, r3
 80055fa:	441a      	add	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d207      	bcs.n	800561c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	425b      	negs	r3, r3
 8005616:	441a      	add	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d105      	bne.n	800562e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3b01      	subs	r3, #1
 800562c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005636:	697b      	ldr	r3, [r7, #20]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	441a      	add	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d303      	bcc.n	8005674 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68d9      	ldr	r1, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	461a      	mov	r2, r3
 800567e:	6838      	ldr	r0, [r7, #0]
 8005680:	f001 fcb8 	bl	8006ff4 <memcpy>
	}
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005694:	f001 f948 	bl	8006928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800569e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a0:	e011      	b.n	80056c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d012      	beq.n	80056d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3324      	adds	r3, #36	@ 0x24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fc4e 	bl	8005f50 <xTaskRemoveFromEventList>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ba:	f000 fd27 	bl	800610c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dce9      	bgt.n	80056a2 <prvUnlockQueue+0x16>
 80056ce:	e000      	b.n	80056d2 <prvUnlockQueue+0x46>
					break;
 80056d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	22ff      	movs	r2, #255	@ 0xff
 80056d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056da:	f001 f957 	bl	800698c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056de:	f001 f923 	bl	8006928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ea:	e011      	b.n	8005710 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d012      	beq.n	800571a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3310      	adds	r3, #16
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fc29 	bl	8005f50 <xTaskRemoveFromEventList>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005704:	f000 fd02 	bl	800610c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005708:	7bbb      	ldrb	r3, [r7, #14]
 800570a:	3b01      	subs	r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dce9      	bgt.n	80056ec <prvUnlockQueue+0x60>
 8005718:	e000      	b.n	800571c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800571a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	22ff      	movs	r2, #255	@ 0xff
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005724:	f001 f932 	bl	800698c <vPortExitCritical>
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005738:	f001 f8f6 	bl	8006928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e001      	b.n	800574e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800574e:	f001 f91d 	bl	800698c <vPortExitCritical>

	return xReturn;
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005764:	f001 f8e0 	bl	8006928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	429a      	cmp	r2, r3
 8005772:	d102      	bne.n	800577a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e001      	b.n	800577e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800577e:	f001 f905 	bl	800698c <vPortExitCritical>

	return xReturn;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	@ 0x38
 8005790:	af04      	add	r7, sp, #16
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	623b      	str	r3, [r7, #32]
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	e7fd      	b.n	80057b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	61fb      	str	r3, [r7, #28]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057d6:	2354      	movs	r3, #84	@ 0x54
 80057d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b54      	cmp	r3, #84	@ 0x54
 80057de:	d00b      	beq.n	80057f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61bb      	str	r3, [r7, #24]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01e      	beq.n	800583e <xTaskCreateStatic+0xb2>
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01b      	beq.n	800583e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005818:	2300      	movs	r3, #0
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	9302      	str	r3, [sp, #8]
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f850 	bl	80058d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005838:	f000 f8d6 	bl	80059e8 <prvAddNewTaskToReadyList>
 800583c:	e001      	b.n	8005842 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005842:	697b      	ldr	r3, [r7, #20]
	}
 8005844:	4618      	mov	r0, r3
 8005846:	3728      	adds	r7, #40	@ 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	@ 0x30
 8005850:	af04      	add	r7, sp, #16
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4618      	mov	r0, r3
 8005862:	f001 f983 	bl	8006b6c <pvPortMalloc>
 8005866:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800586e:	2054      	movs	r0, #84	@ 0x54
 8005870:	f001 f97c 	bl	8006b6c <pvPortMalloc>
 8005874:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30
 8005882:	e005      	b.n	8005890 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005884:	6978      	ldr	r0, [r7, #20]
 8005886:	f001 fa3f 	bl	8006d08 <vPortFree>
 800588a:	e001      	b.n	8005890 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d017      	beq.n	80058c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	2300      	movs	r3, #0
 80058a2:	9303      	str	r3, [sp, #12]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	9302      	str	r3, [sp, #8]
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f80e 	bl	80058d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ba:	69f8      	ldr	r0, [r7, #28]
 80058bc:	f000 f894 	bl	80059e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c0:	2301      	movs	r3, #1
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e002      	b.n	80058cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058cc:	69bb      	ldr	r3, [r7, #24]
	}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b088      	sub	sp, #32
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ee:	3b01      	subs	r3, #1
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f023 0307 	bic.w	r3, r3, #7
 80058fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	617b      	str	r3, [r7, #20]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01f      	beq.n	8005966 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e012      	b.n	8005952 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	7819      	ldrb	r1, [r3, #0]
 8005934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	3334      	adds	r3, #52	@ 0x34
 800593c:	460a      	mov	r2, r1
 800593e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d9e9      	bls.n	800592c <prvInitialiseNewTask+0x56>
 8005958:	e000      	b.n	800595c <prvInitialiseNewTask+0x86>
			{
				break;
 800595a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005964:	e003      	b.n	800596e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	2b06      	cmp	r3, #6
 8005972:	d901      	bls.n	8005978 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005974:	2306      	movs	r3, #6
 8005976:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff faaf 	bl	8004ef2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	3318      	adds	r3, #24
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff faaa 	bl	8004ef2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	f1c3 0207 	rsb	r2, r3, #7
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	2200      	movs	r2, #0
 80059b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	69b8      	ldr	r0, [r7, #24]
 80059c8:	f000 fe7c 	bl	80066c4 <pxPortInitialiseStack>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059f0:	f000 ff9a 	bl	8006928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f4:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <prvAddNewTaskToReadyList+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <prvAddNewTaskToReadyList+0xb8>)
 80059fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059fe:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a06:	4a27      	ldr	r2, [pc, #156]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a0c:	4b24      	ldr	r3, [pc, #144]	@ (8005aa0 <prvAddNewTaskToReadyList+0xb8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d110      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a14:	f000 fb9e 	bl	8006154 <prvInitialiseTaskLists>
 8005a18:	e00d      	b.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a1a:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a22:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d802      	bhi.n	8005a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a30:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a36:	4b1d      	ldr	r3, [pc, #116]	@ (8005aac <prvAddNewTaskToReadyList+0xc4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aac <prvAddNewTaskToReadyList+0xc4>)
 8005a3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	2201      	movs	r2, #1
 8005a46:	409a      	lsls	r2, r3
 8005a48:	4b19      	ldr	r3, [pc, #100]	@ (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	4a18      	ldr	r2, [pc, #96]	@ (8005ab0 <prvAddNewTaskToReadyList+0xc8>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <prvAddNewTaskToReadyList+0xcc>)
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7ff fa4f 	bl	8004f0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a6e:	f000 ff8d 	bl	800698c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a72:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <prvAddNewTaskToReadyList+0xbc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d207      	bcs.n	8005a98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <prvAddNewTaskToReadyList+0xd0>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	200005b0 	.word	0x200005b0
 8005aa4:	200004b0 	.word	0x200004b0
 8005aa8:	200005bc 	.word	0x200005bc
 8005aac:	200005cc 	.word	0x200005cc
 8005ab0:	200005b8 	.word	0x200005b8
 8005ab4:	200004b4 	.word	0x200004b4
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aca:	463a      	mov	r2, r7
 8005acc:	1d39      	adds	r1, r7, #4
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fd6a 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	9202      	str	r2, [sp, #8]
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	460a      	mov	r2, r1
 8005aea:	491f      	ldr	r1, [pc, #124]	@ (8005b68 <vTaskStartScheduler+0xac>)
 8005aec:	481f      	ldr	r0, [pc, #124]	@ (8005b6c <vTaskStartScheduler+0xb0>)
 8005aee:	f7ff fe4d 	bl	800578c <xTaskCreateStatic>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <vTaskStartScheduler+0xb4>)
 8005af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005af8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b70 <vTaskStartScheduler+0xb4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e001      	b.n	8005b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d116      	bne.n	8005b3e <vTaskStartScheduler+0x82>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
}
 8005b22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b24:	4b13      	ldr	r3, [pc, #76]	@ (8005b74 <vTaskStartScheduler+0xb8>)
 8005b26:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <vTaskStartScheduler+0xbc>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b32:	4b12      	ldr	r3, [pc, #72]	@ (8005b7c <vTaskStartScheduler+0xc0>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b38:	f000 fe52 	bl	80067e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b3c:	e00f      	b.n	8005b5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d10b      	bne.n	8005b5e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <vTaskStartScheduler+0x9e>
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08007978 	.word	0x08007978
 8005b6c:	08006125 	.word	0x08006125
 8005b70:	200005d4 	.word	0x200005d4
 8005b74:	200005d0 	.word	0x200005d0
 8005b78:	200005bc 	.word	0x200005bc
 8005b7c:	200005b4 	.word	0x200005b4

08005b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b84:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <vTaskSuspendAll+0x18>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a03      	ldr	r2, [pc, #12]	@ (8005b98 <vTaskSuspendAll+0x18>)
 8005b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b8e:	bf00      	nop
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	200005d8 	.word	0x200005d8

08005b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005baa:	4b42      	ldr	r3, [pc, #264]	@ (8005cb4 <xTaskResumeAll+0x118>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <xTaskResumeAll+0x2e>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	603b      	str	r3, [r7, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bca:	f000 fead 	bl	8006928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bce:	4b39      	ldr	r3, [pc, #228]	@ (8005cb4 <xTaskResumeAll+0x118>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	4a37      	ldr	r2, [pc, #220]	@ (8005cb4 <xTaskResumeAll+0x118>)
 8005bd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd8:	4b36      	ldr	r3, [pc, #216]	@ (8005cb4 <xTaskResumeAll+0x118>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d161      	bne.n	8005ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005be0:	4b35      	ldr	r3, [pc, #212]	@ (8005cb8 <xTaskResumeAll+0x11c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05d      	beq.n	8005ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005be8:	e02e      	b.n	8005c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bea:	4b34      	ldr	r3, [pc, #208]	@ (8005cbc <xTaskResumeAll+0x120>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3318      	adds	r3, #24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff f9e5 	bl	8004fc6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff f9e0 	bl	8004fc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc0 <xTaskResumeAll+0x124>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc0 <xTaskResumeAll+0x124>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4a27      	ldr	r2, [pc, #156]	@ (8005cc4 <xTaskResumeAll+0x128>)
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7ff f96c 	bl	8004f0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c38:	4b23      	ldr	r3, [pc, #140]	@ (8005cc8 <xTaskResumeAll+0x12c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c42:	4b22      	ldr	r3, [pc, #136]	@ (8005ccc <xTaskResumeAll+0x130>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c48:	4b1c      	ldr	r3, [pc, #112]	@ (8005cbc <xTaskResumeAll+0x120>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1cc      	bne.n	8005bea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c56:	f000 fb1b 	bl	8006290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <xTaskResumeAll+0x134>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c66:	f000 f837 	bl	8005cd8 <xTaskIncrementTick>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c70:	4b16      	ldr	r3, [pc, #88]	@ (8005ccc <xTaskResumeAll+0x130>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f1      	bne.n	8005c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c82:	4b13      	ldr	r3, [pc, #76]	@ (8005cd0 <xTaskResumeAll+0x134>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c88:	4b10      	ldr	r3, [pc, #64]	@ (8005ccc <xTaskResumeAll+0x130>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c94:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <xTaskResumeAll+0x138>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ca4:	f000 fe72 	bl	800698c <vPortExitCritical>

	return xAlreadyYielded;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200005d8 	.word	0x200005d8
 8005cb8:	200005b0 	.word	0x200005b0
 8005cbc:	20000570 	.word	0x20000570
 8005cc0:	200005b8 	.word	0x200005b8
 8005cc4:	200004b4 	.word	0x200004b4
 8005cc8:	200004b0 	.word	0x200004b0
 8005ccc:	200005c4 	.word	0x200005c4
 8005cd0:	200005c0 	.word	0x200005c0
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e20 <xTaskIncrementTick+0x148>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 808f 	bne.w	8005e0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cec:	4b4d      	ldr	r3, [pc, #308]	@ (8005e24 <xTaskIncrementTick+0x14c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8005e24 <xTaskIncrementTick+0x14c>)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d121      	bne.n	8005d44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d00:	4b49      	ldr	r3, [pc, #292]	@ (8005e28 <xTaskIncrementTick+0x150>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	603b      	str	r3, [r7, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <xTaskIncrementTick+0x46>
 8005d22:	4b41      	ldr	r3, [pc, #260]	@ (8005e28 <xTaskIncrementTick+0x150>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	4b40      	ldr	r3, [pc, #256]	@ (8005e2c <xTaskIncrementTick+0x154>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e28 <xTaskIncrementTick+0x150>)
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	4a3e      	ldr	r2, [pc, #248]	@ (8005e2c <xTaskIncrementTick+0x154>)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4b3e      	ldr	r3, [pc, #248]	@ (8005e30 <xTaskIncrementTick+0x158>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e30 <xTaskIncrementTick+0x158>)
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	f000 faa6 	bl	8006290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d44:	4b3b      	ldr	r3, [pc, #236]	@ (8005e34 <xTaskIncrementTick+0x15c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d348      	bcc.n	8005de0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	4b36      	ldr	r3, [pc, #216]	@ (8005e28 <xTaskIncrementTick+0x150>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d58:	4b36      	ldr	r3, [pc, #216]	@ (8005e34 <xTaskIncrementTick+0x15c>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	601a      	str	r2, [r3, #0]
					break;
 8005d60:	e03e      	b.n	8005de0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b31      	ldr	r3, [pc, #196]	@ (8005e28 <xTaskIncrementTick+0x150>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d203      	bcs.n	8005d82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e34 <xTaskIncrementTick+0x15c>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d80:	e02e      	b.n	8005de0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f91d 	bl	8004fc6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3318      	adds	r3, #24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff f914 	bl	8004fc6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	2201      	movs	r2, #1
 8005da4:	409a      	lsls	r2, r3
 8005da6:	4b24      	ldr	r3, [pc, #144]	@ (8005e38 <xTaskIncrementTick+0x160>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	4a22      	ldr	r2, [pc, #136]	@ (8005e38 <xTaskIncrementTick+0x160>)
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e3c <xTaskIncrementTick+0x164>)
 8005dbe:	441a      	add	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7ff f8a0 	bl	8004f0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <xTaskIncrementTick+0x168>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d3b9      	bcc.n	8005d4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dde:	e7b6      	b.n	8005d4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005de0:	4b17      	ldr	r3, [pc, #92]	@ (8005e40 <xTaskIncrementTick+0x168>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de6:	4915      	ldr	r1, [pc, #84]	@ (8005e3c <xTaskIncrementTick+0x164>)
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d901      	bls.n	8005dfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dfc:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <xTaskIncrementTick+0x16c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e004      	b.n	8005e14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e48 <xTaskIncrementTick+0x170>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	4a0d      	ldr	r2, [pc, #52]	@ (8005e48 <xTaskIncrementTick+0x170>)
 8005e12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e14:	697b      	ldr	r3, [r7, #20]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200005d8 	.word	0x200005d8
 8005e24:	200005b4 	.word	0x200005b4
 8005e28:	20000568 	.word	0x20000568
 8005e2c:	2000056c 	.word	0x2000056c
 8005e30:	200005c8 	.word	0x200005c8
 8005e34:	200005d0 	.word	0x200005d0
 8005e38:	200005b8 	.word	0x200005b8
 8005e3c:	200004b4 	.word	0x200004b4
 8005e40:	200004b0 	.word	0x200004b0
 8005e44:	200005c4 	.word	0x200005c4
 8005e48:	200005c0 	.word	0x200005c0

08005e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e52:	4b27      	ldr	r3, [pc, #156]	@ (8005ef0 <vTaskSwitchContext+0xa4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e5a:	4b26      	ldr	r3, [pc, #152]	@ (8005ef4 <vTaskSwitchContext+0xa8>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e60:	e040      	b.n	8005ee4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e62:	4b24      	ldr	r3, [pc, #144]	@ (8005ef4 <vTaskSwitchContext+0xa8>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e68:	4b23      	ldr	r3, [pc, #140]	@ (8005ef8 <vTaskSwitchContext+0xac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	fab3 f383 	clz	r3, r3
 8005e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	f1c3 031f 	rsb	r3, r3, #31
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	491f      	ldr	r1, [pc, #124]	@ (8005efc <vTaskSwitchContext+0xb0>)
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <vTaskSwitchContext+0x5e>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <vTaskSwitchContext+0x5a>
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4a11      	ldr	r2, [pc, #68]	@ (8005efc <vTaskSwitchContext+0xb0>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d104      	bne.n	8005eda <vTaskSwitchContext+0x8e>
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	605a      	str	r2, [r3, #4]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a07      	ldr	r2, [pc, #28]	@ (8005f00 <vTaskSwitchContext+0xb4>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	200005d8 	.word	0x200005d8
 8005ef4:	200005c4 	.word	0x200005c4
 8005ef8:	200005b8 	.word	0x200005b8
 8005efc:	200004b4 	.word	0x200004b4
 8005f00:	200004b0 	.word	0x200004b0

08005f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <vTaskPlaceOnEventList+0x48>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3318      	adds	r3, #24
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff f80d 	bl	8004f54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	6838      	ldr	r0, [r7, #0]
 8005f3e:	f000 fb5b 	bl	80065f8 <prvAddCurrentTaskToDelayedList>
}
 8005f42:	bf00      	nop
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200004b0 	.word	0x200004b0

08005f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60fb      	str	r3, [r7, #12]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3318      	adds	r3, #24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff f81f 	bl	8004fc6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f88:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <xTaskRemoveFromEventList+0xb0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d11c      	bne.n	8005fca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f816 	bl	8004fc6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	4b18      	ldr	r3, [pc, #96]	@ (8006004 <xTaskRemoveFromEventList+0xb4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	4a16      	ldr	r2, [pc, #88]	@ (8006004 <xTaskRemoveFromEventList+0xb4>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a13      	ldr	r2, [pc, #76]	@ (8006008 <xTaskRemoveFromEventList+0xb8>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe ffa2 	bl	8004f0c <vListInsertEnd>
 8005fc8:	e005      	b.n	8005fd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3318      	adds	r3, #24
 8005fce:	4619      	mov	r1, r3
 8005fd0:	480e      	ldr	r0, [pc, #56]	@ (800600c <xTaskRemoveFromEventList+0xbc>)
 8005fd2:	f7fe ff9b 	bl	8004f0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <xTaskRemoveFromEventList+0xc0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d905      	bls.n	8005ff0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <xTaskRemoveFromEventList+0xc4>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e001      	b.n	8005ff4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ff4:	697b      	ldr	r3, [r7, #20]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200005d8 	.word	0x200005d8
 8006004:	200005b8 	.word	0x200005b8
 8006008:	200004b4 	.word	0x200004b4
 800600c:	20000570 	.word	0x20000570
 8006010:	200004b0 	.word	0x200004b0
 8006014:	200005c4 	.word	0x200005c4

08006018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006020:	4b06      	ldr	r3, [pc, #24]	@ (800603c <vTaskInternalSetTimeOutState+0x24>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006028:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <vTaskInternalSetTimeOutState+0x28>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	605a      	str	r2, [r3, #4]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	200005c8 	.word	0x200005c8
 8006040:	200005b4 	.word	0x200005b4

08006044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10b      	bne.n	800606c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	613b      	str	r3, [r7, #16]
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800608a:	f000 fc4d 	bl	8006928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800608e:	4b1d      	ldr	r3, [pc, #116]	@ (8006104 <xTaskCheckForTimeOut+0xc0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d102      	bne.n	80060ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	e023      	b.n	80060f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b15      	ldr	r3, [pc, #84]	@ (8006108 <xTaskCheckForTimeOut+0xc4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d007      	beq.n	80060ca <xTaskCheckForTimeOut+0x86>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e015      	b.n	80060f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d20b      	bcs.n	80060ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff99 	bl	8006018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	e004      	b.n	80060f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f000 fc49 	bl	800698c <vPortExitCritical>

	return xReturn;
 80060fa:	69fb      	ldr	r3, [r7, #28]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	200005b4 	.word	0x200005b4
 8006108:	200005c8 	.word	0x200005c8

0800610c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006110:	4b03      	ldr	r3, [pc, #12]	@ (8006120 <vTaskMissedYield+0x14>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	200005c4 	.word	0x200005c4

08006124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800612c:	f000 f852 	bl	80061d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006130:	4b06      	ldr	r3, [pc, #24]	@ (800614c <prvIdleTask+0x28>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d9f9      	bls.n	800612c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <prvIdleTask+0x2c>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006148:	e7f0      	b.n	800612c <prvIdleTask+0x8>
 800614a:	bf00      	nop
 800614c:	200004b4 	.word	0x200004b4
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	e00c      	b.n	800617a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a12      	ldr	r2, [pc, #72]	@ (80061b4 <prvInitialiseTaskLists+0x60>)
 800616c:	4413      	add	r3, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fe9f 	bl	8004eb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3301      	adds	r3, #1
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b06      	cmp	r3, #6
 800617e:	d9ef      	bls.n	8006160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006180:	480d      	ldr	r0, [pc, #52]	@ (80061b8 <prvInitialiseTaskLists+0x64>)
 8006182:	f7fe fe96 	bl	8004eb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006186:	480d      	ldr	r0, [pc, #52]	@ (80061bc <prvInitialiseTaskLists+0x68>)
 8006188:	f7fe fe93 	bl	8004eb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800618c:	480c      	ldr	r0, [pc, #48]	@ (80061c0 <prvInitialiseTaskLists+0x6c>)
 800618e:	f7fe fe90 	bl	8004eb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006192:	480c      	ldr	r0, [pc, #48]	@ (80061c4 <prvInitialiseTaskLists+0x70>)
 8006194:	f7fe fe8d 	bl	8004eb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006198:	480b      	ldr	r0, [pc, #44]	@ (80061c8 <prvInitialiseTaskLists+0x74>)
 800619a:	f7fe fe8a 	bl	8004eb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800619e:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <prvInitialiseTaskLists+0x78>)
 80061a0:	4a05      	ldr	r2, [pc, #20]	@ (80061b8 <prvInitialiseTaskLists+0x64>)
 80061a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061a4:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <prvInitialiseTaskLists+0x7c>)
 80061a6:	4a05      	ldr	r2, [pc, #20]	@ (80061bc <prvInitialiseTaskLists+0x68>)
 80061a8:	601a      	str	r2, [r3, #0]
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200004b4 	.word	0x200004b4
 80061b8:	20000540 	.word	0x20000540
 80061bc:	20000554 	.word	0x20000554
 80061c0:	20000570 	.word	0x20000570
 80061c4:	20000584 	.word	0x20000584
 80061c8:	2000059c 	.word	0x2000059c
 80061cc:	20000568 	.word	0x20000568
 80061d0:	2000056c 	.word	0x2000056c

080061d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061da:	e019      	b.n	8006210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061dc:	f000 fba4 	bl	8006928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e0:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <prvCheckTasksWaitingTermination+0x50>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe feea 	bl	8004fc6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <prvCheckTasksWaitingTermination+0x54>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006228 <prvCheckTasksWaitingTermination+0x54>)
 80061fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061fc:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <prvCheckTasksWaitingTermination+0x58>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	4a0a      	ldr	r2, [pc, #40]	@ (800622c <prvCheckTasksWaitingTermination+0x58>)
 8006204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006206:	f000 fbc1 	bl	800698c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f810 	bl	8006230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006210:	4b06      	ldr	r3, [pc, #24]	@ (800622c <prvCheckTasksWaitingTermination+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e1      	bne.n	80061dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000584 	.word	0x20000584
 8006228:	200005b0 	.word	0x200005b0
 800622c:	20000598 	.word	0x20000598

08006230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800623e:	2b00      	cmp	r3, #0
 8006240:	d108      	bne.n	8006254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fd5e 	bl	8006d08 <vPortFree>
				vPortFree( pxTCB );
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fd5b 	bl	8006d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006252:	e019      	b.n	8006288 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800625a:	2b01      	cmp	r3, #1
 800625c:	d103      	bne.n	8006266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fd52 	bl	8006d08 <vPortFree>
	}
 8006264:	e010      	b.n	8006288 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800626c:	2b02      	cmp	r3, #2
 800626e:	d00b      	beq.n	8006288 <prvDeleteTCB+0x58>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	60fb      	str	r3, [r7, #12]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <prvDeleteTCB+0x54>
	}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006296:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <prvResetNextTaskUnblockTime+0x38>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062a0:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <prvResetNextTaskUnblockTime+0x3c>)
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062a8:	e008      	b.n	80062bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062aa:	4b07      	ldr	r3, [pc, #28]	@ (80062c8 <prvResetNextTaskUnblockTime+0x38>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a04      	ldr	r2, [pc, #16]	@ (80062cc <prvResetNextTaskUnblockTime+0x3c>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000568 	.word	0x20000568
 80062cc:	200005d0 	.word	0x200005d0

080062d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <xTaskGetSchedulerState+0x34>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062de:	2301      	movs	r3, #1
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	e008      	b.n	80062f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e4:	4b08      	ldr	r3, [pc, #32]	@ (8006308 <xTaskGetSchedulerState+0x38>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062ec:	2302      	movs	r3, #2
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	e001      	b.n	80062f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062f6:	687b      	ldr	r3, [r7, #4]
	}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200005bc 	.word	0x200005bc
 8006308:	200005d8 	.word	0x200005d8

0800630c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d070      	beq.n	8006404 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006322:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <xTaskPriorityDisinherit+0x104>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	429a      	cmp	r2, r3
 800632a:	d00b      	beq.n	8006344 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60fb      	str	r3, [r7, #12]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	429a      	cmp	r2, r3
 8006378:	d044      	beq.n	8006404 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637e:	2b00      	cmp	r3, #0
 8006380:	d140      	bne.n	8006404 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3304      	adds	r3, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fe1d 	bl	8004fc6 <uxListRemove>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d115      	bne.n	80063be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006396:	491f      	ldr	r1, [pc, #124]	@ (8006414 <xTaskPriorityDisinherit+0x108>)
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xTaskPriorityDisinherit+0xb2>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	2201      	movs	r2, #1
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	43da      	mvns	r2, r3
 80063b4:	4b18      	ldr	r3, [pc, #96]	@ (8006418 <xTaskPriorityDisinherit+0x10c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4013      	ands	r3, r2
 80063ba:	4a17      	ldr	r2, [pc, #92]	@ (8006418 <xTaskPriorityDisinherit+0x10c>)
 80063bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	f1c3 0207 	rsb	r2, r3, #7
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	2201      	movs	r2, #1
 80063d8:	409a      	lsls	r2, r3
 80063da:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <xTaskPriorityDisinherit+0x10c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4313      	orrs	r3, r2
 80063e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006418 <xTaskPriorityDisinherit+0x10c>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4a08      	ldr	r2, [pc, #32]	@ (8006414 <xTaskPriorityDisinherit+0x108>)
 80063f2:	441a      	add	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fd86 	bl	8004f0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006404:	697b      	ldr	r3, [r7, #20]
	}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	200004b0 	.word	0x200004b0
 8006414:	200004b4 	.word	0x200004b4
 8006418:	200005b8 	.word	0x200005b8

0800641c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800642a:	f000 fa7d 	bl	8006928 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800642e:	4b26      	ldr	r3, [pc, #152]	@ (80064c8 <xTaskNotifyWait+0xac>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d01a      	beq.n	8006472 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800643c:	4b22      	ldr	r3, [pc, #136]	@ (80064c8 <xTaskNotifyWait+0xac>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	43d2      	mvns	r2, r2
 8006446:	400a      	ands	r2, r1
 8006448:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800644a:	4b1f      	ldr	r3, [pc, #124]	@ (80064c8 <xTaskNotifyWait+0xac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800645a:	2101      	movs	r1, #1
 800645c:	6838      	ldr	r0, [r7, #0]
 800645e:	f000 f8cb 	bl	80065f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006462:	4b1a      	ldr	r3, [pc, #104]	@ (80064cc <xTaskNotifyWait+0xb0>)
 8006464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006472:	f000 fa8b 	bl	800698c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006476:	f000 fa57 	bl	8006928 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006480:	4b11      	ldr	r3, [pc, #68]	@ (80064c8 <xTaskNotifyWait+0xac>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800648a:	4b0f      	ldr	r3, [pc, #60]	@ (80064c8 <xTaskNotifyWait+0xac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d002      	beq.n	800649e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e008      	b.n	80064b0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800649e:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <xTaskNotifyWait+0xac>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	43d2      	mvns	r2, r2
 80064a8:	400a      	ands	r2, r1
 80064aa:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <xTaskNotifyWait+0xac>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80064ba:	f000 fa67 	bl	800698c <vPortExitCritical>

		return xReturn;
 80064be:	697b      	ldr	r3, [r7, #20]
	}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	200004b0 	.word	0x200004b0
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61bb      	str	r3, [r7, #24]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064f8:	f000 faf6 	bl	8006ae8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006500:	f3ef 8211 	mrs	r2, BASEPRI
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	617a      	str	r2, [r7, #20]
 8006516:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006518:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800651a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006522:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006536:	7ffb      	ldrb	r3, [r7, #31]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d146      	bne.n	80065ca <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60fb      	str	r3, [r7, #12]
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655c:	4b20      	ldr	r3, [pc, #128]	@ (80065e0 <vTaskNotifyGiveFromISR+0x110>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11c      	bne.n	800659e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	3304      	adds	r3, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fd2c 	bl	8004fc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	2201      	movs	r2, #1
 8006574:	409a      	lsls	r2, r3
 8006576:	4b1b      	ldr	r3, [pc, #108]	@ (80065e4 <vTaskNotifyGiveFromISR+0x114>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4313      	orrs	r3, r2
 800657c:	4a19      	ldr	r2, [pc, #100]	@ (80065e4 <vTaskNotifyGiveFromISR+0x114>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a16      	ldr	r2, [pc, #88]	@ (80065e8 <vTaskNotifyGiveFromISR+0x118>)
 800658e:	441a      	add	r2, r3
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7fe fcb8 	bl	8004f0c <vListInsertEnd>
 800659c:	e005      	b.n	80065aa <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	3318      	adds	r3, #24
 80065a2:	4619      	mov	r1, r3
 80065a4:	4811      	ldr	r0, [pc, #68]	@ (80065ec <vTaskNotifyGiveFromISR+0x11c>)
 80065a6:	f7fe fcb1 	bl	8004f0c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ae:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <vTaskNotifyGiveFromISR+0x120>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d908      	bls.n	80065ca <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80065c4:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <vTaskNotifyGiveFromISR+0x124>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065d4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80065d6:	bf00      	nop
 80065d8:	3728      	adds	r7, #40	@ 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	200005d8 	.word	0x200005d8
 80065e4:	200005b8 	.word	0x200005b8
 80065e8:	200004b4 	.word	0x200004b4
 80065ec:	20000570 	.word	0x20000570
 80065f0:	200004b0 	.word	0x200004b0
 80065f4:	200005c4 	.word	0x200005c4

080065f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006602:	4b29      	ldr	r3, [pc, #164]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006608:	4b28      	ldr	r3, [pc, #160]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3304      	adds	r3, #4
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fcd9 	bl	8004fc6 <uxListRemove>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800661a:	4b24      	ldr	r3, [pc, #144]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	2201      	movs	r2, #1
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	43da      	mvns	r2, r3
 8006628:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4013      	ands	r3, r2
 800662e:	4a20      	ldr	r2, [pc, #128]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006630:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d10a      	bne.n	8006650 <prvAddCurrentTaskToDelayedList+0x58>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006640:	4b1a      	ldr	r3, [pc, #104]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	481a      	ldr	r0, [pc, #104]	@ (80066b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800664a:	f7fe fc5f 	bl	8004f0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800664e:	e026      	b.n	800669e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006658:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	429a      	cmp	r2, r3
 8006666:	d209      	bcs.n	800667c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006668:	4b13      	ldr	r3, [pc, #76]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b0f      	ldr	r3, [pc, #60]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fe fc6d 	bl	8004f54 <vListInsert>
}
 800667a:	e010      	b.n	800669e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800667c:	4b0f      	ldr	r3, [pc, #60]	@ (80066bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fe fc63 	bl	8004f54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800668e:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	d202      	bcs.n	800669e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006698:	4a09      	ldr	r2, [pc, #36]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6013      	str	r3, [r2, #0]
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200005b4 	.word	0x200005b4
 80066ac:	200004b0 	.word	0x200004b0
 80066b0:	200005b8 	.word	0x200005b8
 80066b4:	2000059c 	.word	0x2000059c
 80066b8:	2000056c 	.word	0x2000056c
 80066bc:	20000568 	.word	0x20000568
 80066c0:	200005d0 	.word	0x200005d0

080066c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b04      	subs	r3, #4
 80066d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3b04      	subs	r3, #4
 80066e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f023 0201 	bic.w	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3b04      	subs	r3, #4
 80066f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066f4:	4a0c      	ldr	r2, [pc, #48]	@ (8006728 <pxPortInitialiseStack+0x64>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3b14      	subs	r3, #20
 80066fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3b04      	subs	r3, #4
 800670a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f06f 0202 	mvn.w	r2, #2
 8006712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3b20      	subs	r3, #32
 8006718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800671a:	68fb      	ldr	r3, [r7, #12]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	0800672d 	.word	0x0800672d

0800672c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006736:	4b13      	ldr	r3, [pc, #76]	@ (8006784 <prvTaskExitError+0x58>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d00b      	beq.n	8006758 <prvTaskExitError+0x2c>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <prvTaskExitError+0x28>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60bb      	str	r3, [r7, #8]
}
 800676a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800676c:	bf00      	nop
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0fc      	beq.n	800676e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	200000a0 	.word	0x200000a0
	...

08006790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006790:	4b07      	ldr	r3, [pc, #28]	@ (80067b0 <pxCurrentTCBConst2>)
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	f380 8809 	msr	PSP, r0
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8811 	msr	BASEPRI, r0
 80067aa:	4770      	bx	lr
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst2>:
 80067b0:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067b8:	4808      	ldr	r0, [pc, #32]	@ (80067dc <prvPortStartFirstTask+0x24>)
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f380 8808 	msr	MSP, r0
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8814 	msr	CONTROL, r0
 80067ca:	b662      	cpsie	i
 80067cc:	b661      	cpsie	f
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	df00      	svc	0
 80067d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067da:	bf00      	nop
 80067dc:	e000ed08 	.word	0xe000ed08

080067e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067e6:	4b47      	ldr	r3, [pc, #284]	@ (8006904 <xPortStartScheduler+0x124>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a47      	ldr	r2, [pc, #284]	@ (8006908 <xPortStartScheduler+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10b      	bne.n	8006808 <xPortStartScheduler+0x28>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60fb      	str	r3, [r7, #12]
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	e7fd      	b.n	8006804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006808:	4b3e      	ldr	r3, [pc, #248]	@ (8006904 <xPortStartScheduler+0x124>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a3f      	ldr	r2, [pc, #252]	@ (800690c <xPortStartScheduler+0x12c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d10b      	bne.n	800682a <xPortStartScheduler+0x4a>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	613b      	str	r3, [r7, #16]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800682a:	4b39      	ldr	r3, [pc, #228]	@ (8006910 <xPortStartScheduler+0x130>)
 800682c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	22ff      	movs	r2, #255	@ 0xff
 800683a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b31      	ldr	r3, [pc, #196]	@ (8006914 <xPortStartScheduler+0x134>)
 8006850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006852:	4b31      	ldr	r3, [pc, #196]	@ (8006918 <xPortStartScheduler+0x138>)
 8006854:	2207      	movs	r2, #7
 8006856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006858:	e009      	b.n	800686e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800685a:	4b2f      	ldr	r3, [pc, #188]	@ (8006918 <xPortStartScheduler+0x138>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3b01      	subs	r3, #1
 8006860:	4a2d      	ldr	r2, [pc, #180]	@ (8006918 <xPortStartScheduler+0x138>)
 8006862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006876:	2b80      	cmp	r3, #128	@ 0x80
 8006878:	d0ef      	beq.n	800685a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800687a:	4b27      	ldr	r3, [pc, #156]	@ (8006918 <xPortStartScheduler+0x138>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1c3 0307 	rsb	r3, r3, #7
 8006882:	2b04      	cmp	r3, #4
 8006884:	d00b      	beq.n	800689e <xPortStartScheduler+0xbe>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60bb      	str	r3, [r7, #8]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800689e:	4b1e      	ldr	r3, [pc, #120]	@ (8006918 <xPortStartScheduler+0x138>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006918 <xPortStartScheduler+0x138>)
 80068a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006918 <xPortStartScheduler+0x138>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068b0:	4a19      	ldr	r2, [pc, #100]	@ (8006918 <xPortStartScheduler+0x138>)
 80068b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068bc:	4b17      	ldr	r3, [pc, #92]	@ (800691c <xPortStartScheduler+0x13c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a16      	ldr	r2, [pc, #88]	@ (800691c <xPortStartScheduler+0x13c>)
 80068c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068c8:	4b14      	ldr	r3, [pc, #80]	@ (800691c <xPortStartScheduler+0x13c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a13      	ldr	r2, [pc, #76]	@ (800691c <xPortStartScheduler+0x13c>)
 80068ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068d4:	f000 f8da 	bl	8006a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068d8:	4b11      	ldr	r3, [pc, #68]	@ (8006920 <xPortStartScheduler+0x140>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068de:	f000 f8f9 	bl	8006ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <xPortStartScheduler+0x144>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006924 <xPortStartScheduler+0x144>)
 80068e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068ee:	f7ff ff63 	bl	80067b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068f2:	f7ff faab 	bl	8005e4c <vTaskSwitchContext>
	prvTaskExitError();
 80068f6:	f7ff ff19 	bl	800672c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	e000ed00 	.word	0xe000ed00
 8006908:	410fc271 	.word	0x410fc271
 800690c:	410fc270 	.word	0x410fc270
 8006910:	e000e400 	.word	0xe000e400
 8006914:	200005dc 	.word	0x200005dc
 8006918:	200005e0 	.word	0x200005e0
 800691c:	e000ed20 	.word	0xe000ed20
 8006920:	200000a0 	.word	0x200000a0
 8006924:	e000ef34 	.word	0xe000ef34

08006928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <vPortEnterCritical+0x5c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	4a0e      	ldr	r2, [pc, #56]	@ (8006984 <vPortEnterCritical+0x5c>)
 800694a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800694c:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <vPortEnterCritical+0x5c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d110      	bne.n	8006976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006954:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <vPortEnterCritical+0x60>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <vPortEnterCritical+0x4e>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	603b      	str	r3, [r7, #0]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <vPortEnterCritical+0x4a>
	}
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	200000a0 	.word	0x200000a0
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006992:	4b12      	ldr	r3, [pc, #72]	@ (80069dc <vPortExitCritical+0x50>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <vPortExitCritical+0x26>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069b2:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <vPortExitCritical+0x50>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a08      	ldr	r2, [pc, #32]	@ (80069dc <vPortExitCritical+0x50>)
 80069ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069bc:	4b07      	ldr	r3, [pc, #28]	@ (80069dc <vPortExitCritical+0x50>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d105      	bne.n	80069d0 <vPortExitCritical+0x44>
 80069c4:	2300      	movs	r3, #0
 80069c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f383 8811 	msr	BASEPRI, r3
}
 80069ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	200000a0 	.word	0x200000a0

080069e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069e0:	f3ef 8009 	mrs	r0, PSP
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4b15      	ldr	r3, [pc, #84]	@ (8006a40 <pxCurrentTCBConst>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	f01e 0f10 	tst.w	lr, #16
 80069f0:	bf08      	it	eq
 80069f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	6010      	str	r0, [r2, #0]
 80069fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a04:	f380 8811 	msr	BASEPRI, r0
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f7ff fa1c 	bl	8005e4c <vTaskSwitchContext>
 8006a14:	f04f 0000 	mov.w	r0, #0
 8006a18:	f380 8811 	msr	BASEPRI, r0
 8006a1c:	bc09      	pop	{r0, r3}
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	6808      	ldr	r0, [r1, #0]
 8006a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	f01e 0f10 	tst.w	lr, #16
 8006a2a:	bf08      	it	eq
 8006a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a30:	f380 8809 	msr	PSP, r0
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst>:
 8006a40:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a62:	f7ff f939 	bl	8005cd8 <xTaskIncrementTick>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <xPortSysTickHandler+0x40>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
}
 8006a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <vPortSetupTimerInterrupt+0x38>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac8 <vPortSetupTimerInterrupt+0x3c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8006acc <vPortSetupTimerInterrupt+0x40>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	4a09      	ldr	r2, [pc, #36]	@ (8006ad0 <vPortSetupTimerInterrupt+0x44>)
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aae:	4b04      	ldr	r3, [pc, #16]	@ (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000e010 	.word	0xe000e010
 8006ac4:	e000e018 	.word	0xe000e018
 8006ac8:	20000094 	.word	0x20000094
 8006acc:	10624dd3 	.word	0x10624dd3
 8006ad0:	e000e014 	.word	0xe000e014

08006ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ae4 <vPortEnableVFP+0x10>
 8006ad8:	6801      	ldr	r1, [r0, #0]
 8006ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ade:	6001      	str	r1, [r0, #0]
 8006ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ae2:	bf00      	nop
 8006ae4:	e000ed88 	.word	0xe000ed88

08006ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006aee:	f3ef 8305 	mrs	r3, IPSR
 8006af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d915      	bls.n	8006b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006afa:	4a18      	ldr	r2, [pc, #96]	@ (8006b5c <vPortValidateInterruptPriority+0x74>)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b04:	4b16      	ldr	r3, [pc, #88]	@ (8006b60 <vPortValidateInterruptPriority+0x78>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	7afa      	ldrb	r2, [r7, #11]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d20b      	bcs.n	8006b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b26:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <vPortValidateInterruptPriority+0x7c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <vPortValidateInterruptPriority+0x80>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d90b      	bls.n	8006b4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	603b      	str	r3, [r7, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <vPortValidateInterruptPriority+0x62>
	}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	e000e3f0 	.word	0xe000e3f0
 8006b60:	200005dc 	.word	0x200005dc
 8006b64:	e000ed0c 	.word	0xe000ed0c
 8006b68:	200005e0 	.word	0x200005e0

08006b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	@ 0x28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b78:	f7ff f802 	bl	8005b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006cf0 <pvPortMalloc+0x184>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b84:	f000 f924 	bl	8006dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b88:	4b5a      	ldr	r3, [pc, #360]	@ (8006cf4 <pvPortMalloc+0x188>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 8095 	bne.w	8006cc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d015      	beq.n	8006bda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f023 0307 	bic.w	r3, r3, #7
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <pvPortMalloc+0x6e>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	617b      	str	r3, [r7, #20]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d06f      	beq.n	8006cc0 <pvPortMalloc+0x154>
 8006be0:	4b45      	ldr	r3, [pc, #276]	@ (8006cf8 <pvPortMalloc+0x18c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d86a      	bhi.n	8006cc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bea:	4b44      	ldr	r3, [pc, #272]	@ (8006cfc <pvPortMalloc+0x190>)
 8006bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bee:	4b43      	ldr	r3, [pc, #268]	@ (8006cfc <pvPortMalloc+0x190>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bf4:	e004      	b.n	8006c00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d903      	bls.n	8006c12 <pvPortMalloc+0xa6>
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f1      	bne.n	8006bf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c12:	4b37      	ldr	r3, [pc, #220]	@ (8006cf0 <pvPortMalloc+0x184>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d051      	beq.n	8006cc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	4413      	add	r3, r2
 8006c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	2308      	movs	r3, #8
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d920      	bls.n	8006c80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <pvPortMalloc+0xfc>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	613b      	str	r3, [r7, #16]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c7a:	69b8      	ldr	r0, [r7, #24]
 8006c7c:	f000 f90a 	bl	8006e94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c80:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf8 <pvPortMalloc+0x18c>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf8 <pvPortMalloc+0x18c>)
 8006c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf8 <pvPortMalloc+0x18c>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b1b      	ldr	r3, [pc, #108]	@ (8006d00 <pvPortMalloc+0x194>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d203      	bcs.n	8006ca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c9a:	4b17      	ldr	r3, [pc, #92]	@ (8006cf8 <pvPortMalloc+0x18c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a18      	ldr	r2, [pc, #96]	@ (8006d00 <pvPortMalloc+0x194>)
 8006ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4b13      	ldr	r3, [pc, #76]	@ (8006cf4 <pvPortMalloc+0x188>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cb6:	4b13      	ldr	r3, [pc, #76]	@ (8006d04 <pvPortMalloc+0x198>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	4a11      	ldr	r2, [pc, #68]	@ (8006d04 <pvPortMalloc+0x198>)
 8006cbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cc0:	f7fe ff6c 	bl	8005b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <pvPortMalloc+0x17a>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3728      	adds	r7, #40	@ 0x28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200011a4 	.word	0x200011a4
 8006cf4:	200011b8 	.word	0x200011b8
 8006cf8:	200011a8 	.word	0x200011a8
 8006cfc:	2000119c 	.word	0x2000119c
 8006d00:	200011ac 	.word	0x200011ac
 8006d04:	200011b0 	.word	0x200011b0

08006d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d04f      	beq.n	8006dba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	425b      	negs	r3, r3
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4413      	add	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	4b25      	ldr	r3, [pc, #148]	@ (8006dc4 <vPortFree+0xbc>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <vPortFree+0x46>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <vPortFree+0x66>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60bb      	str	r3, [r7, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	4b14      	ldr	r3, [pc, #80]	@ (8006dc4 <vPortFree+0xbc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01e      	beq.n	8006dba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11a      	bne.n	8006dba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <vPortFree+0xbc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	401a      	ands	r2, r3
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d94:	f7fe fef4 	bl	8005b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <vPortFree+0xc0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4413      	add	r3, r2
 8006da2:	4a09      	ldr	r2, [pc, #36]	@ (8006dc8 <vPortFree+0xc0>)
 8006da4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f000 f874 	bl	8006e94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <vPortFree+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	4a06      	ldr	r2, [pc, #24]	@ (8006dcc <vPortFree+0xc4>)
 8006db4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006db6:	f7fe fef1 	bl	8005b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dba:	bf00      	nop
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200011b8 	.word	0x200011b8
 8006dc8:	200011a8 	.word	0x200011a8
 8006dcc:	200011b4 	.word	0x200011b4

08006dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dd6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006dda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ddc:	4b27      	ldr	r3, [pc, #156]	@ (8006e7c <prvHeapInit+0xac>)
 8006dde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00c      	beq.n	8006e04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3307      	adds	r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0307 	bic.w	r3, r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8006e7c <prvHeapInit+0xac>)
 8006e00:	4413      	add	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e08:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <prvHeapInit+0xb0>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e80 <prvHeapInit+0xb0>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4413      	add	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <prvHeapInit+0xb4>)
 8006e30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e32:	4b14      	ldr	r3, [pc, #80]	@ (8006e84 <prvHeapInit+0xb4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e3a:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <prvHeapInit+0xb4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e50:	4b0c      	ldr	r3, [pc, #48]	@ (8006e84 <prvHeapInit+0xb4>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e88 <prvHeapInit+0xb8>)
 8006e5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a09      	ldr	r2, [pc, #36]	@ (8006e8c <prvHeapInit+0xbc>)
 8006e66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e68:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <prvHeapInit+0xc0>)
 8006e6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	200005e4 	.word	0x200005e4
 8006e80:	2000119c 	.word	0x2000119c
 8006e84:	200011a4 	.word	0x200011a4
 8006e88:	200011ac 	.word	0x200011ac
 8006e8c:	200011a8 	.word	0x200011a8
 8006e90:	200011b8 	.word	0x200011b8

08006e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e9c:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <prvInsertBlockIntoFreeList+0xac>)
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e002      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x14>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d8f7      	bhi.n	8006ea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d108      	bne.n	8006ed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	441a      	add	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d118      	bne.n	8006f1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <prvInsertBlockIntoFreeList+0xb0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d00d      	beq.n	8006f12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	441a      	add	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e008      	b.n	8006f24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f12:	4b0c      	ldr	r3, [pc, #48]	@ (8006f44 <prvInsertBlockIntoFreeList+0xb0>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	e003      	b.n	8006f24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d002      	beq.n	8006f32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	2000119c 	.word	0x2000119c
 8006f44:	200011a4 	.word	0x200011a4

08006f48 <siprintf>:
 8006f48:	b40e      	push	{r1, r2, r3}
 8006f4a:	b510      	push	{r4, lr}
 8006f4c:	b09d      	sub	sp, #116	@ 0x74
 8006f4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	9006      	str	r0, [sp, #24]
 8006f54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f58:	480a      	ldr	r0, [pc, #40]	@ (8006f84 <siprintf+0x3c>)
 8006f5a:	9107      	str	r1, [sp, #28]
 8006f5c:	9104      	str	r1, [sp, #16]
 8006f5e:	490a      	ldr	r1, [pc, #40]	@ (8006f88 <siprintf+0x40>)
 8006f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f64:	9105      	str	r1, [sp, #20]
 8006f66:	2400      	movs	r4, #0
 8006f68:	a902      	add	r1, sp, #8
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f70:	f000 f9a2 	bl	80072b8 <_svfiprintf_r>
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	701c      	strb	r4, [r3, #0]
 8006f78:	b01d      	add	sp, #116	@ 0x74
 8006f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7e:	b003      	add	sp, #12
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	200000a4 	.word	0x200000a4
 8006f88:	ffff0208 	.word	0xffff0208

08006f8c <memset>:
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d100      	bne.n	8006f96 <memset+0xa>
 8006f94:	4770      	bx	lr
 8006f96:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9a:	e7f9      	b.n	8006f90 <memset+0x4>

08006f9c <__errno>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	@ (8006fa4 <__errno+0x8>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	200000a4 	.word	0x200000a4

08006fa8 <__libc_init_array>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4d0d      	ldr	r5, [pc, #52]	@ (8006fe0 <__libc_init_array+0x38>)
 8006fac:	4c0d      	ldr	r4, [pc, #52]	@ (8006fe4 <__libc_init_array+0x3c>)
 8006fae:	1b64      	subs	r4, r4, r5
 8006fb0:	10a4      	asrs	r4, r4, #2
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	d109      	bne.n	8006fcc <__libc_init_array+0x24>
 8006fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8006fe8 <__libc_init_array+0x40>)
 8006fba:	4c0c      	ldr	r4, [pc, #48]	@ (8006fec <__libc_init_array+0x44>)
 8006fbc:	f000 fc64 	bl	8007888 <_init>
 8006fc0:	1b64      	subs	r4, r4, r5
 8006fc2:	10a4      	asrs	r4, r4, #2
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	d105      	bne.n	8006fd6 <__libc_init_array+0x2e>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd0:	4798      	blx	r3
 8006fd2:	3601      	adds	r6, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__libc_init_array+0xc>
 8006fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fda:	4798      	blx	r3
 8006fdc:	3601      	adds	r6, #1
 8006fde:	e7f2      	b.n	8006fc6 <__libc_init_array+0x1e>
 8006fe0:	08007a04 	.word	0x08007a04
 8006fe4:	08007a04 	.word	0x08007a04
 8006fe8:	08007a04 	.word	0x08007a04
 8006fec:	08007a08 	.word	0x08007a08

08006ff0 <__retarget_lock_acquire_recursive>:
 8006ff0:	4770      	bx	lr

08006ff2 <__retarget_lock_release_recursive>:
 8006ff2:	4770      	bx	lr

08006ff4 <memcpy>:
 8006ff4:	440a      	add	r2, r1
 8006ff6:	4291      	cmp	r1, r2
 8006ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ffc:	d100      	bne.n	8007000 <memcpy+0xc>
 8006ffe:	4770      	bx	lr
 8007000:	b510      	push	{r4, lr}
 8007002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800700a:	4291      	cmp	r1, r2
 800700c:	d1f9      	bne.n	8007002 <memcpy+0xe>
 800700e:	bd10      	pop	{r4, pc}

08007010 <_free_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4605      	mov	r5, r0
 8007014:	2900      	cmp	r1, #0
 8007016:	d041      	beq.n	800709c <_free_r+0x8c>
 8007018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701c:	1f0c      	subs	r4, r1, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	bfb8      	it	lt
 8007022:	18e4      	addlt	r4, r4, r3
 8007024:	f000 f8e0 	bl	80071e8 <__malloc_lock>
 8007028:	4a1d      	ldr	r2, [pc, #116]	@ (80070a0 <_free_r+0x90>)
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	b933      	cbnz	r3, 800703c <_free_r+0x2c>
 800702e:	6063      	str	r3, [r4, #4]
 8007030:	6014      	str	r4, [r2, #0]
 8007032:	4628      	mov	r0, r5
 8007034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007038:	f000 b8dc 	b.w	80071f4 <__malloc_unlock>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d908      	bls.n	8007052 <_free_r+0x42>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	1821      	adds	r1, r4, r0
 8007044:	428b      	cmp	r3, r1
 8007046:	bf01      	itttt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	1809      	addeq	r1, r1, r0
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	e7ed      	b.n	800702e <_free_r+0x1e>
 8007052:	461a      	mov	r2, r3
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b10b      	cbz	r3, 800705c <_free_r+0x4c>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x42>
 800705c:	6811      	ldr	r1, [r2, #0]
 800705e:	1850      	adds	r0, r2, r1
 8007060:	42a0      	cmp	r0, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x6c>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	4401      	add	r1, r0
 8007068:	1850      	adds	r0, r2, r1
 800706a:	4283      	cmp	r3, r0
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	d1e0      	bne.n	8007032 <_free_r+0x22>
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	6053      	str	r3, [r2, #4]
 8007076:	4408      	add	r0, r1
 8007078:	6010      	str	r0, [r2, #0]
 800707a:	e7da      	b.n	8007032 <_free_r+0x22>
 800707c:	d902      	bls.n	8007084 <_free_r+0x74>
 800707e:	230c      	movs	r3, #12
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	e7d6      	b.n	8007032 <_free_r+0x22>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	1821      	adds	r1, r4, r0
 8007088:	428b      	cmp	r3, r1
 800708a:	bf04      	itt	eq
 800708c:	6819      	ldreq	r1, [r3, #0]
 800708e:	685b      	ldreq	r3, [r3, #4]
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	bf04      	itt	eq
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	6054      	str	r4, [r2, #4]
 800709a:	e7ca      	b.n	8007032 <_free_r+0x22>
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	20001300 	.word	0x20001300

080070a4 <sbrk_aligned>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	4e0f      	ldr	r6, [pc, #60]	@ (80070e4 <sbrk_aligned+0x40>)
 80070a8:	460c      	mov	r4, r1
 80070aa:	6831      	ldr	r1, [r6, #0]
 80070ac:	4605      	mov	r5, r0
 80070ae:	b911      	cbnz	r1, 80070b6 <sbrk_aligned+0x12>
 80070b0:	f000 fba4 	bl	80077fc <_sbrk_r>
 80070b4:	6030      	str	r0, [r6, #0]
 80070b6:	4621      	mov	r1, r4
 80070b8:	4628      	mov	r0, r5
 80070ba:	f000 fb9f 	bl	80077fc <_sbrk_r>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	d103      	bne.n	80070ca <sbrk_aligned+0x26>
 80070c2:	f04f 34ff 	mov.w	r4, #4294967295
 80070c6:	4620      	mov	r0, r4
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d0f8      	beq.n	80070c6 <sbrk_aligned+0x22>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 fb90 	bl	80077fc <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d1f2      	bne.n	80070c6 <sbrk_aligned+0x22>
 80070e0:	e7ef      	b.n	80070c2 <sbrk_aligned+0x1e>
 80070e2:	bf00      	nop
 80070e4:	200012fc 	.word	0x200012fc

080070e8 <_malloc_r>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	1ccd      	adds	r5, r1, #3
 80070ee:	f025 0503 	bic.w	r5, r5, #3
 80070f2:	3508      	adds	r5, #8
 80070f4:	2d0c      	cmp	r5, #12
 80070f6:	bf38      	it	cc
 80070f8:	250c      	movcc	r5, #12
 80070fa:	2d00      	cmp	r5, #0
 80070fc:	4606      	mov	r6, r0
 80070fe:	db01      	blt.n	8007104 <_malloc_r+0x1c>
 8007100:	42a9      	cmp	r1, r5
 8007102:	d904      	bls.n	800710e <_malloc_r+0x26>
 8007104:	230c      	movs	r3, #12
 8007106:	6033      	str	r3, [r6, #0]
 8007108:	2000      	movs	r0, #0
 800710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071e4 <_malloc_r+0xfc>
 8007112:	f000 f869 	bl	80071e8 <__malloc_lock>
 8007116:	f8d8 3000 	ldr.w	r3, [r8]
 800711a:	461c      	mov	r4, r3
 800711c:	bb44      	cbnz	r4, 8007170 <_malloc_r+0x88>
 800711e:	4629      	mov	r1, r5
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ffbf 	bl	80070a4 <sbrk_aligned>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	4604      	mov	r4, r0
 800712a:	d158      	bne.n	80071de <_malloc_r+0xf6>
 800712c:	f8d8 4000 	ldr.w	r4, [r8]
 8007130:	4627      	mov	r7, r4
 8007132:	2f00      	cmp	r7, #0
 8007134:	d143      	bne.n	80071be <_malloc_r+0xd6>
 8007136:	2c00      	cmp	r4, #0
 8007138:	d04b      	beq.n	80071d2 <_malloc_r+0xea>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	4639      	mov	r1, r7
 800713e:	4630      	mov	r0, r6
 8007140:	eb04 0903 	add.w	r9, r4, r3
 8007144:	f000 fb5a 	bl	80077fc <_sbrk_r>
 8007148:	4581      	cmp	r9, r0
 800714a:	d142      	bne.n	80071d2 <_malloc_r+0xea>
 800714c:	6821      	ldr	r1, [r4, #0]
 800714e:	1a6d      	subs	r5, r5, r1
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ffa6 	bl	80070a4 <sbrk_aligned>
 8007158:	3001      	adds	r0, #1
 800715a:	d03a      	beq.n	80071d2 <_malloc_r+0xea>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	442b      	add	r3, r5
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	f8d8 3000 	ldr.w	r3, [r8]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	bb62      	cbnz	r2, 80071c4 <_malloc_r+0xdc>
 800716a:	f8c8 7000 	str.w	r7, [r8]
 800716e:	e00f      	b.n	8007190 <_malloc_r+0xa8>
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	1b52      	subs	r2, r2, r5
 8007174:	d420      	bmi.n	80071b8 <_malloc_r+0xd0>
 8007176:	2a0b      	cmp	r2, #11
 8007178:	d917      	bls.n	80071aa <_malloc_r+0xc2>
 800717a:	1961      	adds	r1, r4, r5
 800717c:	42a3      	cmp	r3, r4
 800717e:	6025      	str	r5, [r4, #0]
 8007180:	bf18      	it	ne
 8007182:	6059      	strne	r1, [r3, #4]
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	bf08      	it	eq
 8007188:	f8c8 1000 	streq.w	r1, [r8]
 800718c:	5162      	str	r2, [r4, r5]
 800718e:	604b      	str	r3, [r1, #4]
 8007190:	4630      	mov	r0, r6
 8007192:	f000 f82f 	bl	80071f4 <__malloc_unlock>
 8007196:	f104 000b 	add.w	r0, r4, #11
 800719a:	1d23      	adds	r3, r4, #4
 800719c:	f020 0007 	bic.w	r0, r0, #7
 80071a0:	1ac2      	subs	r2, r0, r3
 80071a2:	bf1c      	itt	ne
 80071a4:	1a1b      	subne	r3, r3, r0
 80071a6:	50a3      	strne	r3, [r4, r2]
 80071a8:	e7af      	b.n	800710a <_malloc_r+0x22>
 80071aa:	6862      	ldr	r2, [r4, #4]
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	bf0c      	ite	eq
 80071b0:	f8c8 2000 	streq.w	r2, [r8]
 80071b4:	605a      	strne	r2, [r3, #4]
 80071b6:	e7eb      	b.n	8007190 <_malloc_r+0xa8>
 80071b8:	4623      	mov	r3, r4
 80071ba:	6864      	ldr	r4, [r4, #4]
 80071bc:	e7ae      	b.n	800711c <_malloc_r+0x34>
 80071be:	463c      	mov	r4, r7
 80071c0:	687f      	ldr	r7, [r7, #4]
 80071c2:	e7b6      	b.n	8007132 <_malloc_r+0x4a>
 80071c4:	461a      	mov	r2, r3
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d1fb      	bne.n	80071c4 <_malloc_r+0xdc>
 80071cc:	2300      	movs	r3, #0
 80071ce:	6053      	str	r3, [r2, #4]
 80071d0:	e7de      	b.n	8007190 <_malloc_r+0xa8>
 80071d2:	230c      	movs	r3, #12
 80071d4:	6033      	str	r3, [r6, #0]
 80071d6:	4630      	mov	r0, r6
 80071d8:	f000 f80c 	bl	80071f4 <__malloc_unlock>
 80071dc:	e794      	b.n	8007108 <_malloc_r+0x20>
 80071de:	6005      	str	r5, [r0, #0]
 80071e0:	e7d6      	b.n	8007190 <_malloc_r+0xa8>
 80071e2:	bf00      	nop
 80071e4:	20001300 	.word	0x20001300

080071e8 <__malloc_lock>:
 80071e8:	4801      	ldr	r0, [pc, #4]	@ (80071f0 <__malloc_lock+0x8>)
 80071ea:	f7ff bf01 	b.w	8006ff0 <__retarget_lock_acquire_recursive>
 80071ee:	bf00      	nop
 80071f0:	200012f8 	.word	0x200012f8

080071f4 <__malloc_unlock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	@ (80071fc <__malloc_unlock+0x8>)
 80071f6:	f7ff befc 	b.w	8006ff2 <__retarget_lock_release_recursive>
 80071fa:	bf00      	nop
 80071fc:	200012f8 	.word	0x200012f8

08007200 <__ssputs_r>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	688e      	ldr	r6, [r1, #8]
 8007206:	461f      	mov	r7, r3
 8007208:	42be      	cmp	r6, r7
 800720a:	680b      	ldr	r3, [r1, #0]
 800720c:	4682      	mov	sl, r0
 800720e:	460c      	mov	r4, r1
 8007210:	4690      	mov	r8, r2
 8007212:	d82d      	bhi.n	8007270 <__ssputs_r+0x70>
 8007214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800721c:	d026      	beq.n	800726c <__ssputs_r+0x6c>
 800721e:	6965      	ldr	r5, [r4, #20]
 8007220:	6909      	ldr	r1, [r1, #16]
 8007222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007226:	eba3 0901 	sub.w	r9, r3, r1
 800722a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800722e:	1c7b      	adds	r3, r7, #1
 8007230:	444b      	add	r3, r9
 8007232:	106d      	asrs	r5, r5, #1
 8007234:	429d      	cmp	r5, r3
 8007236:	bf38      	it	cc
 8007238:	461d      	movcc	r5, r3
 800723a:	0553      	lsls	r3, r2, #21
 800723c:	d527      	bpl.n	800728e <__ssputs_r+0x8e>
 800723e:	4629      	mov	r1, r5
 8007240:	f7ff ff52 	bl	80070e8 <_malloc_r>
 8007244:	4606      	mov	r6, r0
 8007246:	b360      	cbz	r0, 80072a2 <__ssputs_r+0xa2>
 8007248:	6921      	ldr	r1, [r4, #16]
 800724a:	464a      	mov	r2, r9
 800724c:	f7ff fed2 	bl	8006ff4 <memcpy>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	6126      	str	r6, [r4, #16]
 800725e:	6165      	str	r5, [r4, #20]
 8007260:	444e      	add	r6, r9
 8007262:	eba5 0509 	sub.w	r5, r5, r9
 8007266:	6026      	str	r6, [r4, #0]
 8007268:	60a5      	str	r5, [r4, #8]
 800726a:	463e      	mov	r6, r7
 800726c:	42be      	cmp	r6, r7
 800726e:	d900      	bls.n	8007272 <__ssputs_r+0x72>
 8007270:	463e      	mov	r6, r7
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	4632      	mov	r2, r6
 8007276:	4641      	mov	r1, r8
 8007278:	f000 faa6 	bl	80077c8 <memmove>
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	1b9b      	subs	r3, r3, r6
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	4433      	add	r3, r6
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	2000      	movs	r0, #0
 800728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728e:	462a      	mov	r2, r5
 8007290:	f000 fac4 	bl	800781c <_realloc_r>
 8007294:	4606      	mov	r6, r0
 8007296:	2800      	cmp	r0, #0
 8007298:	d1e0      	bne.n	800725c <__ssputs_r+0x5c>
 800729a:	6921      	ldr	r1, [r4, #16]
 800729c:	4650      	mov	r0, sl
 800729e:	f7ff feb7 	bl	8007010 <_free_r>
 80072a2:	230c      	movs	r3, #12
 80072a4:	f8ca 3000 	str.w	r3, [sl]
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	e7e9      	b.n	800728a <__ssputs_r+0x8a>
	...

080072b8 <_svfiprintf_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	4698      	mov	r8, r3
 80072be:	898b      	ldrh	r3, [r1, #12]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	b09d      	sub	sp, #116	@ 0x74
 80072c4:	4607      	mov	r7, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	d510      	bpl.n	80072ee <_svfiprintf_r+0x36>
 80072cc:	690b      	ldr	r3, [r1, #16]
 80072ce:	b973      	cbnz	r3, 80072ee <_svfiprintf_r+0x36>
 80072d0:	2140      	movs	r1, #64	@ 0x40
 80072d2:	f7ff ff09 	bl	80070e8 <_malloc_r>
 80072d6:	6028      	str	r0, [r5, #0]
 80072d8:	6128      	str	r0, [r5, #16]
 80072da:	b930      	cbnz	r0, 80072ea <_svfiprintf_r+0x32>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295
 80072e4:	b01d      	add	sp, #116	@ 0x74
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	2340      	movs	r3, #64	@ 0x40
 80072ec:	616b      	str	r3, [r5, #20]
 80072ee:	2300      	movs	r3, #0
 80072f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80072f2:	2320      	movs	r3, #32
 80072f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072fc:	2330      	movs	r3, #48	@ 0x30
 80072fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800749c <_svfiprintf_r+0x1e4>
 8007302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007306:	f04f 0901 	mov.w	r9, #1
 800730a:	4623      	mov	r3, r4
 800730c:	469a      	mov	sl, r3
 800730e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007312:	b10a      	cbz	r2, 8007318 <_svfiprintf_r+0x60>
 8007314:	2a25      	cmp	r2, #37	@ 0x25
 8007316:	d1f9      	bne.n	800730c <_svfiprintf_r+0x54>
 8007318:	ebba 0b04 	subs.w	fp, sl, r4
 800731c:	d00b      	beq.n	8007336 <_svfiprintf_r+0x7e>
 800731e:	465b      	mov	r3, fp
 8007320:	4622      	mov	r2, r4
 8007322:	4629      	mov	r1, r5
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff ff6b 	bl	8007200 <__ssputs_r>
 800732a:	3001      	adds	r0, #1
 800732c:	f000 80a7 	beq.w	800747e <_svfiprintf_r+0x1c6>
 8007330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007332:	445a      	add	r2, fp
 8007334:	9209      	str	r2, [sp, #36]	@ 0x24
 8007336:	f89a 3000 	ldrb.w	r3, [sl]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 809f 	beq.w	800747e <_svfiprintf_r+0x1c6>
 8007340:	2300      	movs	r3, #0
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800734a:	f10a 0a01 	add.w	sl, sl, #1
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	9307      	str	r3, [sp, #28]
 8007352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007356:	931a      	str	r3, [sp, #104]	@ 0x68
 8007358:	4654      	mov	r4, sl
 800735a:	2205      	movs	r2, #5
 800735c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007360:	484e      	ldr	r0, [pc, #312]	@ (800749c <_svfiprintf_r+0x1e4>)
 8007362:	f7f8 ff3d 	bl	80001e0 <memchr>
 8007366:	9a04      	ldr	r2, [sp, #16]
 8007368:	b9d8      	cbnz	r0, 80073a2 <_svfiprintf_r+0xea>
 800736a:	06d0      	lsls	r0, r2, #27
 800736c:	bf44      	itt	mi
 800736e:	2320      	movmi	r3, #32
 8007370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007374:	0711      	lsls	r1, r2, #28
 8007376:	bf44      	itt	mi
 8007378:	232b      	movmi	r3, #43	@ 0x2b
 800737a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800737e:	f89a 3000 	ldrb.w	r3, [sl]
 8007382:	2b2a      	cmp	r3, #42	@ 0x2a
 8007384:	d015      	beq.n	80073b2 <_svfiprintf_r+0xfa>
 8007386:	9a07      	ldr	r2, [sp, #28]
 8007388:	4654      	mov	r4, sl
 800738a:	2000      	movs	r0, #0
 800738c:	f04f 0c0a 	mov.w	ip, #10
 8007390:	4621      	mov	r1, r4
 8007392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007396:	3b30      	subs	r3, #48	@ 0x30
 8007398:	2b09      	cmp	r3, #9
 800739a:	d94b      	bls.n	8007434 <_svfiprintf_r+0x17c>
 800739c:	b1b0      	cbz	r0, 80073cc <_svfiprintf_r+0x114>
 800739e:	9207      	str	r2, [sp, #28]
 80073a0:	e014      	b.n	80073cc <_svfiprintf_r+0x114>
 80073a2:	eba0 0308 	sub.w	r3, r0, r8
 80073a6:	fa09 f303 	lsl.w	r3, r9, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	46a2      	mov	sl, r4
 80073b0:	e7d2      	b.n	8007358 <_svfiprintf_r+0xa0>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	1d19      	adds	r1, r3, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	9103      	str	r1, [sp, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bfbb      	ittet	lt
 80073be:	425b      	neglt	r3, r3
 80073c0:	f042 0202 	orrlt.w	r2, r2, #2
 80073c4:	9307      	strge	r3, [sp, #28]
 80073c6:	9307      	strlt	r3, [sp, #28]
 80073c8:	bfb8      	it	lt
 80073ca:	9204      	strlt	r2, [sp, #16]
 80073cc:	7823      	ldrb	r3, [r4, #0]
 80073ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80073d0:	d10a      	bne.n	80073e8 <_svfiprintf_r+0x130>
 80073d2:	7863      	ldrb	r3, [r4, #1]
 80073d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073d6:	d132      	bne.n	800743e <_svfiprintf_r+0x186>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	9203      	str	r2, [sp, #12]
 80073e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073e4:	3402      	adds	r4, #2
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074ac <_svfiprintf_r+0x1f4>
 80073ec:	7821      	ldrb	r1, [r4, #0]
 80073ee:	2203      	movs	r2, #3
 80073f0:	4650      	mov	r0, sl
 80073f2:	f7f8 fef5 	bl	80001e0 <memchr>
 80073f6:	b138      	cbz	r0, 8007408 <_svfiprintf_r+0x150>
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	eba0 000a 	sub.w	r0, r0, sl
 80073fe:	2240      	movs	r2, #64	@ 0x40
 8007400:	4082      	lsls	r2, r0
 8007402:	4313      	orrs	r3, r2
 8007404:	3401      	adds	r4, #1
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	4824      	ldr	r0, [pc, #144]	@ (80074a0 <_svfiprintf_r+0x1e8>)
 800740e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007412:	2206      	movs	r2, #6
 8007414:	f7f8 fee4 	bl	80001e0 <memchr>
 8007418:	2800      	cmp	r0, #0
 800741a:	d036      	beq.n	800748a <_svfiprintf_r+0x1d2>
 800741c:	4b21      	ldr	r3, [pc, #132]	@ (80074a4 <_svfiprintf_r+0x1ec>)
 800741e:	bb1b      	cbnz	r3, 8007468 <_svfiprintf_r+0x1b0>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	3307      	adds	r3, #7
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	3308      	adds	r3, #8
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742e:	4433      	add	r3, r6
 8007430:	9309      	str	r3, [sp, #36]	@ 0x24
 8007432:	e76a      	b.n	800730a <_svfiprintf_r+0x52>
 8007434:	fb0c 3202 	mla	r2, ip, r2, r3
 8007438:	460c      	mov	r4, r1
 800743a:	2001      	movs	r0, #1
 800743c:	e7a8      	b.n	8007390 <_svfiprintf_r+0xd8>
 800743e:	2300      	movs	r3, #0
 8007440:	3401      	adds	r4, #1
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	4619      	mov	r1, r3
 8007446:	f04f 0c0a 	mov.w	ip, #10
 800744a:	4620      	mov	r0, r4
 800744c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007450:	3a30      	subs	r2, #48	@ 0x30
 8007452:	2a09      	cmp	r2, #9
 8007454:	d903      	bls.n	800745e <_svfiprintf_r+0x1a6>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0c6      	beq.n	80073e8 <_svfiprintf_r+0x130>
 800745a:	9105      	str	r1, [sp, #20]
 800745c:	e7c4      	b.n	80073e8 <_svfiprintf_r+0x130>
 800745e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007462:	4604      	mov	r4, r0
 8007464:	2301      	movs	r3, #1
 8007466:	e7f0      	b.n	800744a <_svfiprintf_r+0x192>
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	462a      	mov	r2, r5
 800746e:	4b0e      	ldr	r3, [pc, #56]	@ (80074a8 <_svfiprintf_r+0x1f0>)
 8007470:	a904      	add	r1, sp, #16
 8007472:	4638      	mov	r0, r7
 8007474:	f3af 8000 	nop.w
 8007478:	1c42      	adds	r2, r0, #1
 800747a:	4606      	mov	r6, r0
 800747c:	d1d6      	bne.n	800742c <_svfiprintf_r+0x174>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	065b      	lsls	r3, r3, #25
 8007482:	f53f af2d 	bmi.w	80072e0 <_svfiprintf_r+0x28>
 8007486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007488:	e72c      	b.n	80072e4 <_svfiprintf_r+0x2c>
 800748a:	ab03      	add	r3, sp, #12
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	462a      	mov	r2, r5
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <_svfiprintf_r+0x1f0>)
 8007492:	a904      	add	r1, sp, #16
 8007494:	4638      	mov	r0, r7
 8007496:	f000 f879 	bl	800758c <_printf_i>
 800749a:	e7ed      	b.n	8007478 <_svfiprintf_r+0x1c0>
 800749c:	080079c8 	.word	0x080079c8
 80074a0:	080079d2 	.word	0x080079d2
 80074a4:	00000000 	.word	0x00000000
 80074a8:	08007201 	.word	0x08007201
 80074ac:	080079ce 	.word	0x080079ce

080074b0 <_printf_common>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	4616      	mov	r6, r2
 80074b6:	4698      	mov	r8, r3
 80074b8:	688a      	ldr	r2, [r1, #8]
 80074ba:	690b      	ldr	r3, [r1, #16]
 80074bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bfb8      	it	lt
 80074c4:	4613      	movlt	r3, r2
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074cc:	4607      	mov	r7, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	b10a      	cbz	r2, 80074d6 <_printf_common+0x26>
 80074d2:	3301      	adds	r3, #1
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	0699      	lsls	r1, r3, #26
 80074da:	bf42      	ittt	mi
 80074dc:	6833      	ldrmi	r3, [r6, #0]
 80074de:	3302      	addmi	r3, #2
 80074e0:	6033      	strmi	r3, [r6, #0]
 80074e2:	6825      	ldr	r5, [r4, #0]
 80074e4:	f015 0506 	ands.w	r5, r5, #6
 80074e8:	d106      	bne.n	80074f8 <_printf_common+0x48>
 80074ea:	f104 0a19 	add.w	sl, r4, #25
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	6832      	ldr	r2, [r6, #0]
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	dc26      	bgt.n	8007546 <_printf_common+0x96>
 80074f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	3b00      	subs	r3, #0
 8007500:	bf18      	it	ne
 8007502:	2301      	movne	r3, #1
 8007504:	0692      	lsls	r2, r2, #26
 8007506:	d42b      	bmi.n	8007560 <_printf_common+0xb0>
 8007508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800750c:	4641      	mov	r1, r8
 800750e:	4638      	mov	r0, r7
 8007510:	47c8      	blx	r9
 8007512:	3001      	adds	r0, #1
 8007514:	d01e      	beq.n	8007554 <_printf_common+0xa4>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	6922      	ldr	r2, [r4, #16]
 800751a:	f003 0306 	and.w	r3, r3, #6
 800751e:	2b04      	cmp	r3, #4
 8007520:	bf02      	ittt	eq
 8007522:	68e5      	ldreq	r5, [r4, #12]
 8007524:	6833      	ldreq	r3, [r6, #0]
 8007526:	1aed      	subeq	r5, r5, r3
 8007528:	68a3      	ldr	r3, [r4, #8]
 800752a:	bf0c      	ite	eq
 800752c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007530:	2500      	movne	r5, #0
 8007532:	4293      	cmp	r3, r2
 8007534:	bfc4      	itt	gt
 8007536:	1a9b      	subgt	r3, r3, r2
 8007538:	18ed      	addgt	r5, r5, r3
 800753a:	2600      	movs	r6, #0
 800753c:	341a      	adds	r4, #26
 800753e:	42b5      	cmp	r5, r6
 8007540:	d11a      	bne.n	8007578 <_printf_common+0xc8>
 8007542:	2000      	movs	r0, #0
 8007544:	e008      	b.n	8007558 <_printf_common+0xa8>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4641      	mov	r1, r8
 800754c:	4638      	mov	r0, r7
 800754e:	47c8      	blx	r9
 8007550:	3001      	adds	r0, #1
 8007552:	d103      	bne.n	800755c <_printf_common+0xac>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	3501      	adds	r5, #1
 800755e:	e7c6      	b.n	80074ee <_printf_common+0x3e>
 8007560:	18e1      	adds	r1, r4, r3
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	2030      	movs	r0, #48	@ 0x30
 8007566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800756a:	4422      	add	r2, r4
 800756c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007574:	3302      	adds	r3, #2
 8007576:	e7c7      	b.n	8007508 <_printf_common+0x58>
 8007578:	2301      	movs	r3, #1
 800757a:	4622      	mov	r2, r4
 800757c:	4641      	mov	r1, r8
 800757e:	4638      	mov	r0, r7
 8007580:	47c8      	blx	r9
 8007582:	3001      	adds	r0, #1
 8007584:	d0e6      	beq.n	8007554 <_printf_common+0xa4>
 8007586:	3601      	adds	r6, #1
 8007588:	e7d9      	b.n	800753e <_printf_common+0x8e>
	...

0800758c <_printf_i>:
 800758c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	7e0f      	ldrb	r7, [r1, #24]
 8007592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007594:	2f78      	cmp	r7, #120	@ 0x78
 8007596:	4691      	mov	r9, r2
 8007598:	4680      	mov	r8, r0
 800759a:	460c      	mov	r4, r1
 800759c:	469a      	mov	sl, r3
 800759e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075a2:	d807      	bhi.n	80075b4 <_printf_i+0x28>
 80075a4:	2f62      	cmp	r7, #98	@ 0x62
 80075a6:	d80a      	bhi.n	80075be <_printf_i+0x32>
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	f000 80d1 	beq.w	8007750 <_printf_i+0x1c4>
 80075ae:	2f58      	cmp	r7, #88	@ 0x58
 80075b0:	f000 80b8 	beq.w	8007724 <_printf_i+0x198>
 80075b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075bc:	e03a      	b.n	8007634 <_printf_i+0xa8>
 80075be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075c2:	2b15      	cmp	r3, #21
 80075c4:	d8f6      	bhi.n	80075b4 <_printf_i+0x28>
 80075c6:	a101      	add	r1, pc, #4	@ (adr r1, 80075cc <_printf_i+0x40>)
 80075c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007639 	.word	0x08007639
 80075d4:	080075b5 	.word	0x080075b5
 80075d8:	080075b5 	.word	0x080075b5
 80075dc:	080075b5 	.word	0x080075b5
 80075e0:	080075b5 	.word	0x080075b5
 80075e4:	08007639 	.word	0x08007639
 80075e8:	080075b5 	.word	0x080075b5
 80075ec:	080075b5 	.word	0x080075b5
 80075f0:	080075b5 	.word	0x080075b5
 80075f4:	080075b5 	.word	0x080075b5
 80075f8:	08007737 	.word	0x08007737
 80075fc:	08007663 	.word	0x08007663
 8007600:	080076f1 	.word	0x080076f1
 8007604:	080075b5 	.word	0x080075b5
 8007608:	080075b5 	.word	0x080075b5
 800760c:	08007759 	.word	0x08007759
 8007610:	080075b5 	.word	0x080075b5
 8007614:	08007663 	.word	0x08007663
 8007618:	080075b5 	.word	0x080075b5
 800761c:	080075b5 	.word	0x080075b5
 8007620:	080076f9 	.word	0x080076f9
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6032      	str	r2, [r6, #0]
 800762c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007634:	2301      	movs	r3, #1
 8007636:	e09c      	b.n	8007772 <_printf_i+0x1e6>
 8007638:	6833      	ldr	r3, [r6, #0]
 800763a:	6820      	ldr	r0, [r4, #0]
 800763c:	1d19      	adds	r1, r3, #4
 800763e:	6031      	str	r1, [r6, #0]
 8007640:	0606      	lsls	r6, r0, #24
 8007642:	d501      	bpl.n	8007648 <_printf_i+0xbc>
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	e003      	b.n	8007650 <_printf_i+0xc4>
 8007648:	0645      	lsls	r5, r0, #25
 800764a:	d5fb      	bpl.n	8007644 <_printf_i+0xb8>
 800764c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007650:	2d00      	cmp	r5, #0
 8007652:	da03      	bge.n	800765c <_printf_i+0xd0>
 8007654:	232d      	movs	r3, #45	@ 0x2d
 8007656:	426d      	negs	r5, r5
 8007658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800765c:	4858      	ldr	r0, [pc, #352]	@ (80077c0 <_printf_i+0x234>)
 800765e:	230a      	movs	r3, #10
 8007660:	e011      	b.n	8007686 <_printf_i+0xfa>
 8007662:	6821      	ldr	r1, [r4, #0]
 8007664:	6833      	ldr	r3, [r6, #0]
 8007666:	0608      	lsls	r0, r1, #24
 8007668:	f853 5b04 	ldr.w	r5, [r3], #4
 800766c:	d402      	bmi.n	8007674 <_printf_i+0xe8>
 800766e:	0649      	lsls	r1, r1, #25
 8007670:	bf48      	it	mi
 8007672:	b2ad      	uxthmi	r5, r5
 8007674:	2f6f      	cmp	r7, #111	@ 0x6f
 8007676:	4852      	ldr	r0, [pc, #328]	@ (80077c0 <_printf_i+0x234>)
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	bf14      	ite	ne
 800767c:	230a      	movne	r3, #10
 800767e:	2308      	moveq	r3, #8
 8007680:	2100      	movs	r1, #0
 8007682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007686:	6866      	ldr	r6, [r4, #4]
 8007688:	60a6      	str	r6, [r4, #8]
 800768a:	2e00      	cmp	r6, #0
 800768c:	db05      	blt.n	800769a <_printf_i+0x10e>
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	432e      	orrs	r6, r5
 8007692:	f021 0104 	bic.w	r1, r1, #4
 8007696:	6021      	str	r1, [r4, #0]
 8007698:	d04b      	beq.n	8007732 <_printf_i+0x1a6>
 800769a:	4616      	mov	r6, r2
 800769c:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a0:	fb03 5711 	mls	r7, r3, r1, r5
 80076a4:	5dc7      	ldrb	r7, [r0, r7]
 80076a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076aa:	462f      	mov	r7, r5
 80076ac:	42bb      	cmp	r3, r7
 80076ae:	460d      	mov	r5, r1
 80076b0:	d9f4      	bls.n	800769c <_printf_i+0x110>
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d10b      	bne.n	80076ce <_printf_i+0x142>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	07df      	lsls	r7, r3, #31
 80076ba:	d508      	bpl.n	80076ce <_printf_i+0x142>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	6861      	ldr	r1, [r4, #4]
 80076c0:	4299      	cmp	r1, r3
 80076c2:	bfde      	ittt	le
 80076c4:	2330      	movle	r3, #48	@ 0x30
 80076c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ce:	1b92      	subs	r2, r2, r6
 80076d0:	6122      	str	r2, [r4, #16]
 80076d2:	f8cd a000 	str.w	sl, [sp]
 80076d6:	464b      	mov	r3, r9
 80076d8:	aa03      	add	r2, sp, #12
 80076da:	4621      	mov	r1, r4
 80076dc:	4640      	mov	r0, r8
 80076de:	f7ff fee7 	bl	80074b0 <_printf_common>
 80076e2:	3001      	adds	r0, #1
 80076e4:	d14a      	bne.n	800777c <_printf_i+0x1f0>
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ea:	b004      	add	sp, #16
 80076ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	f043 0320 	orr.w	r3, r3, #32
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	4832      	ldr	r0, [pc, #200]	@ (80077c4 <_printf_i+0x238>)
 80076fa:	2778      	movs	r7, #120	@ 0x78
 80076fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	6831      	ldr	r1, [r6, #0]
 8007704:	061f      	lsls	r7, r3, #24
 8007706:	f851 5b04 	ldr.w	r5, [r1], #4
 800770a:	d402      	bmi.n	8007712 <_printf_i+0x186>
 800770c:	065f      	lsls	r7, r3, #25
 800770e:	bf48      	it	mi
 8007710:	b2ad      	uxthmi	r5, r5
 8007712:	6031      	str	r1, [r6, #0]
 8007714:	07d9      	lsls	r1, r3, #31
 8007716:	bf44      	itt	mi
 8007718:	f043 0320 	orrmi.w	r3, r3, #32
 800771c:	6023      	strmi	r3, [r4, #0]
 800771e:	b11d      	cbz	r5, 8007728 <_printf_i+0x19c>
 8007720:	2310      	movs	r3, #16
 8007722:	e7ad      	b.n	8007680 <_printf_i+0xf4>
 8007724:	4826      	ldr	r0, [pc, #152]	@ (80077c0 <_printf_i+0x234>)
 8007726:	e7e9      	b.n	80076fc <_printf_i+0x170>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	f023 0320 	bic.w	r3, r3, #32
 800772e:	6023      	str	r3, [r4, #0]
 8007730:	e7f6      	b.n	8007720 <_printf_i+0x194>
 8007732:	4616      	mov	r6, r2
 8007734:	e7bd      	b.n	80076b2 <_printf_i+0x126>
 8007736:	6833      	ldr	r3, [r6, #0]
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	6961      	ldr	r1, [r4, #20]
 800773c:	1d18      	adds	r0, r3, #4
 800773e:	6030      	str	r0, [r6, #0]
 8007740:	062e      	lsls	r6, r5, #24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	d501      	bpl.n	800774a <_printf_i+0x1be>
 8007746:	6019      	str	r1, [r3, #0]
 8007748:	e002      	b.n	8007750 <_printf_i+0x1c4>
 800774a:	0668      	lsls	r0, r5, #25
 800774c:	d5fb      	bpl.n	8007746 <_printf_i+0x1ba>
 800774e:	8019      	strh	r1, [r3, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	4616      	mov	r6, r2
 8007756:	e7bc      	b.n	80076d2 <_printf_i+0x146>
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	6032      	str	r2, [r6, #0]
 800775e:	681e      	ldr	r6, [r3, #0]
 8007760:	6862      	ldr	r2, [r4, #4]
 8007762:	2100      	movs	r1, #0
 8007764:	4630      	mov	r0, r6
 8007766:	f7f8 fd3b 	bl	80001e0 <memchr>
 800776a:	b108      	cbz	r0, 8007770 <_printf_i+0x1e4>
 800776c:	1b80      	subs	r0, r0, r6
 800776e:	6060      	str	r0, [r4, #4]
 8007770:	6863      	ldr	r3, [r4, #4]
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	2300      	movs	r3, #0
 8007776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800777a:	e7aa      	b.n	80076d2 <_printf_i+0x146>
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	4632      	mov	r2, r6
 8007780:	4649      	mov	r1, r9
 8007782:	4640      	mov	r0, r8
 8007784:	47d0      	blx	sl
 8007786:	3001      	adds	r0, #1
 8007788:	d0ad      	beq.n	80076e6 <_printf_i+0x15a>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	079b      	lsls	r3, r3, #30
 800778e:	d413      	bmi.n	80077b8 <_printf_i+0x22c>
 8007790:	68e0      	ldr	r0, [r4, #12]
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	4298      	cmp	r0, r3
 8007796:	bfb8      	it	lt
 8007798:	4618      	movlt	r0, r3
 800779a:	e7a6      	b.n	80076ea <_printf_i+0x15e>
 800779c:	2301      	movs	r3, #1
 800779e:	4632      	mov	r2, r6
 80077a0:	4649      	mov	r1, r9
 80077a2:	4640      	mov	r0, r8
 80077a4:	47d0      	blx	sl
 80077a6:	3001      	adds	r0, #1
 80077a8:	d09d      	beq.n	80076e6 <_printf_i+0x15a>
 80077aa:	3501      	adds	r5, #1
 80077ac:	68e3      	ldr	r3, [r4, #12]
 80077ae:	9903      	ldr	r1, [sp, #12]
 80077b0:	1a5b      	subs	r3, r3, r1
 80077b2:	42ab      	cmp	r3, r5
 80077b4:	dcf2      	bgt.n	800779c <_printf_i+0x210>
 80077b6:	e7eb      	b.n	8007790 <_printf_i+0x204>
 80077b8:	2500      	movs	r5, #0
 80077ba:	f104 0619 	add.w	r6, r4, #25
 80077be:	e7f5      	b.n	80077ac <_printf_i+0x220>
 80077c0:	080079d9 	.word	0x080079d9
 80077c4:	080079ea 	.word	0x080079ea

080077c8 <memmove>:
 80077c8:	4288      	cmp	r0, r1
 80077ca:	b510      	push	{r4, lr}
 80077cc:	eb01 0402 	add.w	r4, r1, r2
 80077d0:	d902      	bls.n	80077d8 <memmove+0x10>
 80077d2:	4284      	cmp	r4, r0
 80077d4:	4623      	mov	r3, r4
 80077d6:	d807      	bhi.n	80077e8 <memmove+0x20>
 80077d8:	1e43      	subs	r3, r0, #1
 80077da:	42a1      	cmp	r1, r4
 80077dc:	d008      	beq.n	80077f0 <memmove+0x28>
 80077de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077e6:	e7f8      	b.n	80077da <memmove+0x12>
 80077e8:	4402      	add	r2, r0
 80077ea:	4601      	mov	r1, r0
 80077ec:	428a      	cmp	r2, r1
 80077ee:	d100      	bne.n	80077f2 <memmove+0x2a>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077fa:	e7f7      	b.n	80077ec <memmove+0x24>

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	@ (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7f9 fb90 	bl	8000f2c <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200012f4 	.word	0x200012f4

0800781c <_realloc_r>:
 800781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	4607      	mov	r7, r0
 8007822:	4614      	mov	r4, r2
 8007824:	460d      	mov	r5, r1
 8007826:	b921      	cbnz	r1, 8007832 <_realloc_r+0x16>
 8007828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782c:	4611      	mov	r1, r2
 800782e:	f7ff bc5b 	b.w	80070e8 <_malloc_r>
 8007832:	b92a      	cbnz	r2, 8007840 <_realloc_r+0x24>
 8007834:	f7ff fbec 	bl	8007010 <_free_r>
 8007838:	4625      	mov	r5, r4
 800783a:	4628      	mov	r0, r5
 800783c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007840:	f000 f81a 	bl	8007878 <_malloc_usable_size_r>
 8007844:	4284      	cmp	r4, r0
 8007846:	4606      	mov	r6, r0
 8007848:	d802      	bhi.n	8007850 <_realloc_r+0x34>
 800784a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800784e:	d8f4      	bhi.n	800783a <_realloc_r+0x1e>
 8007850:	4621      	mov	r1, r4
 8007852:	4638      	mov	r0, r7
 8007854:	f7ff fc48 	bl	80070e8 <_malloc_r>
 8007858:	4680      	mov	r8, r0
 800785a:	b908      	cbnz	r0, 8007860 <_realloc_r+0x44>
 800785c:	4645      	mov	r5, r8
 800785e:	e7ec      	b.n	800783a <_realloc_r+0x1e>
 8007860:	42b4      	cmp	r4, r6
 8007862:	4622      	mov	r2, r4
 8007864:	4629      	mov	r1, r5
 8007866:	bf28      	it	cs
 8007868:	4632      	movcs	r2, r6
 800786a:	f7ff fbc3 	bl	8006ff4 <memcpy>
 800786e:	4629      	mov	r1, r5
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff fbcd 	bl	8007010 <_free_r>
 8007876:	e7f1      	b.n	800785c <_realloc_r+0x40>

08007878 <_malloc_usable_size_r>:
 8007878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800787c:	1f18      	subs	r0, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfbc      	itt	lt
 8007882:	580b      	ldrlt	r3, [r1, r0]
 8007884:	18c0      	addlt	r0, r0, r3
 8007886:	4770      	bx	lr

08007888 <_init>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr

08007894 <_fini>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr
