
03_LED_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004634  08004634  00005634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001010  20000010  080046dc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  080046dc  00006020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef45  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002550  00000000  00000000  00014f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000174d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4e  00000000  00000000  00018250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271c2  00000000  00000000  00018c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3f0  00000000  00000000  0003fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0062  00000000  00000000  0004f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f2b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  0013f2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00142918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800461c 	.word	0x0800461c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800461c 	.word	0x0800461c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20000080 	.word	0x20000080

08000530 <led_task>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_task(void *p)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	while(1)   // keep running forever
	{
		if(button_status_flag == PRESSED)   // check if button is pressed
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <led_task+0x34>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d10a      	bne.n	8000556 <led_task+0x26>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);   // turn ON LED
 8000540:	2201      	movs	r2, #1
 8000542:	2120      	movs	r1, #32
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f000 fd68 	bl	800101c <HAL_GPIO_WritePin>
			vTaskDelay(1000);    // wait 1000 ticks
 800054c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000550:	f003 f888 	bl	8003664 <vTaskDelay>
 8000554:	e7f0      	b.n	8000538 <led_task+0x8>
		}
		else   // button not pressed
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // turn OFF LED
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055e:	f000 fd5d 	bl	800101c <HAL_GPIO_WritePin>
		if(button_status_flag == PRESSED)   // check if button is pressed
 8000562:	e7e9      	b.n	8000538 <led_task+0x8>
 8000564:	2000030c 	.word	0x2000030c

08000568 <button_task_handler>:
		}
	}
}

void button_task_handler(void *params)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    while(1)
    {
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <button_task_handler+0x28>)
 8000576:	f000 fd39 	bl	8000fec <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <button_task_handler+0x20>
        {
            // button is not pressed on the Nucleo board
            button_status_flag = NOT_PRESSED;
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <button_task_handler+0x2c>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e7f3      	b.n	8000570 <button_task_handler+0x8>
        }
        else
        {
            // button is pressed on the Nucleo board
            button_status_flag = PRESSED;
 8000588:	4b02      	ldr	r3, [pc, #8]	@ (8000594 <button_task_handler+0x2c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800058e:	e7ef      	b.n	8000570 <button_task_handler+0x8>
 8000590:	48000800 	.word	0x48000800
 8000594:	2000030c 	.word	0x2000030c

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fa19 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f839 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f8b9 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f887 	bl	80006bc <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <main+0x68>)
 80005b0:	1d3c      	adds	r4, r7, #4
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fda1 	bl	800310c <osThreadCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <main+0x6c>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(led_task, "Task-1", configMINIMAL_STACK_SIZE , NULL, 1, NULL);//creating task-1
 80005d0:	2300      	movs	r3, #0
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	490a      	ldr	r1, [pc, #40]	@ (8000608 <main+0x70>)
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <main+0x74>)
 80005e0:	f002 ff08 	bl	80033f4 <xTaskCreate>
  xTaskCreate(button_task_handler, "Task-2", configMINIMAL_STACK_SIZE , NULL, 1, NULL);//creating task-2
 80005e4:	2300      	movs	r3, #0
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2280      	movs	r2, #128	@ 0x80
 80005f0:	4907      	ldr	r1, [pc, #28]	@ (8000610 <main+0x78>)
 80005f2:	4808      	ldr	r0, [pc, #32]	@ (8000614 <main+0x7c>)
 80005f4:	f002 fefe 	bl	80033f4 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f002 fd81 	bl	80030fe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x64>
 8000600:	08004650 	.word	0x08004650
 8000604:	20000308 	.word	0x20000308
 8000608:	08004634 	.word	0x08004634
 800060c:	08000531 	.word	0x08000531
 8000610:	0800463c 	.word	0x0800463c
 8000614:	08000569 	.word	0x08000569

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	@ 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	@ 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 ffcc 	bl	80045c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800063e:	f000 fd13 	bl	8001068 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f8d6 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fd4a 	bl	8001114 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000686:	f000 f8b7 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f912 	bl	80018cc <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f8a3 	bl	80007f8 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	@ 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <MX_USART2_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x58>)
 8000700:	f001 ffc4 	bl	800268c <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f875 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000280 	.word	0x20000280
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a2a      	ldr	r2, [pc, #168]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a24      	ldr	r2, [pc, #144]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a1e      	ldr	r2, [pc, #120]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f000 fc3f 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <MX_GPIO_Init+0xc8>)
 80007b6:	f000 fa6f 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ba:	2320      	movs	r3, #32
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f000 fa60 	bl	8000c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	@ 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000800 	.word	0x48000800

080007e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 fcd7 	bl	80031a4 <osDelay>
 80007f6:	e7fb      	b.n	80007f0 <StartDefaultTask+0x8>

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <HAL_MspInit+0x4c>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080e:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <HAL_MspInit+0x4c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6613      	str	r3, [r2, #96]	@ 0x60
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_MspInit+0x4c>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <HAL_MspInit+0x4c>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <HAL_MspInit+0x4c>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082c:	6593      	str	r3, [r2, #88]	@ 0x58
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <HAL_MspInit+0x4c>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 fa00 	bl	8000c46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ac      	sub	sp, #176	@ 0xb0
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2288      	movs	r2, #136	@ 0x88
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fea5 	bl	80045c4 <memset>
  if(huart->Instance==USART2)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a21      	ldr	r2, [pc, #132]	@ (8000904 <HAL_UART_MspInit+0xb0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d13b      	bne.n	80008fc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000884:	2302      	movs	r3, #2
 8000886:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000888:	2300      	movs	r3, #0
 800088a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fa3f 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800089c:	f7ff ffac 	bl	80007f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <HAL_UART_MspInit+0xb4>)
 80008a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a4:	4a18      	ldr	r2, [pc, #96]	@ (8000908 <HAL_UART_MspInit+0xb4>)
 80008a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <HAL_UART_MspInit+0xb4>)
 80008ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <HAL_UART_MspInit+0xb4>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <HAL_UART_MspInit+0xb4>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <HAL_UART_MspInit+0xb4>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d0:	230c      	movs	r3, #12
 80008d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e8:	2307      	movs	r3, #7
 80008ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f000 f9ce 	bl	8000c98 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008fc:	bf00      	nop
 80008fe:	37b0      	adds	r7, #176	@ 0xb0
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40004400 	.word	0x40004400
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <NMI_Handler+0x4>

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <UsageFault_Handler+0x4>

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 f8a1 	bl	8000a8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800094a:	f003 f9bb 	bl	8003cc4 <xTaskGetSchedulerState>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d001      	beq.n	8000958 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000954:	f003 fbf8 	bl	8004148 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f003 fe11 	bl	80045d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fdf1 	bl	8000598 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c4:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 80009c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009cc:	20001020 	.word	0x20001020

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_Init+0x3c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <HAL_Init+0x3c>)
 80009e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 f920 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f0:	200f      	movs	r0, #15
 80009f2:	f000 f80f 	bl	8000a14 <HAL_InitTick>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	e001      	b.n	8000a06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a02:	f7ff feff 	bl	8000804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d023      	beq.n	8000a70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <HAL_InitTick+0x70>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <HAL_InitTick+0x6c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f91d 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10f      	bne.n	8000a6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d809      	bhi.n	8000a64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f8f5 	bl	8000c46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_InitTick+0x74>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	e007      	b.n	8000a74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e004      	b.n	8000a74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e001      	b.n	8000a74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000310 	.word	0x20000310

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000310 	.word	0x20000310

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	@ (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	@ 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff47 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff5c 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffb0 	bl	8000bec <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e17f      	b.n	8000fa8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8171 	beq.w	8000fa2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d130      	bne.n	8000d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	f003 0201 	and.w	r2, r3, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d118      	bne.n	8000d78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d017      	beq.n	8000db4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d123      	bne.n	8000e08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	6939      	ldr	r1, [r7, #16]
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0203 	and.w	r2, r3, #3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80ac 	beq.w	8000fa2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc8 <HAL_GPIO_Init+0x330>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc8 <HAL_GPIO_Init+0x330>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e56:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc8 <HAL_GPIO_Init+0x330>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e62:	4a5a      	ldr	r2, [pc, #360]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x242>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd0 <HAL_GPIO_Init+0x338>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x23e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd4 <HAL_GPIO_Init+0x33c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x23a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd8 <HAL_GPIO_Init+0x340>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x236>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8000fdc <HAL_GPIO_Init+0x344>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x232>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8000fe0 <HAL_GPIO_Init+0x348>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x22e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8000fe4 <HAL_GPIO_Init+0x34c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x22a>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x244>
 8000eda:	2300      	movs	r3, #0
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eec:	4937      	ldr	r1, [pc, #220]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efa:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1e:	4a32      	ldr	r2, [pc, #200]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f24:	4b30      	ldr	r3, [pc, #192]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f48:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <HAL_GPIO_Init+0x350>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f ae78 	bne.w	8000ca8 <HAL_GPIO_Init+0x10>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	48001400 	.word	0x48001400
 8000fe4:	48001800 	.word	0x48001800
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e001      	b.n	800100e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001038:	e002      	b.n	8001040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <HAL_PWREx_GetVoltageRange+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40007000 	.word	0x40007000

08001068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001076:	d130      	bne.n	80010da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001078:	4b23      	ldr	r3, [pc, #140]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001084:	d038      	beq.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2232      	movs	r2, #50	@ 0x32
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	3301      	adds	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ac:	e002      	b.n	80010b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c0:	d102      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f2      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d4:	d110      	bne.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e00f      	b.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e6:	d007      	beq.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f0:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000
 800110c:	20000000 	.word	0x20000000
 8001110:	431bde83 	.word	0x431bde83

08001114 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e3ca      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	4b97      	ldr	r3, [pc, #604]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001130:	4b94      	ldr	r3, [pc, #592]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80e4 	beq.w	8001310 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <HAL_RCC_OscConfig+0x4a>
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b0c      	cmp	r3, #12
 8001152:	f040 808b 	bne.w	800126c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b01      	cmp	r3, #1
 800115a:	f040 8087 	bne.w	800126c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800115e:	4b89      	ldr	r3, [pc, #548]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_RCC_OscConfig+0x62>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e3a2      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1a      	ldr	r2, [r3, #32]
 800117a:	4b82      	ldr	r3, [pc, #520]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <HAL_RCC_OscConfig+0x7c>
 8001186:	4b7f      	ldr	r3, [pc, #508]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800118e:	e005      	b.n	800119c <HAL_RCC_OscConfig+0x88>
 8001190:	4b7c      	ldr	r3, [pc, #496]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800119c:	4293      	cmp	r3, r2
 800119e:	d223      	bcs.n	80011e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd55 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e383      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b4:	4b73      	ldr	r3, [pc, #460]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a72      	ldr	r2, [pc, #456]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b70      	ldr	r3, [pc, #448]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	496d      	ldr	r1, [pc, #436]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4968      	ldr	r1, [pc, #416]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
 80011e6:	e025      	b.n	8001234 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e8:	4b66      	ldr	r3, [pc, #408]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a65      	ldr	r2, [pc, #404]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4960      	ldr	r1, [pc, #384]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001206:	4b5f      	ldr	r3, [pc, #380]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	495b      	ldr	r1, [pc, #364]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fd15 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e343      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001234:	f000 fc4a 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001238:	4602      	mov	r2, r0
 800123a:	4b52      	ldr	r3, [pc, #328]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	4950      	ldr	r1, [pc, #320]	@ (8001388 <HAL_RCC_OscConfig+0x274>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	4a4e      	ldr	r2, [pc, #312]	@ (800138c <HAL_RCC_OscConfig+0x278>)
 8001252:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001254:	4b4e      	ldr	r3, [pc, #312]	@ (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fbdb 	bl	8000a14 <HAL_InitTick>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d052      	beq.n	800130e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	e327      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d032      	beq.n	80012da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001274:	4b43      	ldr	r3, [pc, #268]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a42      	ldr	r2, [pc, #264]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc18 	bl	8000ab4 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001288:	f7ff fc14 	bl	8000ab4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e310      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800129a:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a36      	ldr	r2, [pc, #216]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4931      	ldr	r1, [pc, #196]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	492c      	ldr	r1, [pc, #176]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	e01a      	b.n	8001310 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a29      	ldr	r2, [pc, #164]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fbe5 	bl	8000ab4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ee:	f7ff fbe1 	bl	8000ab4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e2dd      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001300:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x1da>
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800130e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d074      	beq.n	8001406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b08      	cmp	r3, #8
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x21a>
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d10e      	bne.n	8001346 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d10b      	bne.n	8001346 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d064      	beq.n	8001404 <HAL_RCC_OscConfig+0x2f0>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d160      	bne.n	8001404 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e2ba      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x24a>
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e026      	b.n	80013ac <HAL_RCC_OscConfig+0x298>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001366:	d115      	bne.n	8001394 <HAL_RCC_OscConfig+0x280>
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800136e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a02      	ldr	r2, [pc, #8]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x298>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	08004674 	.word	0x08004674
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004
 8001394:	4ba0      	ldr	r3, [pc, #640]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a9f      	ldr	r2, [pc, #636]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a9c      	ldr	r2, [pc, #624]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb7e 	bl	8000ab4 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb7a 	bl	8000ab4 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	@ 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e276      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ce:	4b92      	ldr	r3, [pc, #584]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x2a8>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb6a 	bl	8000ab4 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fb66 	bl	8000ab4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	@ 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e262      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f6:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2d0>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d060      	beq.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x310>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d119      	bne.n	8001452 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d116      	bne.n	8001452 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001424:	4b7c      	ldr	r3, [pc, #496]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x328>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e23f      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b76      	ldr	r3, [pc, #472]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	4973      	ldr	r1, [pc, #460]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001450:	e040      	b.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d023      	beq.n	80014a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145a:	4b6f      	ldr	r3, [pc, #444]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6e      	ldr	r2, [pc, #440]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fb25 	bl	8000ab4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fb21 	bl	8000ab4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e21d      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001480:	4b65      	ldr	r3, [pc, #404]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b62      	ldr	r3, [pc, #392]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	495f      	ldr	r1, [pc, #380]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
 80014a0:	e018      	b.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80014a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb01 	bl	8000ab4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fafd 	bl	8000ab4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1f9      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c8:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d03c      	beq.n	800155a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01c      	beq.n	8001522 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff fadc 	bl	8000ab4 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff fad8 	bl	8000ab4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1d4      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001512:	4b41      	ldr	r3, [pc, #260]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ef      	beq.n	8001500 <HAL_RCC_OscConfig+0x3ec>
 8001520:	e01b      	b.n	800155a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001522:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001528:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fabf 	bl	8000ab4 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fabb 	bl	8000ab4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1b7      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800154c:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ef      	bne.n	800153a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80a6 	beq.w	80016b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10d      	bne.n	8001594 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	4a26      	ldr	r2, [pc, #152]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6593      	str	r3, [r2, #88]	@ 0x58
 8001584:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001590:	2301      	movs	r3, #1
 8001592:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001594:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_RCC_OscConfig+0x508>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d118      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <HAL_RCC_OscConfig+0x508>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_RCC_OscConfig+0x508>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fa82 	bl	8000ab4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b4:	f7ff fa7e 	bl	8000ab4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e17a      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_RCC_OscConfig+0x508>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <HAL_RCC_OscConfig+0x4d8>
 80015da:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ea:	e029      	b.n	8001640 <HAL_RCC_OscConfig+0x52c>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d115      	bne.n	8001620 <HAL_RCC_OscConfig+0x50c>
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001604:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160a:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <HAL_RCC_OscConfig+0x504>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x52c>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40007000 	.word	0x40007000
 8001620:	4b9c      	ldr	r3, [pc, #624]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001626:	4a9b      	ldr	r2, [pc, #620]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001630:	4b98      	ldr	r3, [pc, #608]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001636:	4a97      	ldr	r2, [pc, #604]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d016      	beq.n	8001676 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fa34 	bl	8000ab4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fa30 	bl	8000ab4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e12a      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	4b8b      	ldr	r3, [pc, #556]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ed      	beq.n	8001650 <HAL_RCC_OscConfig+0x53c>
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fa1d 	bl	8000ab4 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fa19 	bl	8000ab4 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e113      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ed      	bne.n	800167e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	4a79      	ldr	r2, [pc, #484]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80016ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80fe 	beq.w	80018ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	f040 80d0 	bne.w	8001868 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016c8:	4b72      	ldr	r3, [pc, #456]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0203 	and.w	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d8:	429a      	cmp	r2, r3
 80016da:	d130      	bne.n	800173e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	3b01      	subs	r3, #1
 80016e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d127      	bne.n	800173e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d11f      	bne.n	800173e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001708:	2a07      	cmp	r2, #7
 800170a:	bf14      	ite	ne
 800170c:	2201      	movne	r2, #1
 800170e:	2200      	moveq	r2, #0
 8001710:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001712:	4293      	cmp	r3, r2
 8001714:	d113      	bne.n	800173e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d109      	bne.n	800173e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	085b      	lsrs	r3, r3, #1
 8001736:	3b01      	subs	r3, #1
 8001738:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d06e      	beq.n	800181c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d069      	beq.n	8001818 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001744:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001750:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0ad      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001760:	4b4c      	ldr	r3, [pc, #304]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800176a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800176c:	f7ff f9a2 	bl	8000ab4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f99e 	bl	8000ab4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e09a      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001786:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001792:	4b40      	ldr	r3, [pc, #256]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b40      	ldr	r3, [pc, #256]	@ (8001898 <HAL_RCC_OscConfig+0x784>)
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017a2:	3a01      	subs	r2, #1
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	4311      	orrs	r1, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017ac:	0212      	lsls	r2, r2, #8
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017b4:	0852      	lsrs	r2, r2, #1
 80017b6:	3a01      	subs	r2, #1
 80017b8:	0552      	lsls	r2, r2, #21
 80017ba:	4311      	orrs	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017c0:	0852      	lsrs	r2, r2, #1
 80017c2:	3a01      	subs	r2, #1
 80017c4:	0652      	lsls	r2, r2, #25
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017cc:	0912      	lsrs	r2, r2, #4
 80017ce:	0452      	lsls	r2, r2, #17
 80017d0:	430a      	orrs	r2, r1
 80017d2:	4930      	ldr	r1, [pc, #192]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f0:	f7ff f960 	bl	8000ab4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f95c 	bl	8000ab4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e058      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001816:	e050      	b.n	80018ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e04f      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d148      	bne.n	80018ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a16      	ldr	r2, [pc, #88]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001840:	f7ff f938 	bl	8000ab4 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f934 	bl	8000ab4 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e030      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x734>
 8001866:	e028      	b.n	80018ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_RCC_OscConfig+0x780>)
 8001874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f91b 	bl	8000ab4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e00c      	b.n	800189c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff f917 	bl	8000ab4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d905      	bls.n	800189c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e013      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
 8001894:	40021000 	.word	0x40021000
 8001898:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_RCC_OscConfig+0x7b0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ec      	bne.n	8001882 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_OscConfig+0x7b0>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4905      	ldr	r1, [pc, #20]	@ (80018c4 <HAL_RCC_OscConfig+0x7b0>)
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_RCC_OscConfig+0x7b4>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
 80018b4:	e001      	b.n	80018ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	feeefffc 	.word	0xfeeefffc

080018cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0e7      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b72      	ldr	r3, [pc, #456]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4970      	ldr	r1, [pc, #448]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0cf      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b66      	ldr	r3, [pc, #408]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001928:	429a      	cmp	r2, r3
 800192a:	d908      	bls.n	800193e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b63      	ldr	r3, [pc, #396]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4960      	ldr	r1, [pc, #384]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d04c      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	4b5a      	ldr	r3, [pc, #360]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d121      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0a6      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	4b54      	ldr	r3, [pc, #336]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e09a      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001982:	4b4e      	ldr	r3, [pc, #312]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e08e      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e086      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b46      	ldr	r3, [pc, #280]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4943      	ldr	r1, [pc, #268]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b4:	f7ff f87e 	bl	8000ab4 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f87a 	bl	8000ab4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e06e      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b3a      	ldr	r3, [pc, #232]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d010      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d208      	bcs.n	8001a12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	492b      	ldr	r1, [pc, #172]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d210      	bcs.n	8001a42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a20:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 0207 	bic.w	r2, r3, #7
 8001a28:	4923      	ldr	r1, [pc, #140]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e036      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4918      	ldr	r1, [pc, #96]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4910      	ldr	r1, [pc, #64]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a80:	f000 f824 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	490b      	ldr	r1, [pc, #44]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1fc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe ffb5 	bl	8000a14 <HAL_InitTick>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aae:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08004674 	.word	0x08004674
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	@ 0x24
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ada:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x34>
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d121      	bne.n	8001b3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d11e      	bne.n	8001b3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b00:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b0c:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e005      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b28:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10d      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d102      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	e004      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b50:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d134      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d003      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0xac>
 8001b70:	e005      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b74:	617b      	str	r3, [r7, #20]
      break;
 8001b76:	e005      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b7a:	617b      	str	r3, [r7, #20]
      break;
 8001b7c:	e002      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	617b      	str	r3, [r7, #20]
      break;
 8001b82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	3301      	adds	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	0e5b      	lsrs	r3, r3, #25
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	0800468c 	.word	0x0800468c
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4904      	ldr	r1, [pc, #16]	@ (8001c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08004684 	.word	0x08004684

08001c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c2c:	f7ff ffda 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	0adb      	lsrs	r3, r3, #11
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	4904      	ldr	r1, [pc, #16]	@ (8001c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08004684 	.word	0x08004684

08001c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c6c:	f7ff f9ee 	bl	800104c <HAL_PWREx_GetVoltageRange>
 8001c70:	6178      	str	r0, [r7, #20]
 8001c72:	e014      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	4a24      	ldr	r2, [pc, #144]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff f9de 	bl	800104c <HAL_PWREx_GetVoltageRange>
 8001c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a1d      	ldr	r2, [pc, #116]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca4:	d10b      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	@ 0x80
 8001caa:	d919      	bls.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cb0:	d902      	bls.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e013      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e010      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b80      	cmp	r3, #128	@ 0x80
 8001cc2:	d902      	bls.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e00a      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	@ 0x80
 8001cce:	d102      	bne.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e004      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b70      	cmp	r3, #112	@ 0x70
 8001cda:	d101      	bne.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 0207 	bic.w	r2, r3, #7
 8001ce8:	4909      	ldr	r1, [pc, #36]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d20:	2300      	movs	r3, #0
 8001d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d041      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d38:	d02a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d3e:	d824      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d44:	d008      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d4a:	d81e      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d54:	d010      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d56:	e018      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d58:	4b86      	ldr	r3, [pc, #536]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a85      	ldr	r2, [pc, #532]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d64:	e015      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fabb 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d76:	e00c      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fba6 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d88:	e003      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8e:	e000      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d98:	4b76      	ldr	r3, [pc, #472]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001da6:	4973      	ldr	r1, [pc, #460]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dae:	e001      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d041      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dc8:	d02a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dce:	d824      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dd4:	d008      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dda:	d81e      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d010      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001de6:	e018      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de8:	4b62      	ldr	r3, [pc, #392]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a61      	ldr	r2, [pc, #388]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001df4:	e015      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fa73 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8001e02:	4603      	mov	r3, r0
 8001e04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e06:	e00c      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fb5e 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e18:	e003      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e28:	4b52      	ldr	r3, [pc, #328]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e36:	494f      	ldr	r1, [pc, #316]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e3e:	e001      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a0 	beq.w	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e56:	4b47      	ldr	r3, [pc, #284]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b41      	ldr	r3, [pc, #260]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	4a40      	ldr	r2, [pc, #256]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e78:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e88:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fe0e 	bl	8000ab4 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e9a:	e009      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7fe fe0a 	bl	8000ab4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d902      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	74fb      	strb	r3, [r7, #19]
        break;
 8001eae:	e005      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d15c      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ecc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01f      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d019      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	4a20      	ldr	r2, [pc, #128]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fdc9 	bl	8000ab4 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	e00b      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fdc5 	bl	8000ab4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d902      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f3c:	e006      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ec      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f62:	4904      	ldr	r1, [pc, #16]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b9e      	ldr	r3, [pc, #632]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	4a9d      	ldr	r2, [pc, #628]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4b98      	ldr	r3, [pc, #608]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	4994      	ldr	r1, [pc, #592]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	f023 020c 	bic.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fce:	498c      	ldr	r1, [pc, #560]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe2:	4b87      	ldr	r3, [pc, #540]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	4983      	ldr	r1, [pc, #524]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002004:	4b7e      	ldr	r3, [pc, #504]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	497b      	ldr	r1, [pc, #492]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002026:	4b76      	ldr	r3, [pc, #472]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002034:	4972      	ldr	r1, [pc, #456]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002048:	4b6d      	ldr	r3, [pc, #436]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	496a      	ldr	r1, [pc, #424]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002070:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	4961      	ldr	r1, [pc, #388]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800208c:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	4959      	ldr	r1, [pc, #356]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ae:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020bc:	4950      	ldr	r1, [pc, #320]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	4948      	ldr	r1, [pc, #288]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f2:	4b43      	ldr	r3, [pc, #268]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	493f      	ldr	r1, [pc, #252]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d028      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002114:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002122:	4937      	ldr	r1, [pc, #220]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002132:	d106      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002134:	4b32      	ldr	r3, [pc, #200]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a31      	ldr	r2, [pc, #196]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800213e:	60d3      	str	r3, [r2, #12]
 8002140:	e011      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800214a:	d10c      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8c8 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d028      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002172:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002178:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	491f      	ldr	r1, [pc, #124]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002190:	d106      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800219c:	60d3      	str	r3, [r2, #12]
 800219e:	e011      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f899 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02b      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021de:	4908      	ldr	r1, [pc, #32]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ee:	d109      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a02      	ldr	r2, [pc, #8]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e014      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f867 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02f      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002242:	4928      	ldr	r1, [pc, #160]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800224e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002252:	d10d      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f844 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d014      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	74bb      	strb	r3, [r7, #18]
 800226e:	e011      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002278:	d10c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3320      	adds	r3, #32
 800227e:	2102      	movs	r1, #2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f925 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022a0:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ae:	490d      	ldr	r1, [pc, #52]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022d2:	4904      	ldr	r1, [pc, #16]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022da:	7cbb      	ldrb	r3, [r7, #18]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022f6:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d018      	beq.n	8002334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002302:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d10d      	bne.n	800232e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
       ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800231a:	4b6c      	ldr	r3, [pc, #432]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
       ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d047      	beq.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e044      	b.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d018      	beq.n	800236e <RCCEx_PLLSAI1_Config+0x86>
 800233c:	2b03      	cmp	r3, #3
 800233e:	d825      	bhi.n	800238c <RCCEx_PLLSAI1_Config+0xa4>
 8002340:	2b01      	cmp	r3, #1
 8002342:	d002      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x62>
 8002344:	2b02      	cmp	r3, #2
 8002346:	d009      	beq.n	800235c <RCCEx_PLLSAI1_Config+0x74>
 8002348:	e020      	b.n	800238c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800234a:	4b60      	ldr	r3, [pc, #384]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11d      	bne.n	8002392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e01a      	b.n	8002392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800235c:	4b5b      	ldr	r3, [pc, #364]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236c:	e013      	b.n	8002396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800236e:	4b57      	ldr	r3, [pc, #348]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800237a:	4b54      	ldr	r3, [pc, #336]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800238a:	e006      	b.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e004      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800239a:	bf00      	nop
    }

    if(status == HAL_OK)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023a2:	4b4a      	ldr	r3, [pc, #296]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	430b      	orrs	r3, r1
 80023b8:	4944      	ldr	r1, [pc, #272]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d17d      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023c4:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a40      	ldr	r2, [pc, #256]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe fb70 	bl	8000ab4 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d6:	e009      	b.n	80023ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d8:	f7fe fb6c 	bl	8000ab4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	73fb      	strb	r3, [r7, #15]
        break;
 80023ea:	e005      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ec:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ef      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d160      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002404:	4b31      	ldr	r3, [pc, #196]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6892      	ldr	r2, [r2, #8]
 8002414:	0211      	lsls	r1, r2, #8
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	0912      	lsrs	r2, r2, #4
 800241c:	0452      	lsls	r2, r2, #17
 800241e:	430a      	orrs	r2, r1
 8002420:	492a      	ldr	r1, [pc, #168]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
 8002426:	e027      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d112      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002436:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	0211      	lsls	r1, r2, #8
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6912      	ldr	r2, [r2, #16]
 8002444:	0852      	lsrs	r2, r2, #1
 8002446:	3a01      	subs	r2, #1
 8002448:	0552      	lsls	r2, r2, #21
 800244a:	430a      	orrs	r2, r1
 800244c:	491f      	ldr	r1, [pc, #124]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	610b      	str	r3, [r1, #16]
 8002452:	e011      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800245c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6892      	ldr	r2, [r2, #8]
 8002464:	0211      	lsls	r1, r2, #8
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6952      	ldr	r2, [r2, #20]
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0652      	lsls	r2, r2, #25
 8002470:	430a      	orrs	r2, r1
 8002472:	4916      	ldr	r1, [pc, #88]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fb16 	bl	8000ab4 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800248a:	e009      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800248c:	f7fe fb12 	bl	8000ab4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d902      	bls.n	80024a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	73fb      	strb	r3, [r7, #15]
          break;
 800249e:	e005      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4904      	ldr	r1, [pc, #16]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024ea:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
       ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002502:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
       ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d047      	beq.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e044      	b.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d018      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0x86>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d825      	bhi.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d002      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0x62>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d009      	beq.n	8002544 <RCCEx_PLLSAI2_Config+0x74>
 8002530:	e020      	b.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002532:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11d      	bne.n	800257a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002542:	e01a      	b.n	800257a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002544:	4b50      	ldr	r3, [pc, #320]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d116      	bne.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e013      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002556:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002562:	4b49      	ldr	r3, [pc, #292]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002572:	e006      	b.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e004      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800257a:	bf00      	nop
 800257c:	e002      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002582:	bf00      	nop
    }

    if(status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800258a:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	430b      	orrs	r3, r1
 80025a0:	4939      	ldr	r1, [pc, #228]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d167      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025ac:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a35      	ldr	r2, [pc, #212]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fa7c 	bl	8000ab4 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025be:	e009      	b.n	80025d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025c0:	f7fe fa78 	bl	8000ab4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	73fb      	strb	r3, [r7, #15]
        break;
 80025d2:	e005      	b.n	80025e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ef      	bne.n	80025c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d14a      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025ec:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	0912      	lsrs	r2, r2, #4
 8002604:	0452      	lsls	r2, r2, #17
 8002606:	430a      	orrs	r2, r1
 8002608:	491f      	ldr	r1, [pc, #124]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	614b      	str	r3, [r1, #20]
 800260e:	e011      	b.n	8002634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6912      	ldr	r2, [r2, #16]
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	430a      	orrs	r2, r1
 800262e:	4916      	ldr	r1, [pc, #88]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	4313      	orrs	r3, r2
 8002632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fa38 	bl	8000ab4 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002648:	f7fe fa34 	bl	8000ab4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
          break;
 800265a:	e005      	b.n	8002668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4904      	ldr	r1, [pc, #16]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e040      	b.n	8002720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe f8d0 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	@ 0x24
 80026b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fae0 	bl	8002c98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f825 	bl	8002728 <UART_SetConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e01b      	b.n	8002720 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fb5f 	bl	8002ddc <UART_CheckIdleState>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b08a      	sub	sp, #40	@ 0x28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4313      	orrs	r3, r2
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4ba4      	ldr	r3, [pc, #656]	@ (80029e8 <UART_SetConfig+0x2c0>)
 8002758:	4013      	ands	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002760:	430b      	orrs	r3, r1
 8002762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a99      	ldr	r2, [pc, #612]	@ (80029ec <UART_SetConfig+0x2c4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002790:	4313      	orrs	r3, r2
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a90      	ldr	r2, [pc, #576]	@ (80029f0 <UART_SetConfig+0x2c8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d126      	bne.n	8002800 <UART_SetConfig+0xd8>
 80027b2:	4b90      	ldr	r3, [pc, #576]	@ (80029f4 <UART_SetConfig+0x2cc>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d81b      	bhi.n	80027f8 <UART_SetConfig+0xd0>
 80027c0:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <UART_SetConfig+0xa0>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	080027e9 	.word	0x080027e9
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027f1 	.word	0x080027f1
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027de:	e116      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80027e0:	2302      	movs	r3, #2
 80027e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027e6:	e112      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80027e8:	2304      	movs	r3, #4
 80027ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ee:	e10e      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80027f0:	2308      	movs	r3, #8
 80027f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027f6:	e10a      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80027f8:	2310      	movs	r3, #16
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027fe:	e106      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a7c      	ldr	r2, [pc, #496]	@ (80029f8 <UART_SetConfig+0x2d0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d138      	bne.n	800287c <UART_SetConfig+0x154>
 800280a:	4b7a      	ldr	r3, [pc, #488]	@ (80029f4 <UART_SetConfig+0x2cc>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d82d      	bhi.n	8002874 <UART_SetConfig+0x14c>
 8002818:	a201      	add	r2, pc, #4	@ (adr r2, 8002820 <UART_SetConfig+0xf8>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002855 	.word	0x08002855
 8002824:	08002875 	.word	0x08002875
 8002828:	08002875 	.word	0x08002875
 800282c:	08002875 	.word	0x08002875
 8002830:	08002865 	.word	0x08002865
 8002834:	08002875 	.word	0x08002875
 8002838:	08002875 	.word	0x08002875
 800283c:	08002875 	.word	0x08002875
 8002840:	0800285d 	.word	0x0800285d
 8002844:	08002875 	.word	0x08002875
 8002848:	08002875 	.word	0x08002875
 800284c:	08002875 	.word	0x08002875
 8002850:	0800286d 	.word	0x0800286d
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800285a:	e0d8      	b.n	8002a0e <UART_SetConfig+0x2e6>
 800285c:	2302      	movs	r3, #2
 800285e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002862:	e0d4      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002864:	2304      	movs	r3, #4
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800286a:	e0d0      	b.n	8002a0e <UART_SetConfig+0x2e6>
 800286c:	2308      	movs	r3, #8
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002872:	e0cc      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002874:	2310      	movs	r3, #16
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800287a:	e0c8      	b.n	8002a0e <UART_SetConfig+0x2e6>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5e      	ldr	r2, [pc, #376]	@ (80029fc <UART_SetConfig+0x2d4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d125      	bne.n	80028d2 <UART_SetConfig+0x1aa>
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <UART_SetConfig+0x2cc>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002890:	2b30      	cmp	r3, #48	@ 0x30
 8002892:	d016      	beq.n	80028c2 <UART_SetConfig+0x19a>
 8002894:	2b30      	cmp	r3, #48	@ 0x30
 8002896:	d818      	bhi.n	80028ca <UART_SetConfig+0x1a2>
 8002898:	2b20      	cmp	r3, #32
 800289a:	d00a      	beq.n	80028b2 <UART_SetConfig+0x18a>
 800289c:	2b20      	cmp	r3, #32
 800289e:	d814      	bhi.n	80028ca <UART_SetConfig+0x1a2>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <UART_SetConfig+0x182>
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d008      	beq.n	80028ba <UART_SetConfig+0x192>
 80028a8:	e00f      	b.n	80028ca <UART_SetConfig+0x1a2>
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028b0:	e0ad      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028b8:	e0a9      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80028ba:	2304      	movs	r3, #4
 80028bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028c0:	e0a5      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80028c2:	2308      	movs	r3, #8
 80028c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028c8:	e0a1      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80028ca:	2310      	movs	r3, #16
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028d0:	e09d      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002a00 <UART_SetConfig+0x2d8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d125      	bne.n	8002928 <UART_SetConfig+0x200>
 80028dc:	4b45      	ldr	r3, [pc, #276]	@ (80029f4 <UART_SetConfig+0x2cc>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80028e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80028e8:	d016      	beq.n	8002918 <UART_SetConfig+0x1f0>
 80028ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80028ec:	d818      	bhi.n	8002920 <UART_SetConfig+0x1f8>
 80028ee:	2b80      	cmp	r3, #128	@ 0x80
 80028f0:	d00a      	beq.n	8002908 <UART_SetConfig+0x1e0>
 80028f2:	2b80      	cmp	r3, #128	@ 0x80
 80028f4:	d814      	bhi.n	8002920 <UART_SetConfig+0x1f8>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <UART_SetConfig+0x1d8>
 80028fa:	2b40      	cmp	r3, #64	@ 0x40
 80028fc:	d008      	beq.n	8002910 <UART_SetConfig+0x1e8>
 80028fe:	e00f      	b.n	8002920 <UART_SetConfig+0x1f8>
 8002900:	2300      	movs	r3, #0
 8002902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002906:	e082      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002908:	2302      	movs	r3, #2
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290e:	e07e      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002910:	2304      	movs	r3, #4
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002916:	e07a      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002918:	2308      	movs	r3, #8
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291e:	e076      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002920:	2310      	movs	r3, #16
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002926:	e072      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a35      	ldr	r2, [pc, #212]	@ (8002a04 <UART_SetConfig+0x2dc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d12a      	bne.n	8002988 <UART_SetConfig+0x260>
 8002932:	4b30      	ldr	r3, [pc, #192]	@ (80029f4 <UART_SetConfig+0x2cc>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002940:	d01a      	beq.n	8002978 <UART_SetConfig+0x250>
 8002942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002946:	d81b      	bhi.n	8002980 <UART_SetConfig+0x258>
 8002948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800294c:	d00c      	beq.n	8002968 <UART_SetConfig+0x240>
 800294e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002952:	d815      	bhi.n	8002980 <UART_SetConfig+0x258>
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <UART_SetConfig+0x238>
 8002958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800295c:	d008      	beq.n	8002970 <UART_SetConfig+0x248>
 800295e:	e00f      	b.n	8002980 <UART_SetConfig+0x258>
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002966:	e052      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002968:	2302      	movs	r3, #2
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296e:	e04e      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002970:	2304      	movs	r3, #4
 8002972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002976:	e04a      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002978:	2308      	movs	r3, #8
 800297a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297e:	e046      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002980:	2310      	movs	r3, #16
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e042      	b.n	8002a0e <UART_SetConfig+0x2e6>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a17      	ldr	r2, [pc, #92]	@ (80029ec <UART_SetConfig+0x2c4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d13a      	bne.n	8002a08 <UART_SetConfig+0x2e0>
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <UART_SetConfig+0x2cc>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800299c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029a0:	d01a      	beq.n	80029d8 <UART_SetConfig+0x2b0>
 80029a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029a6:	d81b      	bhi.n	80029e0 <UART_SetConfig+0x2b8>
 80029a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ac:	d00c      	beq.n	80029c8 <UART_SetConfig+0x2a0>
 80029ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029b2:	d815      	bhi.n	80029e0 <UART_SetConfig+0x2b8>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <UART_SetConfig+0x298>
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029bc:	d008      	beq.n	80029d0 <UART_SetConfig+0x2a8>
 80029be:	e00f      	b.n	80029e0 <UART_SetConfig+0x2b8>
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029c6:	e022      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ce:	e01e      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80029d0:	2304      	movs	r3, #4
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d6:	e01a      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80029d8:	2308      	movs	r3, #8
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029de:	e016      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80029e0:	2310      	movs	r3, #16
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e6:	e012      	b.n	8002a0e <UART_SetConfig+0x2e6>
 80029e8:	efff69f3 	.word	0xefff69f3
 80029ec:	40008000 	.word	0x40008000
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40004400 	.word	0x40004400
 80029fc:	40004800 	.word	0x40004800
 8002a00:	40004c00 	.word	0x40004c00
 8002a04:	40005000 	.word	0x40005000
 8002a08:	2310      	movs	r3, #16
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a9f      	ldr	r2, [pc, #636]	@ (8002c90 <UART_SetConfig+0x568>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d17a      	bne.n	8002b0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d824      	bhi.n	8002a6a <UART_SetConfig+0x342>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <UART_SetConfig+0x300>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002a6b 	.word	0x08002a6b
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a6b 	.word	0x08002a6b
 8002a38:	08002a5b 	.word	0x08002a5b
 8002a3c:	08002a6b 	.word	0x08002a6b
 8002a40:	08002a6b 	.word	0x08002a6b
 8002a44:	08002a6b 	.word	0x08002a6b
 8002a48:	08002a63 	.word	0x08002a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7ff f8d6 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002a50:	61f8      	str	r0, [r7, #28]
        break;
 8002a52:	e010      	b.n	8002a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a54:	4b8f      	ldr	r3, [pc, #572]	@ (8002c94 <UART_SetConfig+0x56c>)
 8002a56:	61fb      	str	r3, [r7, #28]
        break;
 8002a58:	e00d      	b.n	8002a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5a:	f7ff f837 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8002a5e:	61f8      	str	r0, [r7, #28]
        break;
 8002a60:	e009      	b.n	8002a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a66:	61fb      	str	r3, [r7, #28]
        break;
 8002a68:	e005      	b.n	8002a76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80fb 	beq.w	8002c74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d305      	bcc.n	8002a9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d903      	bls.n	8002aa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002aa0:	e0e8      	b.n	8002c74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	4615      	mov	r5, r2
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	022b      	lsls	r3, r5, #8
 8002ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ab8:	0222      	lsls	r2, r4, #8
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	6849      	ldr	r1, [r1, #4]
 8002abe:	0849      	lsrs	r1, r1, #1
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	4688      	mov	r8, r1
 8002ac4:	4681      	mov	r9, r0
 8002ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8002aca:	eb43 0b09 	adc.w	fp, r3, r9
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002adc:	4650      	mov	r0, sl
 8002ade:	4659      	mov	r1, fp
 8002ae0:	f7fd fb76 	bl	80001d0 <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002af2:	d308      	bcc.n	8002b06 <UART_SetConfig+0x3de>
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002afa:	d204      	bcs.n	8002b06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	e0b6      	b.n	8002c74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b0c:	e0b2      	b.n	8002c74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b16:	d15e      	bne.n	8002bd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d828      	bhi.n	8002b72 <UART_SetConfig+0x44a>
 8002b20:	a201      	add	r2, pc, #4	@ (adr r2, 8002b28 <UART_SetConfig+0x400>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b4d 	.word	0x08002b4d
 8002b2c:	08002b55 	.word	0x08002b55
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b73 	.word	0x08002b73
 8002b38:	08002b63 	.word	0x08002b63
 8002b3c:	08002b73 	.word	0x08002b73
 8002b40:	08002b73 	.word	0x08002b73
 8002b44:	08002b73 	.word	0x08002b73
 8002b48:	08002b6b 	.word	0x08002b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f7ff f856 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002b50:	61f8      	str	r0, [r7, #28]
        break;
 8002b52:	e014      	b.n	8002b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b54:	f7ff f868 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 8002b58:	61f8      	str	r0, [r7, #28]
        break;
 8002b5a:	e010      	b.n	8002b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c94 <UART_SetConfig+0x56c>)
 8002b5e:	61fb      	str	r3, [r7, #28]
        break;
 8002b60:	e00d      	b.n	8002b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7fe ffb3 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8002b66:	61f8      	str	r0, [r7, #28]
        break;
 8002b68:	e009      	b.n	8002b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b6e:	61fb      	str	r3, [r7, #28]
        break;
 8002b70:	e005      	b.n	8002b7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d077      	beq.n	8002c74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005a      	lsls	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	441a      	add	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d916      	bls.n	8002bce <UART_SetConfig+0x4a6>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba6:	d212      	bcs.n	8002bce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f023 030f 	bic.w	r3, r3, #15
 8002bb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	8afb      	ldrh	r3, [r7, #22]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	8afa      	ldrh	r2, [r7, #22]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e052      	b.n	8002c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bd4:	e04e      	b.n	8002c74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d827      	bhi.n	8002c2e <UART_SetConfig+0x506>
 8002bde:	a201      	add	r2, pc, #4	@ (adr r2, 8002be4 <UART_SetConfig+0x4bc>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002c09 	.word	0x08002c09
 8002be8:	08002c11 	.word	0x08002c11
 8002bec:	08002c19 	.word	0x08002c19
 8002bf0:	08002c2f 	.word	0x08002c2f
 8002bf4:	08002c1f 	.word	0x08002c1f
 8002bf8:	08002c2f 	.word	0x08002c2f
 8002bfc:	08002c2f 	.word	0x08002c2f
 8002c00:	08002c2f 	.word	0x08002c2f
 8002c04:	08002c27 	.word	0x08002c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c08:	f7fe fff8 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002c0c:	61f8      	str	r0, [r7, #28]
        break;
 8002c0e:	e014      	b.n	8002c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c10:	f7ff f80a 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 8002c14:	61f8      	str	r0, [r7, #28]
        break;
 8002c16:	e010      	b.n	8002c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <UART_SetConfig+0x56c>)
 8002c1a:	61fb      	str	r3, [r7, #28]
        break;
 8002c1c:	e00d      	b.n	8002c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1e:	f7fe ff55 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8002c22:	61f8      	str	r0, [r7, #28]
        break;
 8002c24:	e009      	b.n	8002c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c2a:	61fb      	str	r3, [r7, #28]
        break;
 8002c2c:	e005      	b.n	8002c3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c38:	bf00      	nop
    }

    if (pclk != 0U)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d019      	beq.n	8002c74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	085a      	lsrs	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	441a      	add	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	d909      	bls.n	8002c6e <UART_SetConfig+0x546>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d205      	bcs.n	8002c6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e002      	b.n	8002c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3728      	adds	r7, #40	@ 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	40008000 	.word	0x40008000
 8002c94:	00f42400 	.word	0x00f42400

08002c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01a      	beq.n	8002dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d96:	d10a      	bne.n	8002dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b098      	sub	sp, #96	@ 0x60
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dec:	f7fd fe62 	bl	8000ab4 <HAL_GetTick>
 8002df0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d12e      	bne.n	8002e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f88c 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d021      	beq.n	8002e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e6      	bne.n	8002e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e062      	b.n	8002f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d149      	bne.n	8002f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	2200      	movs	r2, #0
 8002e76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f856 	bl	8002f2c <UART_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d03c      	beq.n	8002f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	623b      	str	r3, [r7, #32]
   return(result);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e6      	bne.n	8002e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed8:	61fa      	str	r2, [r7, #28]
 8002eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	69b9      	ldr	r1, [r7, #24]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e011      	b.n	8002f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3758      	adds	r7, #88	@ 0x58
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3c:	e04f      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d04b      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fd fdb5 	bl	8000ab4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e04e      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d037      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b80      	cmp	r3, #128	@ 0x80
 8002f72:	d034      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d031      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d110      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f838 	bl	8003006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2208      	movs	r2, #8
 8002f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e029      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb8:	d111      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f81e 	bl	8003006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0a0      	beq.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003006:	b480      	push	{r7}
 8003008:	b095      	sub	sp, #84	@ 0x54
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
 800302e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e6      	bne.n	800300e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3308      	adds	r3, #8
 800305e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003078:	2b01      	cmp	r3, #1
 800307a:	d118      	bne.n	80030ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	60bb      	str	r3, [r7, #8]
   return(result);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f023 0310 	bic.w	r3, r3, #16
 8003090:	647b      	str	r3, [r7, #68]	@ 0x44
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	613b      	str	r3, [r7, #16]
   return(result);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e6      	bne.n	800307c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030c2:	bf00      	nop
 80030c4:	3754      	adds	r7, #84	@ 0x54
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e0:	2b84      	cmp	r3, #132	@ 0x84
 80030e2:	d005      	beq.n	80030f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	3303      	adds	r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030f0:	68fb      	ldr	r3, [r7, #12]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003102:	f000 fae5 	bl	80036d0 <vTaskStartScheduler>
  
  return osOK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}

0800310c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af04      	add	r7, sp, #16
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d020      	beq.n	8003160 <osThreadCreate+0x54>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01c      	beq.n	8003160 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685c      	ldr	r4, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691e      	ldr	r6, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ffc8 	bl	80030ce <makeFreeRtosPriority>
 800313e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003148:	9202      	str	r2, [sp, #8]
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	9100      	str	r1, [sp, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	4632      	mov	r2, r6
 8003152:	4629      	mov	r1, r5
 8003154:	4620      	mov	r0, r4
 8003156:	f000 f8ed 	bl	8003334 <xTaskCreateStatic>
 800315a:	4603      	mov	r3, r0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e01c      	b.n	800319a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685c      	ldr	r4, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800316c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ffaa 	bl	80030ce <makeFreeRtosPriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	9200      	str	r2, [sp, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4632      	mov	r2, r6
 8003188:	4629      	mov	r1, r5
 800318a:	4620      	mov	r0, r4
 800318c:	f000 f932 	bl	80033f4 <xTaskCreate>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <osDelay+0x16>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	e000      	b.n	80031bc <osDelay+0x18>
 80031ba:	2301      	movs	r3, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa51 	bl	8003664 <vTaskDelay>
  
  return osOK;
 80031c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f103 0208 	add.w	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f103 0208 	add.w	r2, r3, #8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f103 0208 	add.w	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d103      	bne.n	800328e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e00c      	b.n	80032a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3308      	adds	r3, #8
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e002      	b.n	800329c <vListInsert+0x2e>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d2f6      	bcs.n	8003296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	d103      	bne.n	8003314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08e      	sub	sp, #56	@ 0x38
 8003338:	af04      	add	r7, sp, #16
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800335a:	bf00      	nop
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	61fb      	str	r3, [r7, #28]
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	e7fd      	b.n	800337a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800337e:	2354      	movs	r3, #84	@ 0x54
 8003380:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b54      	cmp	r3, #84	@ 0x54
 8003386:	d00b      	beq.n	80033a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	61bb      	str	r3, [r7, #24]
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01e      	beq.n	80033e6 <xTaskCreateStatic+0xb2>
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01b      	beq.n	80033e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033c0:	2300      	movs	r3, #0
 80033c2:	9303      	str	r3, [sp, #12]
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	9302      	str	r3, [sp, #8]
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f850 	bl	800347e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033e0:	f000 f8d6 	bl	8003590 <prvAddNewTaskToReadyList>
 80033e4:	e001      	b.n	80033ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033ea:	697b      	ldr	r3, [r7, #20]
	}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3728      	adds	r7, #40	@ 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	@ 0x30
 80033f8:	af04      	add	r7, sp, #16
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 feed 	bl	80041e8 <pvPortMalloc>
 800340e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003416:	2054      	movs	r0, #84	@ 0x54
 8003418:	f000 fee6 	bl	80041e8 <pvPortMalloc>
 800341c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
 800342a:	e005      	b.n	8003438 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f000 ffa9 	bl	8004384 <vPortFree>
 8003432:	e001      	b.n	8003438 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	2300      	movs	r3, #0
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	9302      	str	r3, [sp, #8]
 8003450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f80e 	bl	800347e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003462:	69f8      	ldr	r0, [r7, #28]
 8003464:	f000 f894 	bl	8003590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e002      	b.n	8003474 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003474:	69bb      	ldr	r3, [r7, #24]
	}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003496:	3b01      	subs	r3, #1
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f023 0307 	bic.w	r3, r3, #7
 80034a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	617b      	str	r3, [r7, #20]
}
 80034c2:	bf00      	nop
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01f      	beq.n	800350e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e012      	b.n	80034fa <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	7819      	ldrb	r1, [r3, #0]
 80034dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	3334      	adds	r3, #52	@ 0x34
 80034e4:	460a      	mov	r2, r1
 80034e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b0f      	cmp	r3, #15
 80034fe:	d9e9      	bls.n	80034d4 <prvInitialiseNewTask+0x56>
 8003500:	e000      	b.n	8003504 <prvInitialiseNewTask+0x86>
			{
				break;
 8003502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800350c:	e003      	b.n	8003516 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	2b06      	cmp	r3, #6
 800351a:	d901      	bls.n	8003520 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800351c:	2306      	movs	r3, #6
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003524:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800352a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fe68 	bl	800320c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	3318      	adds	r3, #24
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe63 	bl	800320c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800354c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354e:	f1c3 0207 	rsb	r2, r3, #7
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	2200      	movs	r2, #0
 8003560:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	69b8      	ldr	r0, [r7, #24]
 8003570:	f000 fc2c 	bl	8003dcc <pxPortInitialiseStack>
 8003574:	4602      	mov	r2, r0
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003586:	bf00      	nop
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003598:	f000 fd46 	bl	8004028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800359c:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <prvAddNewTaskToReadyList+0xb8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a29      	ldr	r2, [pc, #164]	@ (8003648 <prvAddNewTaskToReadyList+0xb8>)
 80035a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035a6:	4b29      	ldr	r3, [pc, #164]	@ (800364c <prvAddNewTaskToReadyList+0xbc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035ae:	4a27      	ldr	r2, [pc, #156]	@ (800364c <prvAddNewTaskToReadyList+0xbc>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035b4:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <prvAddNewTaskToReadyList+0xb8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d110      	bne.n	80035de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035bc:	f000 fac4 	bl	8003b48 <prvInitialiseTaskLists>
 80035c0:	e00d      	b.n	80035de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035c2:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <prvAddNewTaskToReadyList+0xc0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <prvAddNewTaskToReadyList+0xbc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d802      	bhi.n	80035de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035d8:	4a1c      	ldr	r2, [pc, #112]	@ (800364c <prvAddNewTaskToReadyList+0xbc>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035de:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <prvAddNewTaskToReadyList+0xc4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3301      	adds	r3, #1
 80035e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <prvAddNewTaskToReadyList+0xc4>)
 80035e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <prvAddNewTaskToReadyList+0xc8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <prvAddNewTaskToReadyList+0xc8>)
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4a15      	ldr	r2, [pc, #84]	@ (800365c <prvAddNewTaskToReadyList+0xcc>)
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7ff fe08 	bl	8003226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003616:	f000 fd39 	bl	800408c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800361a:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <prvAddNewTaskToReadyList+0xc0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003622:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <prvAddNewTaskToReadyList+0xbc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d207      	bcs.n	8003640 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <prvAddNewTaskToReadyList+0xd0>)
 8003632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000414 	.word	0x20000414
 800364c:	20000314 	.word	0x20000314
 8003650:	20000420 	.word	0x20000420
 8003654:	20000430 	.word	0x20000430
 8003658:	2000041c 	.word	0x2000041c
 800365c:	20000318 	.word	0x20000318
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d018      	beq.n	80036a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003676:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <vTaskDelay+0x64>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <vTaskDelay+0x32>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	60bb      	str	r3, [r7, #8]
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003696:	f000 f87d 	bl	8003794 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800369a:	2100      	movs	r1, #0
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fb2f 	bl	8003d00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036a2:	f000 f885 	bl	80037b0 <xTaskResumeAll>
 80036a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036ae:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <vTaskDelay+0x68>)
 80036b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	2000043c 	.word	0x2000043c
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036de:	463a      	mov	r2, r7
 80036e0:	1d39      	adds	r1, r7, #4
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc ff08 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	9202      	str	r2, [sp, #8]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	460a      	mov	r2, r1
 80036fe:	491f      	ldr	r1, [pc, #124]	@ (800377c <vTaskStartScheduler+0xac>)
 8003700:	481f      	ldr	r0, [pc, #124]	@ (8003780 <vTaskStartScheduler+0xb0>)
 8003702:	f7ff fe17 	bl	8003334 <xTaskCreateStatic>
 8003706:	4603      	mov	r3, r0
 8003708:	4a1e      	ldr	r2, [pc, #120]	@ (8003784 <vTaskStartScheduler+0xb4>)
 800370a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800370c:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <vTaskStartScheduler+0xb4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e001      	b.n	800371e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d116      	bne.n	8003752 <vTaskStartScheduler+0x82>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	613b      	str	r3, [r7, #16]
}
 8003736:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003738:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <vTaskStartScheduler+0xb8>)
 800373a:	f04f 32ff 	mov.w	r2, #4294967295
 800373e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <vTaskStartScheduler+0xbc>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <vTaskStartScheduler+0xc0>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800374c:	f000 fbc8 	bl	8003ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003750:	e00f      	b.n	8003772 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d10b      	bne.n	8003772 <vTaskStartScheduler+0xa2>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60fb      	str	r3, [r7, #12]
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	e7fd      	b.n	800376e <vTaskStartScheduler+0x9e>
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	0800466c 	.word	0x0800466c
 8003780:	08003b19 	.word	0x08003b19
 8003784:	20000438 	.word	0x20000438
 8003788:	20000434 	.word	0x20000434
 800378c:	20000420 	.word	0x20000420
 8003790:	20000418 	.word	0x20000418

08003794 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <vTaskSuspendAll+0x18>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a03      	ldr	r2, [pc, #12]	@ (80037ac <vTaskSuspendAll+0x18>)
 80037a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	2000043c 	.word	0x2000043c

080037b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037be:	4b42      	ldr	r3, [pc, #264]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xTaskResumeAll+0x2e>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	603b      	str	r3, [r7, #0]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037de:	f000 fc23 	bl	8004028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037e2:	4b39      	ldr	r3, [pc, #228]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	4a37      	ldr	r2, [pc, #220]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ec:	4b36      	ldr	r3, [pc, #216]	@ (80038c8 <xTaskResumeAll+0x118>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d161      	bne.n	80038b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037f4:	4b35      	ldr	r3, [pc, #212]	@ (80038cc <xTaskResumeAll+0x11c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05d      	beq.n	80038b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037fc:	e02e      	b.n	800385c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fe:	4b34      	ldr	r3, [pc, #208]	@ (80038d0 <xTaskResumeAll+0x120>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3318      	adds	r3, #24
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fd68 	bl	80032e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fd63 	bl	80032e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	409a      	lsls	r2, r3
 8003822:	4b2c      	ldr	r3, [pc, #176]	@ (80038d4 <xTaskResumeAll+0x124>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <xTaskResumeAll+0x124>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4a27      	ldr	r2, [pc, #156]	@ (80038d8 <xTaskResumeAll+0x128>)
 800383a:	441a      	add	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7ff fcef 	bl	8003226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384c:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <xTaskResumeAll+0x12c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003856:	4b22      	ldr	r3, [pc, #136]	@ (80038e0 <xTaskResumeAll+0x130>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800385c:	4b1c      	ldr	r3, [pc, #112]	@ (80038d0 <xTaskResumeAll+0x120>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1cc      	bne.n	80037fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800386a:	f000 fa0b 	bl	8003c84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <xTaskResumeAll+0x134>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d010      	beq.n	800389c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800387a:	f000 f837 	bl	80038ec <xTaskIncrementTick>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003884:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <xTaskResumeAll+0x130>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3b01      	subs	r3, #1
 800388e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f1      	bne.n	800387a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <xTaskResumeAll+0x134>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <xTaskResumeAll+0x130>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038a8:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <xTaskResumeAll+0x138>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038b8:	f000 fbe8 	bl	800408c <vPortExitCritical>

	return xAlreadyYielded;
 80038bc:	68bb      	ldr	r3, [r7, #8]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	2000043c 	.word	0x2000043c
 80038cc:	20000414 	.word	0x20000414
 80038d0:	200003d4 	.word	0x200003d4
 80038d4:	2000041c 	.word	0x2000041c
 80038d8:	20000318 	.word	0x20000318
 80038dc:	20000314 	.word	0x20000314
 80038e0:	20000428 	.word	0x20000428
 80038e4:	20000424 	.word	0x20000424
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a34 <xTaskIncrementTick+0x148>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 808f 	bne.w	8003a1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003900:	4b4d      	ldr	r3, [pc, #308]	@ (8003a38 <xTaskIncrementTick+0x14c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003908:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <xTaskIncrementTick+0x14c>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d121      	bne.n	8003958 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003914:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <xTaskIncrementTick+0x4a>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	603b      	str	r3, [r7, #0]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xTaskIncrementTick+0x46>
 8003936:	4b41      	ldr	r3, [pc, #260]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	4b40      	ldr	r3, [pc, #256]	@ (8003a40 <xTaskIncrementTick+0x154>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3e      	ldr	r2, [pc, #248]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4a3e      	ldr	r2, [pc, #248]	@ (8003a40 <xTaskIncrementTick+0x154>)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a44 <xTaskIncrementTick+0x158>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a3c      	ldr	r2, [pc, #240]	@ (8003a44 <xTaskIncrementTick+0x158>)
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	f000 f996 	bl	8003c84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003958:	4b3b      	ldr	r3, [pc, #236]	@ (8003a48 <xTaskIncrementTick+0x15c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d348      	bcc.n	80039f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003962:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396c:	4b36      	ldr	r3, [pc, #216]	@ (8003a48 <xTaskIncrementTick+0x15c>)
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	601a      	str	r2, [r3, #0]
					break;
 8003974:	e03e      	b.n	80039f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d203      	bcs.n	8003996 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800398e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a48 <xTaskIncrementTick+0x15c>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003994:	e02e      	b.n	80039f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3304      	adds	r3, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fca0 	bl	80032e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	3318      	adds	r3, #24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fc97 	bl	80032e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <xTaskIncrementTick+0x160>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	4a22      	ldr	r2, [pc, #136]	@ (8003a4c <xTaskIncrementTick+0x160>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <xTaskIncrementTick+0x164>)
 80039d2:	441a      	add	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7ff fc23 	bl	8003226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <xTaskIncrementTick+0x168>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d3b9      	bcc.n	8003962 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f2:	e7b6      	b.n	8003962 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039f4:	4b17      	ldr	r3, [pc, #92]	@ (8003a54 <xTaskIncrementTick+0x168>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fa:	4915      	ldr	r1, [pc, #84]	@ (8003a50 <xTaskIncrementTick+0x164>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d901      	bls.n	8003a10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <xTaskIncrementTick+0x16c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e004      	b.n	8003a28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a5c <xTaskIncrementTick+0x170>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <xTaskIncrementTick+0x170>)
 8003a26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a28:	697b      	ldr	r3, [r7, #20]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000043c 	.word	0x2000043c
 8003a38:	20000418 	.word	0x20000418
 8003a3c:	200003cc 	.word	0x200003cc
 8003a40:	200003d0 	.word	0x200003d0
 8003a44:	2000042c 	.word	0x2000042c
 8003a48:	20000434 	.word	0x20000434
 8003a4c:	2000041c 	.word	0x2000041c
 8003a50:	20000318 	.word	0x20000318
 8003a54:	20000314 	.word	0x20000314
 8003a58:	20000428 	.word	0x20000428
 8003a5c:	20000424 	.word	0x20000424

08003a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a66:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <vTaskSwitchContext+0xa4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a6e:	4b26      	ldr	r3, [pc, #152]	@ (8003b08 <vTaskSwitchContext+0xa8>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a74:	e040      	b.n	8003af8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a76:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <vTaskSwitchContext+0xa8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <vTaskSwitchContext+0xac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	f1c3 031f 	rsb	r3, r3, #31
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	491f      	ldr	r1, [pc, #124]	@ (8003b10 <vTaskSwitchContext+0xb0>)
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <vTaskSwitchContext+0x5e>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	607b      	str	r3, [r7, #4]
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <vTaskSwitchContext+0x5a>
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <vTaskSwitchContext+0xb0>)
 8003aca:	4413      	add	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d104      	bne.n	8003aee <vTaskSwitchContext+0x8e>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a07      	ldr	r2, [pc, #28]	@ (8003b14 <vTaskSwitchContext+0xb4>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	2000043c 	.word	0x2000043c
 8003b08:	20000428 	.word	0x20000428
 8003b0c:	2000041c 	.word	0x2000041c
 8003b10:	20000318 	.word	0x20000318
 8003b14:	20000314 	.word	0x20000314

08003b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b20:	f000 f852 	bl	8003bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <prvIdleTask+0x28>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d9f9      	bls.n	8003b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <prvIdleTask+0x2c>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b3c:	e7f0      	b.n	8003b20 <prvIdleTask+0x8>
 8003b3e:	bf00      	nop
 8003b40:	20000318 	.word	0x20000318
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	e00c      	b.n	8003b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ba8 <prvInitialiseTaskLists+0x60>)
 8003b60:	4413      	add	r3, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fb32 	bl	80031cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d9ef      	bls.n	8003b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b74:	480d      	ldr	r0, [pc, #52]	@ (8003bac <prvInitialiseTaskLists+0x64>)
 8003b76:	f7ff fb29 	bl	80031cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b7a:	480d      	ldr	r0, [pc, #52]	@ (8003bb0 <prvInitialiseTaskLists+0x68>)
 8003b7c:	f7ff fb26 	bl	80031cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b80:	480c      	ldr	r0, [pc, #48]	@ (8003bb4 <prvInitialiseTaskLists+0x6c>)
 8003b82:	f7ff fb23 	bl	80031cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b86:	480c      	ldr	r0, [pc, #48]	@ (8003bb8 <prvInitialiseTaskLists+0x70>)
 8003b88:	f7ff fb20 	bl	80031cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b8c:	480b      	ldr	r0, [pc, #44]	@ (8003bbc <prvInitialiseTaskLists+0x74>)
 8003b8e:	f7ff fb1d 	bl	80031cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b92:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <prvInitialiseTaskLists+0x78>)
 8003b94:	4a05      	ldr	r2, [pc, #20]	@ (8003bac <prvInitialiseTaskLists+0x64>)
 8003b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <prvInitialiseTaskLists+0x7c>)
 8003b9a:	4a05      	ldr	r2, [pc, #20]	@ (8003bb0 <prvInitialiseTaskLists+0x68>)
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000318 	.word	0x20000318
 8003bac:	200003a4 	.word	0x200003a4
 8003bb0:	200003b8 	.word	0x200003b8
 8003bb4:	200003d4 	.word	0x200003d4
 8003bb8:	200003e8 	.word	0x200003e8
 8003bbc:	20000400 	.word	0x20000400
 8003bc0:	200003cc 	.word	0x200003cc
 8003bc4:	200003d0 	.word	0x200003d0

08003bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bce:	e019      	b.n	8003c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bd0:	f000 fa2a 	bl	8004028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd4:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <prvCheckTasksWaitingTermination+0x50>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fb7d 	bl	80032e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <prvCheckTasksWaitingTermination+0x54>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4a0b      	ldr	r2, [pc, #44]	@ (8003c1c <prvCheckTasksWaitingTermination+0x54>)
 8003bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <prvCheckTasksWaitingTermination+0x58>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c20 <prvCheckTasksWaitingTermination+0x58>)
 8003bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bfa:	f000 fa47 	bl	800408c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f810 	bl	8003c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <prvCheckTasksWaitingTermination+0x58>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e1      	bne.n	8003bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200003e8 	.word	0x200003e8
 8003c1c:	20000414 	.word	0x20000414
 8003c20:	200003fc 	.word	0x200003fc

08003c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fba2 	bl	8004384 <vPortFree>
				vPortFree( pxTCB );
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fb9f 	bl	8004384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c46:	e019      	b.n	8003c7c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d103      	bne.n	8003c5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fb96 	bl	8004384 <vPortFree>
	}
 8003c58:	e010      	b.n	8003c7c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d00b      	beq.n	8003c7c <prvDeleteTCB+0x58>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	60fb      	str	r3, [r7, #12]
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <prvDeleteTCB+0x54>
	}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <prvResetNextTaskUnblockTime+0x38>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c9c:	e008      	b.n	8003cb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9e:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <prvResetNextTaskUnblockTime+0x38>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	200003cc 	.word	0x200003cc
 8003cc0:	20000434 	.word	0x20000434

08003cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cca:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <xTaskGetSchedulerState+0x34>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	e008      	b.n	8003cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <xTaskGetSchedulerState+0x38>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	e001      	b.n	8003cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cea:	687b      	ldr	r3, [r7, #4]
	}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000420 	.word	0x20000420
 8003cfc:	2000043c 	.word	0x2000043c

08003d00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d0a:	4b29      	ldr	r3, [pc, #164]	@ (8003db0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d10:	4b28      	ldr	r3, [pc, #160]	@ (8003db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fae2 	bl	80032e0 <uxListRemove>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d22:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	2201      	movs	r2, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4013      	ands	r3, r2
 8003d36:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d10a      	bne.n	8003d58 <prvAddCurrentTaskToDelayedList+0x58>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d48:	4b1a      	ldr	r3, [pc, #104]	@ (8003db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	481a      	ldr	r0, [pc, #104]	@ (8003dbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d52:	f7ff fa68 	bl	8003226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d56:	e026      	b.n	8003da6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d60:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d209      	bcs.n	8003d84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b0f      	ldr	r3, [pc, #60]	@ (8003db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7ff fa76 	bl	800326e <vListInsert>
}
 8003d82:	e010      	b.n	8003da6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d84:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4610      	mov	r0, r2
 8003d92:	f7ff fa6c 	bl	800326e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d96:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d202      	bcs.n	8003da6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003da0:	4a09      	ldr	r2, [pc, #36]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6013      	str	r3, [r2, #0]
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000418 	.word	0x20000418
 8003db4:	20000314 	.word	0x20000314
 8003db8:	2000041c 	.word	0x2000041c
 8003dbc:	20000400 	.word	0x20000400
 8003dc0:	200003d0 	.word	0x200003d0
 8003dc4:	200003cc 	.word	0x200003cc
 8003dc8:	20000434 	.word	0x20000434

08003dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b04      	subs	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b04      	subs	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0201 	bic.w	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b04      	subs	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8003e30 <pxPortInitialiseStack+0x64>)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b14      	subs	r3, #20
 8003e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b04      	subs	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f06f 0202 	mvn.w	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b20      	subs	r3, #32
 8003e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	08003e35 	.word	0x08003e35

08003e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e3e:	4b13      	ldr	r3, [pc, #76]	@ (8003e8c <prvTaskExitError+0x58>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d00b      	beq.n	8003e60 <prvTaskExitError+0x2c>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <prvTaskExitError+0x28>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60bb      	str	r3, [r7, #8]
}
 8003e72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e74:	bf00      	nop
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0fc      	beq.n	8003e76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <pxCurrentTCBConst2>)
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	6808      	ldr	r0, [r1, #0]
 8003e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9a:	f380 8809 	msr	PSP, r0
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f380 8811 	msr	BASEPRI, r0
 8003eaa:	4770      	bx	lr
 8003eac:	f3af 8000 	nop.w

08003eb0 <pxCurrentTCBConst2>:
 8003eb0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop

08003eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003eb8:	4808      	ldr	r0, [pc, #32]	@ (8003edc <prvPortStartFirstTask+0x24>)
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	6800      	ldr	r0, [r0, #0]
 8003ebe:	f380 8808 	msr	MSP, r0
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f380 8814 	msr	CONTROL, r0
 8003eca:	b662      	cpsie	i
 8003ecc:	b661      	cpsie	f
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	df00      	svc	0
 8003ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eda:	bf00      	nop
 8003edc:	e000ed08 	.word	0xe000ed08

08003ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ee6:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <xPortStartScheduler+0x124>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a47      	ldr	r2, [pc, #284]	@ (8004008 <xPortStartScheduler+0x128>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10b      	bne.n	8003f08 <xPortStartScheduler+0x28>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	60fb      	str	r3, [r7, #12]
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f08:	4b3e      	ldr	r3, [pc, #248]	@ (8004004 <xPortStartScheduler+0x124>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800400c <xPortStartScheduler+0x12c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d10b      	bne.n	8003f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	613b      	str	r3, [r7, #16]
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	e7fd      	b.n	8003f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f2a:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <xPortStartScheduler+0x130>)
 8003f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	22ff      	movs	r2, #255	@ 0xff
 8003f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b31      	ldr	r3, [pc, #196]	@ (8004014 <xPortStartScheduler+0x134>)
 8003f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f52:	4b31      	ldr	r3, [pc, #196]	@ (8004018 <xPortStartScheduler+0x138>)
 8003f54:	2207      	movs	r2, #7
 8003f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f58:	e009      	b.n	8003f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004018 <xPortStartScheduler+0x138>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	4a2d      	ldr	r2, [pc, #180]	@ (8004018 <xPortStartScheduler+0x138>)
 8003f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d0ef      	beq.n	8003f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f7a:	4b27      	ldr	r3, [pc, #156]	@ (8004018 <xPortStartScheduler+0x138>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d00b      	beq.n	8003f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004018 <xPortStartScheduler+0x138>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <xPortStartScheduler+0x138>)
 8003fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <xPortStartScheduler+0x138>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fb0:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <xPortStartScheduler+0x138>)
 8003fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fbc:	4b17      	ldr	r3, [pc, #92]	@ (800401c <xPortStartScheduler+0x13c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a16      	ldr	r2, [pc, #88]	@ (800401c <xPortStartScheduler+0x13c>)
 8003fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fc8:	4b14      	ldr	r3, [pc, #80]	@ (800401c <xPortStartScheduler+0x13c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	@ (800401c <xPortStartScheduler+0x13c>)
 8003fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fd4:	f000 f8da 	bl	800418c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <xPortStartScheduler+0x140>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fde:	f000 f8f9 	bl	80041d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <xPortStartScheduler+0x144>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8004024 <xPortStartScheduler+0x144>)
 8003fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fee:	f7ff ff63 	bl	8003eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ff2:	f7ff fd35 	bl	8003a60 <vTaskSwitchContext>
	prvTaskExitError();
 8003ff6:	f7ff ff1d 	bl	8003e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e000ed00 	.word	0xe000ed00
 8004008:	410fc271 	.word	0x410fc271
 800400c:	410fc270 	.word	0x410fc270
 8004010:	e000e400 	.word	0xe000e400
 8004014:	20000440 	.word	0x20000440
 8004018:	20000444 	.word	0x20000444
 800401c:	e000ed20 	.word	0xe000ed20
 8004020:	2000000c 	.word	0x2000000c
 8004024:	e000ef34 	.word	0xe000ef34

08004028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
}
 8004040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <vPortEnterCritical+0x5c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	4a0e      	ldr	r2, [pc, #56]	@ (8004084 <vPortEnterCritical+0x5c>)
 800404a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <vPortEnterCritical+0x5c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d110      	bne.n	8004076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004054:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <vPortEnterCritical+0x60>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <vPortEnterCritical+0x4e>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	603b      	str	r3, [r7, #0]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <vPortEnterCritical+0x4a>
	}
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004092:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <vPortExitCritical+0x50>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <vPortExitCritical+0x26>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <vPortExitCritical+0x50>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <vPortExitCritical+0x50>)
 80040ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040bc:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <vPortExitCritical+0x50>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <vPortExitCritical+0x44>
 80040c4:	2300      	movs	r3, #0
 80040c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	2000000c 	.word	0x2000000c

080040e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040e0:	f3ef 8009 	mrs	r0, PSP
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <pxCurrentTCBConst>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f01e 0f10 	tst.w	lr, #16
 80040f0:	bf08      	it	eq
 80040f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	6010      	str	r0, [r2, #0]
 80040fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004104:	f380 8811 	msr	BASEPRI, r0
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f7ff fca6 	bl	8003a60 <vTaskSwitchContext>
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f380 8811 	msr	BASEPRI, r0
 800411c:	bc09      	pop	{r0, r3}
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004126:	f01e 0f10 	tst.w	lr, #16
 800412a:	bf08      	it	eq
 800412c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004130:	f380 8809 	msr	PSP, r0
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst>:
 8004140:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
}
 8004160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004162:	f7ff fbc3 	bl	80038ec <xTaskIncrementTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <xPortSysTickHandler+0x40>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f383 8811 	msr	BASEPRI, r3
}
 800417e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <vPortSetupTimerInterrupt+0x34>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004196:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <vPortSetupTimerInterrupt+0x38>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <vPortSetupTimerInterrupt+0x3c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <vPortSetupTimerInterrupt+0x40>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <vPortSetupTimerInterrupt+0x44>)
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ae:	4b04      	ldr	r3, [pc, #16]	@ (80041c0 <vPortSetupTimerInterrupt+0x34>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000e010 	.word	0xe000e010
 80041c4:	e000e018 	.word	0xe000e018
 80041c8:	20000000 	.word	0x20000000
 80041cc:	10624dd3 	.word	0x10624dd3
 80041d0:	e000e014 	.word	0xe000e014

080041d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80041e4 <vPortEnableVFP+0x10>
 80041d8:	6801      	ldr	r1, [r0, #0]
 80041da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80041de:	6001      	str	r1, [r0, #0]
 80041e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041e2:	bf00      	nop
 80041e4:	e000ed88 	.word	0xe000ed88

080041e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	@ 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041f4:	f7ff face 	bl	8003794 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041f8:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <pvPortMalloc+0x184>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004200:	f000 f924 	bl	800444c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004204:	4b5a      	ldr	r3, [pc, #360]	@ (8004370 <pvPortMalloc+0x188>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 8095 	bne.w	800433c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01e      	beq.n	8004256 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004218:	2208      	movs	r2, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d015      	beq.n	8004256 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f023 0307 	bic.w	r3, r3, #7
 8004230:	3308      	adds	r3, #8
 8004232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <pvPortMalloc+0x6e>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	e7fd      	b.n	8004252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d06f      	beq.n	800433c <pvPortMalloc+0x154>
 800425c:	4b45      	ldr	r3, [pc, #276]	@ (8004374 <pvPortMalloc+0x18c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	429a      	cmp	r2, r3
 8004264:	d86a      	bhi.n	800433c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004266:	4b44      	ldr	r3, [pc, #272]	@ (8004378 <pvPortMalloc+0x190>)
 8004268:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800426a:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <pvPortMalloc+0x190>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004270:	e004      	b.n	800427c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d903      	bls.n	800428e <pvPortMalloc+0xa6>
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f1      	bne.n	8004272 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800428e:	4b37      	ldr	r3, [pc, #220]	@ (800436c <pvPortMalloc+0x184>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	429a      	cmp	r2, r3
 8004296:	d051      	beq.n	800433c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2208      	movs	r2, #8
 800429e:	4413      	add	r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1ad2      	subs	r2, r2, r3
 80042b2:	2308      	movs	r3, #8
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d920      	bls.n	80042fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <pvPortMalloc+0xfc>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	613b      	str	r3, [r7, #16]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042f6:	69b8      	ldr	r0, [r7, #24]
 80042f8:	f000 f90a 	bl	8004510 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004374 <pvPortMalloc+0x18c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	4a1b      	ldr	r2, [pc, #108]	@ (8004374 <pvPortMalloc+0x18c>)
 8004308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800430a:	4b1a      	ldr	r3, [pc, #104]	@ (8004374 <pvPortMalloc+0x18c>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <pvPortMalloc+0x194>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d203      	bcs.n	800431e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004316:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <pvPortMalloc+0x18c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a18      	ldr	r2, [pc, #96]	@ (800437c <pvPortMalloc+0x194>)
 800431c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4b13      	ldr	r3, [pc, #76]	@ (8004370 <pvPortMalloc+0x188>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	431a      	orrs	r2, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004332:	4b13      	ldr	r3, [pc, #76]	@ (8004380 <pvPortMalloc+0x198>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	4a11      	ldr	r2, [pc, #68]	@ (8004380 <pvPortMalloc+0x198>)
 800433a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800433c:	f7ff fa38 	bl	80037b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <pvPortMalloc+0x17a>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60fb      	str	r3, [r7, #12]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <pvPortMalloc+0x176>
	return pvReturn;
 8004362:	69fb      	ldr	r3, [r7, #28]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	@ 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20001008 	.word	0x20001008
 8004370:	2000101c 	.word	0x2000101c
 8004374:	2000100c 	.word	0x2000100c
 8004378:	20001000 	.word	0x20001000
 800437c:	20001010 	.word	0x20001010
 8004380:	20001014 	.word	0x20001014

08004384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d04f      	beq.n	8004436 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004396:	2308      	movs	r3, #8
 8004398:	425b      	negs	r3, r3
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4413      	add	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <vPortFree+0xbc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <vPortFree+0x46>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60fb      	str	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <vPortFree+0x66>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	60bb      	str	r3, [r7, #8]
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <vPortFree+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01e      	beq.n	8004436 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11a      	bne.n	8004436 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <vPortFree+0xbc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	43db      	mvns	r3, r3
 800440a:	401a      	ands	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004410:	f7ff f9c0 	bl	8003794 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <vPortFree+0xc0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4413      	add	r3, r2
 800441e:	4a09      	ldr	r2, [pc, #36]	@ (8004444 <vPortFree+0xc0>)
 8004420:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004422:	6938      	ldr	r0, [r7, #16]
 8004424:	f000 f874 	bl	8004510 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004428:	4b07      	ldr	r3, [pc, #28]	@ (8004448 <vPortFree+0xc4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a06      	ldr	r2, [pc, #24]	@ (8004448 <vPortFree+0xc4>)
 8004430:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004432:	f7ff f9bd 	bl	80037b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004436:	bf00      	nop
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000101c 	.word	0x2000101c
 8004444:	2000100c 	.word	0x2000100c
 8004448:	20001018 	.word	0x20001018

0800444c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004452:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004456:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004458:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <prvHeapInit+0xac>)
 800445a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3307      	adds	r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0307 	bic.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <prvHeapInit+0xac>)
 800447c:	4413      	add	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004484:	4a1d      	ldr	r2, [pc, #116]	@ (80044fc <prvHeapInit+0xb0>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800448a:	4b1c      	ldr	r3, [pc, #112]	@ (80044fc <prvHeapInit+0xb0>)
 800448c:	2200      	movs	r2, #0
 800448e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4413      	add	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004498:	2208      	movs	r2, #8
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0307 	bic.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <prvHeapInit+0xb4>)
 80044ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044ae:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <prvHeapInit+0xb4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <prvHeapInit+0xb4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <prvHeapInit+0xb4>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <prvHeapInit+0xb8>)
 80044da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a09      	ldr	r2, [pc, #36]	@ (8004508 <prvHeapInit+0xbc>)
 80044e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044e4:	4b09      	ldr	r3, [pc, #36]	@ (800450c <prvHeapInit+0xc0>)
 80044e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80044ea:	601a      	str	r2, [r3, #0]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	20000448 	.word	0x20000448
 80044fc:	20001000 	.word	0x20001000
 8004500:	20001008 	.word	0x20001008
 8004504:	20001010 	.word	0x20001010
 8004508:	2000100c 	.word	0x2000100c
 800450c:	2000101c 	.word	0x2000101c

08004510 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004518:	4b28      	ldr	r3, [pc, #160]	@ (80045bc <prvInsertBlockIntoFreeList+0xac>)
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e002      	b.n	8004524 <prvInsertBlockIntoFreeList+0x14>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d8f7      	bhi.n	800451e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4413      	add	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d108      	bne.n	8004552 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	441a      	add	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d118      	bne.n	8004598 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <prvInsertBlockIntoFreeList+0xb0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d00d      	beq.n	800458e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	441a      	add	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e008      	b.n	80045a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800458e:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <prvInsertBlockIntoFreeList+0xb0>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e003      	b.n	80045a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d002      	beq.n	80045ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20001000 	.word	0x20001000
 80045c0:	20001008 	.word	0x20001008

080045c4 <memset>:
 80045c4:	4402      	add	r2, r0
 80045c6:	4603      	mov	r3, r0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d100      	bne.n	80045ce <memset+0xa>
 80045cc:	4770      	bx	lr
 80045ce:	f803 1b01 	strb.w	r1, [r3], #1
 80045d2:	e7f9      	b.n	80045c8 <memset+0x4>

080045d4 <__libc_init_array>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4d0d      	ldr	r5, [pc, #52]	@ (800460c <__libc_init_array+0x38>)
 80045d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004610 <__libc_init_array+0x3c>)
 80045da:	1b64      	subs	r4, r4, r5
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	2600      	movs	r6, #0
 80045e0:	42a6      	cmp	r6, r4
 80045e2:	d109      	bne.n	80045f8 <__libc_init_array+0x24>
 80045e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004614 <__libc_init_array+0x40>)
 80045e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004618 <__libc_init_array+0x44>)
 80045e8:	f000 f818 	bl	800461c <_init>
 80045ec:	1b64      	subs	r4, r4, r5
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	2600      	movs	r6, #0
 80045f2:	42a6      	cmp	r6, r4
 80045f4:	d105      	bne.n	8004602 <__libc_init_array+0x2e>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fc:	4798      	blx	r3
 80045fe:	3601      	adds	r6, #1
 8004600:	e7ee      	b.n	80045e0 <__libc_init_array+0xc>
 8004602:	f855 3b04 	ldr.w	r3, [r5], #4
 8004606:	4798      	blx	r3
 8004608:	3601      	adds	r6, #1
 800460a:	e7f2      	b.n	80045f2 <__libc_init_array+0x1e>
 800460c:	080046c4 	.word	0x080046c4
 8004610:	080046c4 	.word	0x080046c4
 8004614:	080046c4 	.word	0x080046c4
 8004618:	080046c8 	.word	0x080046c8

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
