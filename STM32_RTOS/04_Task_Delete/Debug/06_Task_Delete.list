
06_Task_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a80  08004a80  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a88  08004a88  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a88  08004a88  00005a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004a90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000010  08004aa0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08004aa0  00006024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efdf  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254e  00000000  00000000  0001501f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00017570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a54  00000000  00000000  000182f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fc  00000000  00000000  00018d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f449  00000000  00000000  0003ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f004a  00000000  00000000  0004f389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f3d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0013f418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00142a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800493c 	.word	0x0800493c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800493c 	.word	0x0800493c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <uart_msg>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to send a string message over UART2
void uart_msg(char *s)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 1000);  // transmit a string over UART2
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff fe41 	bl	80001d0 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <uart_msg+0x28>)
 800055a:	f002 f95b 	bl	8002814 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000280 	.word	0x20000280

0800056c <task1>:

// Task 1: blinks LED periodically
void task1(void *p)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uart_msg("TASK-1 RUNNING\r\n");   // send startup message for Task-1
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <task1+0x24>)
 8000576:	f7ff ffe3 	bl	8000540 <uart_msg>

	while(1)  // run forever
	{
		vTaskDelay(250);                        // wait for 250 ticks (non-blocking delay)
 800057a:	20fa      	movs	r0, #250	@ 0xfa
 800057c:	f003 fa02 	bl	8003984 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // toggle LED connected to PA5
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fdbd 	bl	8001104 <HAL_GPIO_TogglePin>
		vTaskDelay(250);                        // wait for 250 ticks (non-blocking delay)
 800058a:	bf00      	nop
 800058c:	e7f5      	b.n	800057a <task1+0xe>
 800058e:	bf00      	nop
 8000590:	08004954 	.word	0x08004954

08000594 <task2>:
	}
}

// Task 2: monitors button and deletes itself if pressed
void task2(void *p)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uart_msg("TASK-2 RUNNING\r\n");   // send startup message for Task-2
 800059c:	4810      	ldr	r0, [pc, #64]	@ (80005e0 <task2+0x4c>)
 800059e:	f7ff ffcf 	bl	8000540 <uart_msg>

	while(1)  // run forever
	{
		// check if user button (PC13) is not pressed (logic HIGH)
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80005a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a6:	480f      	ldr	r0, [pc, #60]	@ (80005e4 <task2+0x50>)
 80005a8:	f000 fd7c 	bl	80010a4 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d009      	beq.n	80005c6 <task2+0x32>
		{
			HAL_Delay(1000);
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 fac1 	bl	8000b3c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // toggle LED on PA5
 80005ba:	2120      	movs	r1, #32
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fda0 	bl	8001104 <HAL_GPIO_TogglePin>
 80005c4:	e7ed      	b.n	80005a2 <task2+0xe>
		}
		else  // button is pressed (logic LOW)
		{
			uart_msg("BUTTON press detected!\r\n");     // notify button press
 80005c6:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <task2+0x54>)
 80005c8:	f7ff ffba 	bl	8000540 <uart_msg>
			uart_msg("TASK-2 going to be deleted\r\n"); // notify about deletion
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <task2+0x58>)
 80005ce:	f7ff ffb7 	bl	8000540 <uart_msg>
			vTaskDelete(NULL);   // delete this task itself (self-terminate)
 80005d2:	2000      	movs	r0, #0
 80005d4:	f003 f946 	bl	8003864 <vTaskDelete>

			// this line will never run because the task is already deleted
			uart_msg("TASK-2 DELETED\r\n");
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <task2+0x5c>)
 80005da:	f7ff ffb1 	bl	8000540 <uart_msg>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80005de:	e7e0      	b.n	80005a2 <task2+0xe>
 80005e0:	08004968 	.word	0x08004968
 80005e4:	48000800 	.word	0x48000800
 80005e8:	0800497c 	.word	0x0800497c
 80005ec:	08004998 	.word	0x08004998
 80005f0:	080049b8 	.word	0x080049b8

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fa23 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f843 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8c3 	bl	800078c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f891 	bl	800072c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
 osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060a:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <main+0x70>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fe73 	bl	800330c <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <main+0x74>)
 800062a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  uart_msg("SIMPLE TASK DELETE DEMOSTRATION PROGRAM\r\n");
 800062c:	480f      	ldr	r0, [pc, #60]	@ (800066c <main+0x78>)
 800062e:	f7ff ff87 	bl	8000540 <uart_msg>

  xTaskCreate(task1, "TASK1", 128, NULL, 1, &xTaskHandle1);
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <main+0x7c>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2301      	movs	r3, #1
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2280      	movs	r2, #128	@ 0x80
 800063e:	490d      	ldr	r1, [pc, #52]	@ (8000674 <main+0x80>)
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <main+0x84>)
 8000642:	f002 ffd7 	bl	80035f4 <xTaskCreate>
  xTaskCreate(task2, "TASK2",256, NULL,2, &xTaskHandle2);
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <main+0x88>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000654:	490a      	ldr	r1, [pc, #40]	@ (8000680 <main+0x8c>)
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <main+0x90>)
 8000658:	f002 ffcc 	bl	80035f4 <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f002 fe4f 	bl	80032fe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x6c>
 8000664:	08004a14 	.word	0x08004a14
 8000668:	20000308 	.word	0x20000308
 800066c:	080049cc 	.word	0x080049cc
 8000670:	2000030c 	.word	0x2000030c
 8000674:	080049f8 	.word	0x080049f8
 8000678:	0800056d 	.word	0x0800056d
 800067c:	20000310 	.word	0x20000310
 8000680:	08004a00 	.word	0x08004a00
 8000684:	08000595 	.word	0x08000595

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	@ 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f924 	bl	80048e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f000 fd51 	bl	8001154 <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b8:	f000 f8d6 	bl	8000868 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2310      	movs	r3, #16
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006d6:	230a      	movs	r3, #10
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fd88 	bl	8001200 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006f6:	f000 f8b7 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	2104      	movs	r1, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f950 	bl	80019b8 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071e:	f000 f8a3 	bl	8000868 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3758      	adds	r7, #88	@ 0x58
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_USART2_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART2_UART_Init+0x58>)
 8000770:	f002 f802 	bl	8002778 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f875 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000280 	.word	0x20000280
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a24      	ldr	r2, [pc, #144]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f000 fc63 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000814:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <MX_GPIO_Init+0xc8>)
 8000826:	f000 fa93 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000844:	f000 fa84 	bl	8000d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	@ 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000800 	.word	0x48000800

08000858 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f002 fd9f 	bl	80033a4 <osDelay>
 8000866:	e7fb      	b.n	8000860 <StartDefaultTask+0x8>

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <HAL_MspInit+0x4c>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	@ 0x60
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	f06f 0001 	mvn.w	r0, #1
 80008b2:	f000 fa24 	bl	8000cfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0ac      	sub	sp, #176	@ 0xb0
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2288      	movs	r2, #136	@ 0x88
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 fffd 	bl	80048e4 <memset>
  if(huart->Instance==USART2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a21      	ldr	r2, [pc, #132]	@ (8000974 <HAL_UART_MspInit+0xb0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d13b      	bne.n	800096c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fa7d 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800090c:	f7ff ffac 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <HAL_UART_MspInit+0xb4>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000914:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <HAL_UART_MspInit+0xb4>)
 8000916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091a:	6593      	str	r3, [r2, #88]	@ 0x58
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <HAL_UART_MspInit+0xb4>)
 800091e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <HAL_UART_MspInit+0xb4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <HAL_UART_MspInit+0xb4>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_UART_MspInit+0xb4>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000940:	230c      	movs	r3, #12
 8000942:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000958:	2307      	movs	r3, #7
 800095a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f000 f9f2 	bl	8000d50 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800096c:	bf00      	nop
 800096e:	37b0      	adds	r7, #176	@ 0xb0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004400 	.word	0x40004400
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f8a1 	bl	8000afc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ba:	f003 fb13 	bl	8003fe4 <xTaskGetSchedulerState>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d001      	beq.n	80009c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009c4:	f003 fd50 	bl	8004468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f003 ff69 	bl	80048f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fde7 	bl	80005f4 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a34:	08004a90 	.word	0x08004a90
  ldr r2, =_sbss
 8000a38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a3c:	20001024 	.word	0x20001024

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_Init+0x3c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	@ (8000a80 <HAL_Init+0x3c>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 f944 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a60:	200f      	movs	r0, #15
 8000a62:	f000 f80f 	bl	8000a84 <HAL_InitTick>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	e001      	b.n	8000a76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a72:	f7ff feff 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_InitTick+0x6c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d023      	beq.n	8000ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_InitTick+0x70>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_InitTick+0x6c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f941 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d809      	bhi.n	8000ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f919 	bl	8000cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000acc:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_InitTick+0x74>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e001      	b.n	8000ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000314 	.word	0x20000314

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000314 	.word	0x20000314

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	@ (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	@ 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e17f      	b.n	8001060 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8171 	beq.w	800105a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d005      	beq.n	8000d90 <HAL_GPIO_Init+0x40>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d130      	bne.n	8000df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	f003 0201 	and.w	r2, r3, #1
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d118      	bne.n	8000e30 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	6939      	ldr	r1, [r7, #16]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ac 	beq.w	800105a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <HAL_GPIO_Init+0x330>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	4a5e      	ldr	r2, [pc, #376]	@ (8001080 <HAL_GPIO_Init+0x330>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001080 <HAL_GPIO_Init+0x330>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x242>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4f      	ldr	r2, [pc, #316]	@ (8001088 <HAL_GPIO_Init+0x338>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x23e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4e      	ldr	r2, [pc, #312]	@ (800108c <HAL_GPIO_Init+0x33c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x23a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4d      	ldr	r2, [pc, #308]	@ (8001090 <HAL_GPIO_Init+0x340>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x236>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	@ (8001094 <HAL_GPIO_Init+0x344>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x232>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4b      	ldr	r2, [pc, #300]	@ (8001098 <HAL_GPIO_Init+0x348>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4a      	ldr	r2, [pc, #296]	@ (800109c <HAL_GPIO_Init+0x34c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x22a>
 8000f76:	2306      	movs	r3, #6
 8000f78:	e00c      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00a      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f82:	2304      	movs	r3, #4
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa4:	4937      	ldr	r1, [pc, #220]	@ (8001084 <HAL_GPIO_Init+0x334>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd6:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fdc:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001000:	4a27      	ldr	r2, [pc, #156]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001006:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102a:	4a1d      	ldr	r2, [pc, #116]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001054:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <HAL_GPIO_Init+0x350>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa22 f303 	lsr.w	r3, r2, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	f47f ae78 	bne.w	8000d60 <HAL_GPIO_Init+0x10>
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	48001000 	.word	0x48001000
 8001098:	48001400 	.word	0x48001400
 800109c:	48001800 	.word	0x48001800
 80010a0:	40010400 	.word	0x40010400

080010a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e001      	b.n	80010c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43d9      	mvns	r1, r3
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	400b      	ands	r3, r1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <HAL_PWREx_GetVoltageRange+0x18>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001162:	d130      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800116c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001170:	d038      	beq.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001180:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2232      	movs	r2, #50	@ 0x32
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001198:	e002      	b.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3b01      	subs	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ac:	d102      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f2      	bne.n	800119a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c0:	d110      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e00f      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d2:	d007      	beq.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011dc:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000
 80011f8:	20000000 	.word	0x20000000
 80011fc:	431bde83 	.word	0x431bde83

08001200 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e3ca      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001212:	4b97      	ldr	r3, [pc, #604]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121c:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80e4 	beq.w	80013fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_RCC_OscConfig+0x4a>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	f040 808b 	bne.w	8001358 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	f040 8087 	bne.w	8001358 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124a:	4b89      	ldr	r3, [pc, #548]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x62>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e3a2      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	4b82      	ldr	r3, [pc, #520]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <HAL_RCC_OscConfig+0x7c>
 8001272:	4b7f      	ldr	r3, [pc, #508]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800127a:	e005      	b.n	8001288 <HAL_RCC_OscConfig+0x88>
 800127c:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800127e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001288:	4293      	cmp	r3, r2
 800128a:	d223      	bcs.n	80012d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fd55 	bl	8001d40 <RCC_SetFlashLatencyFromMSIRange>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e383      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a0:	4b73      	ldr	r3, [pc, #460]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a72      	ldr	r2, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	496d      	ldr	r1, [pc, #436]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012be:	4b6c      	ldr	r3, [pc, #432]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	4968      	ldr	r1, [pc, #416]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
 80012d2:	e025      	b.n	8001320 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d4:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4960      	ldr	r1, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	495b      	ldr	r1, [pc, #364]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fd15 	bl	8001d40 <RCC_SetFlashLatencyFromMSIRange>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e343      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001320:	f000 fc4a 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b52      	ldr	r3, [pc, #328]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	4950      	ldr	r1, [pc, #320]	@ (8001474 <HAL_RCC_OscConfig+0x274>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	4a4e      	ldr	r2, [pc, #312]	@ (8001478 <HAL_RCC_OscConfig+0x278>)
 800133e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_RCC_OscConfig+0x27c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fb9d 	bl	8000a84 <HAL_InitTick>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d052      	beq.n	80013fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	e327      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d032      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001360:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a42      	ldr	r2, [pc, #264]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136c:	f7ff fbda 	bl	8000b24 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001374:	f7ff fbd6 	bl	8000b24 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e310      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001386:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001392:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4931      	ldr	r1, [pc, #196]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	492c      	ldr	r1, [pc, #176]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e01a      	b.n	80013fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fba7 	bl	8000b24 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013da:	f7ff fba3 	bl	8000b24 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e2dd      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ec:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x1da>
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d074      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b08      	cmp	r3, #8
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x21a>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d10e      	bne.n	8001432 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d10b      	bne.n	8001432 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d064      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d160      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e2ba      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x24a>
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e026      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001452:	d115      	bne.n	8001480 <HAL_RCC_OscConfig+0x280>
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800145a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a02      	ldr	r2, [pc, #8]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	08004a38 	.word	0x08004a38
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004
 8001480:	4ba0      	ldr	r3, [pc, #640]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a9f      	ldr	r2, [pc, #636]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b9d      	ldr	r3, [pc, #628]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a9c      	ldr	r2, [pc, #624]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb40 	bl	8000b24 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb3c 	bl	8000b24 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e276      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ba:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2a8>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb2c 	bl	8000b24 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb28 	bl	8000b24 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e262      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e2:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2d0>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d060      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <HAL_RCC_OscConfig+0x310>
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d119      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x328>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e23f      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b76      	ldr	r3, [pc, #472]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	4973      	ldr	r1, [pc, #460]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	e040      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d023      	beq.n	800158e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6e      	ldr	r2, [pc, #440]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fae7 	bl	8000b24 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fae3 	bl	8000b24 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e21d      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b62      	ldr	r3, [pc, #392]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	495f      	ldr	r1, [pc, #380]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e018      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5c      	ldr	r2, [pc, #368]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fac3 	bl	8000b24 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fabf 	bl	8000b24 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1f9      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d03c      	beq.n	8001646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01c      	beq.n	800160e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015da:	4a4a      	ldr	r2, [pc, #296]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa9e 	bl	8000b24 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fa9a 	bl	8000b24 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1d4      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ef      	beq.n	80015ec <HAL_RCC_OscConfig+0x3ec>
 800160c:	e01b      	b.n	8001646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001614:	4a3b      	ldr	r2, [pc, #236]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fa81 	bl	8000b24 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fa7d 	bl	8000b24 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1b7      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ef      	bne.n	8001626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80a6 	beq.w	80017a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167c:	2301      	movs	r3, #1
 800167e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d118      	bne.n	80016be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001698:	f7ff fa44 	bl	8000b24 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a0:	f7ff fa40 	bl	8000b24 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e17a      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d6:	e029      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d115      	bne.n	800170c <HAL_RCC_OscConfig+0x50c>
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a03      	ldr	r2, [pc, #12]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	4b9c      	ldr	r3, [pc, #624]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001712:	4a9b      	ldr	r2, [pc, #620]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171c:	4b98      	ldr	r3, [pc, #608]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a97      	ldr	r2, [pc, #604]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d016      	beq.n	8001762 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f9f6 	bl	8000b24 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff f9f2 	bl	8000b24 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e12a      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001752:	4b8b      	ldr	r3, [pc, #556]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ed      	beq.n	800173c <HAL_RCC_OscConfig+0x53c>
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff f9df 	bl	8000b24 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f9db 	bl	8000b24 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e113      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001780:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b7a      	ldr	r3, [pc, #488]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a79      	ldr	r2, [pc, #484]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80fe 	beq.w	80019a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	f040 80d0 	bne.w	8001954 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b4:	4b72      	ldr	r3, [pc, #456]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d130      	bne.n	800182a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	3b01      	subs	r3, #1
 80017d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d127      	bne.n	800182a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11f      	bne.n	800182a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017f4:	2a07      	cmp	r2, #7
 80017f6:	bf14      	ite	ne
 80017f8:	2201      	movne	r2, #1
 80017fa:	2200      	moveq	r2, #0
 80017fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fe:	4293      	cmp	r3, r2
 8001800:	d113      	bne.n	800182a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d109      	bne.n	800182a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d06e      	beq.n	8001908 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d069      	beq.n	8001904 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001830:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800183c:	4b50      	ldr	r3, [pc, #320]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0ad      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800184c:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a4b      	ldr	r2, [pc, #300]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001858:	f7ff f964 	bl	8000b24 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f960 	bl	8000b24 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e09a      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	4b43      	ldr	r3, [pc, #268]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	4b40      	ldr	r3, [pc, #256]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4b40      	ldr	r3, [pc, #256]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800188e:	3a01      	subs	r2, #1
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001898:	0212      	lsls	r2, r2, #8
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018a0:	0852      	lsrs	r2, r2, #1
 80018a2:	3a01      	subs	r2, #1
 80018a4:	0552      	lsls	r2, r2, #21
 80018a6:	4311      	orrs	r1, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018ac:	0852      	lsrs	r2, r2, #1
 80018ae:	3a01      	subs	r2, #1
 80018b0:	0652      	lsls	r2, r2, #25
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018b8:	0912      	lsrs	r2, r2, #4
 80018ba:	0452      	lsls	r2, r2, #17
 80018bc:	430a      	orrs	r2, r1
 80018be:	4930      	ldr	r1, [pc, #192]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018dc:	f7ff f922 	bl	8000b24 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f91e 	bl	8000b24 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e058      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f6:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001902:	e050      	b.n	80019a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e04f      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d148      	bne.n	80019a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a16      	ldr	r2, [pc, #88]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800192c:	f7ff f8fa 	bl	8000b24 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f8f6 	bl	8000b24 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e030      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x734>
 8001952:	e028      	b.n	80019a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d023      	beq.n	80019a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <HAL_RCC_OscConfig+0x780>)
 8001960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f8dd 	bl	8000b24 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e00c      	b.n	8001988 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f8d9 	bl	8000b24 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d905      	bls.n	8001988 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e013      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
 8001980:	40021000 	.word	0x40021000
 8001984:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_OscConfig+0x7b0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ec      	bne.n	800196e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_RCC_OscConfig+0x7b0>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4905      	ldr	r1, [pc, #20]	@ (80019b0 <HAL_RCC_OscConfig+0x7b0>)
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_OscConfig+0x7b4>)
 800199c:	4013      	ands	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
 80019a0:	e001      	b.n	80019a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	feeefffc 	.word	0xfeeefffc

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0e7      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b75      	ldr	r3, [pc, #468]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d910      	bls.n	80019fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b72      	ldr	r3, [pc, #456]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 0207 	bic.w	r2, r3, #7
 80019e2:	4970      	ldr	r1, [pc, #448]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cf      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d908      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4960      	ldr	r1, [pc, #384]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d04c      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d121      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0a6      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	4b54      	ldr	r3, [pc, #336]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e09a      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e08e      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e086      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4943      	ldr	r1, [pc, #268]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f840 	bl	8000b24 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f83c 	bl	8000b24 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e06e      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d208      	bcs.n	8001afe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	492b      	ldr	r1, [pc, #172]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d210      	bcs.n	8001b2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 0207 	bic.w	r2, r3, #7
 8001b14:	4923      	ldr	r1, [pc, #140]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e036      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4918      	ldr	r1, [pc, #96]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4910      	ldr	r1, [pc, #64]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b6c:	f000 f824 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	490b      	ldr	r1, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe ff77 	bl	8000a84 <HAL_InitTick>
 8001b96:	4603      	mov	r3, r0
 8001b98:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08004a38 	.word	0x08004a38
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x34>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d121      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d11e      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bf8:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e005      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c14:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10d      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c30:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e004      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d134      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c46:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d003      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xac>
 8001c5c:	e005      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c60:	617b      	str	r3, [r7, #20]
      break;
 8001c62:	e005      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c66:	617b      	str	r3, [r7, #20]
      break;
 8001c68:	e002      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	617b      	str	r3, [r7, #20]
      break;
 8001c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	fb03 f202 	mul.w	r2, r3, r2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	0e5b      	lsrs	r3, r3, #25
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08004a50 	.word	0x08004a50
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	007a1200 	.word	0x007a1200

08001cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4904      	ldr	r1, [pc, #16]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08004a48 	.word	0x08004a48

08001d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d18:	f7ff ffda 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0adb      	lsrs	r3, r3, #11
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4904      	ldr	r1, [pc, #16]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08004a48 	.word	0x08004a48

08001d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d58:	f7ff f9ee 	bl	8001138 <HAL_PWREx_GetVoltageRange>
 8001d5c:	6178      	str	r0, [r7, #20]
 8001d5e:	e014      	b.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d78:	f7ff f9de 	bl	8001138 <HAL_PWREx_GetVoltageRange>
 8001d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d90:	d10b      	bne.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b80      	cmp	r3, #128	@ 0x80
 8001d96:	d919      	bls.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d9c:	d902      	bls.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d9e:	2302      	movs	r3, #2
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e013      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e010      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	@ 0x80
 8001dae:	d902      	bls.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001db0:	2303      	movs	r3, #3
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e00a      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b80      	cmp	r3, #128	@ 0x80
 8001dba:	d102      	bne.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e004      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b70      	cmp	r3, #112	@ 0x70
 8001dc6:	d101      	bne.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc8:	2301      	movs	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	4909      	ldr	r1, [pc, #36]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d041      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e24:	d02a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e2a:	d824      	bhi.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e30:	d008      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e36:	d81e      	bhi.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e40:	d010      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e42:	e018      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e44:	4b86      	ldr	r3, [pc, #536]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a85      	ldr	r2, [pc, #532]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e50:	e015      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fabb 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e62:	e00c      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3320      	adds	r3, #32
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fba6 	bl	80025bc <RCCEx_PLLSAI2_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e74:	e003      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	74fb      	strb	r3, [r7, #19]
      break;
 8001e7a:	e000      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e7e:	7cfb      	ldrb	r3, [r7, #19]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e84:	4b76      	ldr	r3, [pc, #472]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e92:	4973      	ldr	r1, [pc, #460]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e9a:	e001      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d041      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001eb4:	d02a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001eba:	d824      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ec6:	d81e      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed4:	4b62      	ldr	r3, [pc, #392]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a61      	ldr	r2, [pc, #388]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ede:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee0:	e015      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fa73 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef2:	e00c      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3320      	adds	r3, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fb5e 	bl	80025bc <RCCEx_PLLSAI2_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f04:	e003      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0a:	e000      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f14:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f22:	494f      	ldr	r1, [pc, #316]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f2a:	e001      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a0 	beq.w	800207e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f42:	4b47      	ldr	r3, [pc, #284]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b41      	ldr	r3, [pc, #260]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a40      	ldr	r2, [pc, #256]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f64:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3a      	ldr	r2, [pc, #232]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f80:	f7fe fdd0 	bl	8000b24 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f86:	e009      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7fe fdcc 	bl	8000b24 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d902      	bls.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	74fb      	strb	r3, [r7, #19]
        break;
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ef      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d15c      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fae:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01f      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d019      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fcc:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd8:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fee:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ff8:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fd8b 	bl	8000b24 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	e00b      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd87 	bl	8000b24 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d902      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	74fb      	strb	r3, [r7, #19]
            break;
 8002028:	e006      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ec      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800204e:	4904      	ldr	r1, [pc, #16]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002056:	e009      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	74bb      	strb	r3, [r7, #18]
 800205c:	e006      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206c:	7c7b      	ldrb	r3, [r7, #17]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b9e      	ldr	r3, [pc, #632]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	4a9d      	ldr	r2, [pc, #628]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208a:	4b98      	ldr	r3, [pc, #608]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f023 0203 	bic.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	4994      	ldr	r1, [pc, #592]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ac:	4b8f      	ldr	r3, [pc, #572]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f023 020c 	bic.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ba:	498c      	ldr	r1, [pc, #560]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ce:	4b87      	ldr	r3, [pc, #540]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	4983      	ldr	r1, [pc, #524]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f0:	4b7e      	ldr	r3, [pc, #504]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	497b      	ldr	r1, [pc, #492]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002112:	4b76      	ldr	r3, [pc, #472]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002120:	4972      	ldr	r1, [pc, #456]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002134:	4b6d      	ldr	r3, [pc, #436]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	496a      	ldr	r1, [pc, #424]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002156:	4b65      	ldr	r3, [pc, #404]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	4961      	ldr	r1, [pc, #388]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002178:	4b5c      	ldr	r3, [pc, #368]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	4959      	ldr	r1, [pc, #356]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219a:	4b54      	ldr	r3, [pc, #336]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a8:	4950      	ldr	r1, [pc, #320]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021bc:	4b4b      	ldr	r3, [pc, #300]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	4948      	ldr	r1, [pc, #288]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021de:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	493f      	ldr	r1, [pc, #252]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d028      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002200:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220e:	4937      	ldr	r1, [pc, #220]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800221e:	d106      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002220:	4b32      	ldr	r3, [pc, #200]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a31      	ldr	r2, [pc, #196]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800222a:	60d3      	str	r3, [r2, #12]
 800222c:	e011      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002236:	d10c      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f8c8 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002264:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	491f      	ldr	r1, [pc, #124]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800227c:	d106      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002288:	60d3      	str	r3, [r2, #12]
 800228a:	e011      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f899 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02b      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022da:	d109      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a02      	ldr	r2, [pc, #8]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]
 80022e8:	e014      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f867 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d02f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800232e:	4928      	ldr	r1, [pc, #160]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800233e:	d10d      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f844 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	74bb      	strb	r3, [r7, #18]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	2102      	movs	r1, #2
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f925 	bl	80025bc <RCCEx_PLLSAI2_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800238c:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800239a:	490d      	ldr	r1, [pc, #52]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023be:	4904      	ldr	r1, [pc, #16]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023e2:	4b75      	ldr	r3, [pc, #468]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d018      	beq.n	8002420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ee:	4b72      	ldr	r3, [pc, #456]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d10d      	bne.n	800241a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
       ||
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002406:	4b6c      	ldr	r3, [pc, #432]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
       ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d047      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e044      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d018      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x86>
 8002428:	2b03      	cmp	r3, #3
 800242a:	d825      	bhi.n	8002478 <RCCEx_PLLSAI1_Config+0xa4>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d002      	beq.n	8002436 <RCCEx_PLLSAI1_Config+0x62>
 8002430:	2b02      	cmp	r3, #2
 8002432:	d009      	beq.n	8002448 <RCCEx_PLLSAI1_Config+0x74>
 8002434:	e020      	b.n	8002478 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002436:	4b60      	ldr	r3, [pc, #384]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11d      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002446:	e01a      	b.n	800247e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002448:	4b5b      	ldr	r3, [pc, #364]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d116      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e013      	b.n	8002482 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800245a:	4b57      	ldr	r3, [pc, #348]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002466:	4b54      	ldr	r3, [pc, #336]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002476:	e006      	b.n	8002486 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e004      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247e:	bf00      	nop
 8002480:	e002      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002486:	bf00      	nop
    }

    if(status == HAL_OK)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800248e:	4b4a      	ldr	r3, [pc, #296]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	430b      	orrs	r3, r1
 80024a4:	4944      	ldr	r1, [pc, #272]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d17d      	bne.n	80025ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024b0:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a40      	ldr	r2, [pc, #256]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024bc:	f7fe fb32 	bl	8000b24 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024c2:	e009      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c4:	f7fe fb2e 	bl	8000b24 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d902      	bls.n	80024d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	73fb      	strb	r3, [r7, #15]
        break;
 80024d6:	e005      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d8:	4b37      	ldr	r3, [pc, #220]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ef      	bne.n	80024c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d160      	bne.n	80025ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024f0:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6892      	ldr	r2, [r2, #8]
 8002500:	0211      	lsls	r1, r2, #8
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68d2      	ldr	r2, [r2, #12]
 8002506:	0912      	lsrs	r2, r2, #4
 8002508:	0452      	lsls	r2, r2, #17
 800250a:	430a      	orrs	r2, r1
 800250c:	492a      	ldr	r1, [pc, #168]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	610b      	str	r3, [r1, #16]
 8002512:	e027      	b.n	8002564 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d112      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800251a:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002522:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6892      	ldr	r2, [r2, #8]
 800252a:	0211      	lsls	r1, r2, #8
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6912      	ldr	r2, [r2, #16]
 8002530:	0852      	lsrs	r2, r2, #1
 8002532:	3a01      	subs	r2, #1
 8002534:	0552      	lsls	r2, r2, #21
 8002536:	430a      	orrs	r2, r1
 8002538:	491f      	ldr	r1, [pc, #124]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	610b      	str	r3, [r1, #16]
 800253e:	e011      	b.n	8002564 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	0211      	lsls	r1, r2, #8
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6952      	ldr	r2, [r2, #20]
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3a01      	subs	r2, #1
 800255a:	0652      	lsls	r2, r2, #25
 800255c:	430a      	orrs	r2, r1
 800255e:	4916      	ldr	r1, [pc, #88]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800256e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fad8 	bl	8000b24 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002576:	e009      	b.n	800258c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002578:	f7fe fad4 	bl	8000b24 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d902      	bls.n	800258c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	73fb      	strb	r3, [r7, #15]
          break;
 800258a:	e005      	b.n	8002598 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ef      	beq.n	8002578 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4904      	ldr	r1, [pc, #16]	@ (80025b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000

080025bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025d6:	4b67      	ldr	r3, [pc, #412]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10d      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ee:	4b61      	ldr	r3, [pc, #388]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
       ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d047      	beq.n	8002692 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e044      	b.n	8002692 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d018      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x86>
 8002610:	2b03      	cmp	r3, #3
 8002612:	d825      	bhi.n	8002660 <RCCEx_PLLSAI2_Config+0xa4>
 8002614:	2b01      	cmp	r3, #1
 8002616:	d002      	beq.n	800261e <RCCEx_PLLSAI2_Config+0x62>
 8002618:	2b02      	cmp	r3, #2
 800261a:	d009      	beq.n	8002630 <RCCEx_PLLSAI2_Config+0x74>
 800261c:	e020      	b.n	8002660 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800261e:	4b55      	ldr	r3, [pc, #340]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11d      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262e:	e01a      	b.n	8002666 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002630:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e013      	b.n	800266a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002642:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800264e:	4b49      	ldr	r3, [pc, #292]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800265e:	e006      	b.n	800266e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e004      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800266e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002676:	4b3f      	ldr	r3, [pc, #252]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	430b      	orrs	r3, r1
 800268c:	4939      	ldr	r1, [pc, #228]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d167      	bne.n	8002768 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002698:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a35      	ldr	r2, [pc, #212]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fa3e 	bl	8000b24 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026aa:	e009      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ac:	f7fe fa3a 	bl	8000b24 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	73fb      	strb	r3, [r7, #15]
        break;
 80026be:	e005      	b.n	80026cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ef      	bne.n	80026ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d14a      	bne.n	8002768 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026d8:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6892      	ldr	r2, [r2, #8]
 80026e8:	0211      	lsls	r1, r2, #8
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	0912      	lsrs	r2, r2, #4
 80026f0:	0452      	lsls	r2, r2, #17
 80026f2:	430a      	orrs	r2, r1
 80026f4:	491f      	ldr	r1, [pc, #124]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	614b      	str	r3, [r1, #20]
 80026fa:	e011      	b.n	8002720 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002704:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6892      	ldr	r2, [r2, #8]
 800270c:	0211      	lsls	r1, r2, #8
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6912      	ldr	r2, [r2, #16]
 8002712:	0852      	lsrs	r2, r2, #1
 8002714:	3a01      	subs	r2, #1
 8002716:	0652      	lsls	r2, r2, #25
 8002718:	430a      	orrs	r2, r1
 800271a:	4916      	ldr	r1, [pc, #88]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	4313      	orrs	r3, r2
 800271e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe f9fa 	bl	8000b24 <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002732:	e009      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002734:	f7fe f9f6 	bl	8000b24 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d902      	bls.n	8002748 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	73fb      	strb	r3, [r7, #15]
          break;
 8002746:	e005      	b.n	8002754 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002748:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4904      	ldr	r1, [pc, #16]	@ (8002774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e040      	b.n	800280c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f892 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fb6a 	bl	8002e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8af 	bl	8002928 <UART_SetConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e01b      	b.n	800280c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fbe9 	bl	8002fdc <UART_CheckIdleState>
 800280a:	4603      	mov	r3, r0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	@ 0x28
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002828:	2b20      	cmp	r3, #32
 800282a:	d177      	bne.n	800291c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_UART_Transmit+0x24>
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e070      	b.n	800291e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2221      	movs	r2, #33	@ 0x21
 8002848:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800284a:	f7fe f96b 	bl	8000b24 <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002868:	d108      	bne.n	800287c <HAL_UART_Transmit+0x68>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e003      	b.n	8002884 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002884:	e02f      	b.n	80028e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fc4b 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e03b      	b.n	800291e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b8:	b292      	uxth	r2, r2
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	3302      	adds	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e007      	b.n	80028d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1c9      	bne.n	8002886 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2140      	movs	r1, #64	@ 0x40
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fc15 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e005      	b.n	800291e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b08a      	sub	sp, #40	@ 0x28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4313      	orrs	r3, r2
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4ba4      	ldr	r3, [pc, #656]	@ (8002be8 <UART_SetConfig+0x2c0>)
 8002958:	4013      	ands	r3, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002960:	430b      	orrs	r3, r1
 8002962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a99      	ldr	r2, [pc, #612]	@ (8002bec <UART_SetConfig+0x2c4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	4313      	orrs	r3, r2
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a90      	ldr	r2, [pc, #576]	@ (8002bf0 <UART_SetConfig+0x2c8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d126      	bne.n	8002a00 <UART_SetConfig+0xd8>
 80029b2:	4b90      	ldr	r3, [pc, #576]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d81b      	bhi.n	80029f8 <UART_SetConfig+0xd0>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <UART_SetConfig+0xa0>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e9 	.word	0x080029e9
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029f1 	.word	0x080029f1
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029de:	e116      	b.n	8002c0e <UART_SetConfig+0x2e6>
 80029e0:	2302      	movs	r3, #2
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e6:	e112      	b.n	8002c0e <UART_SetConfig+0x2e6>
 80029e8:	2304      	movs	r3, #4
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ee:	e10e      	b.n	8002c0e <UART_SetConfig+0x2e6>
 80029f0:	2308      	movs	r3, #8
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f6:	e10a      	b.n	8002c0e <UART_SetConfig+0x2e6>
 80029f8:	2310      	movs	r3, #16
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fe:	e106      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf8 <UART_SetConfig+0x2d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d138      	bne.n	8002a7c <UART_SetConfig+0x154>
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d82d      	bhi.n	8002a74 <UART_SetConfig+0x14c>
 8002a18:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <UART_SetConfig+0xf8>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a55 	.word	0x08002a55
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a75 	.word	0x08002a75
 8002a2c:	08002a75 	.word	0x08002a75
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002a75 	.word	0x08002a75
 8002a3c:	08002a75 	.word	0x08002a75
 8002a40:	08002a5d 	.word	0x08002a5d
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a75 	.word	0x08002a75
 8002a4c:	08002a75 	.word	0x08002a75
 8002a50:	08002a6d 	.word	0x08002a6d
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5a:	e0d8      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a62:	e0d4      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002a64:	2304      	movs	r3, #4
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a6a:	e0d0      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a72:	e0cc      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002a74:	2310      	movs	r3, #16
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7a:	e0c8      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5e      	ldr	r2, [pc, #376]	@ (8002bfc <UART_SetConfig+0x2d4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d125      	bne.n	8002ad2 <UART_SetConfig+0x1aa>
 8002a86:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a90:	2b30      	cmp	r3, #48	@ 0x30
 8002a92:	d016      	beq.n	8002ac2 <UART_SetConfig+0x19a>
 8002a94:	2b30      	cmp	r3, #48	@ 0x30
 8002a96:	d818      	bhi.n	8002aca <UART_SetConfig+0x1a2>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d00a      	beq.n	8002ab2 <UART_SetConfig+0x18a>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d814      	bhi.n	8002aca <UART_SetConfig+0x1a2>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <UART_SetConfig+0x182>
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d008      	beq.n	8002aba <UART_SetConfig+0x192>
 8002aa8:	e00f      	b.n	8002aca <UART_SetConfig+0x1a2>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab0:	e0ad      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab8:	e0a9      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002aba:	2304      	movs	r3, #4
 8002abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac0:	e0a5      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac8:	e0a1      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002aca:	2310      	movs	r3, #16
 8002acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad0:	e09d      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <UART_SetConfig+0x2d8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d125      	bne.n	8002b28 <UART_SetConfig+0x200>
 8002adc:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ae8:	d016      	beq.n	8002b18 <UART_SetConfig+0x1f0>
 8002aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002aec:	d818      	bhi.n	8002b20 <UART_SetConfig+0x1f8>
 8002aee:	2b80      	cmp	r3, #128	@ 0x80
 8002af0:	d00a      	beq.n	8002b08 <UART_SetConfig+0x1e0>
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	d814      	bhi.n	8002b20 <UART_SetConfig+0x1f8>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <UART_SetConfig+0x1d8>
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d008      	beq.n	8002b10 <UART_SetConfig+0x1e8>
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x1f8>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e082      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0e:	e07e      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e07a      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b18:	2308      	movs	r3, #8
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e076      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b20:	2310      	movs	r3, #16
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e072      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a35      	ldr	r2, [pc, #212]	@ (8002c04 <UART_SetConfig+0x2dc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12a      	bne.n	8002b88 <UART_SetConfig+0x260>
 8002b32:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b40:	d01a      	beq.n	8002b78 <UART_SetConfig+0x250>
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b46:	d81b      	bhi.n	8002b80 <UART_SetConfig+0x258>
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b4c:	d00c      	beq.n	8002b68 <UART_SetConfig+0x240>
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b52:	d815      	bhi.n	8002b80 <UART_SetConfig+0x258>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <UART_SetConfig+0x238>
 8002b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5c:	d008      	beq.n	8002b70 <UART_SetConfig+0x248>
 8002b5e:	e00f      	b.n	8002b80 <UART_SetConfig+0x258>
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b66:	e052      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6e:	e04e      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b70:	2304      	movs	r3, #4
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b76:	e04a      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7e:	e046      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b80:	2310      	movs	r3, #16
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b86:	e042      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <UART_SetConfig+0x2c4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d13a      	bne.n	8002c08 <UART_SetConfig+0x2e0>
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <UART_SetConfig+0x2cc>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ba0:	d01a      	beq.n	8002bd8 <UART_SetConfig+0x2b0>
 8002ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ba6:	d81b      	bhi.n	8002be0 <UART_SetConfig+0x2b8>
 8002ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bac:	d00c      	beq.n	8002bc8 <UART_SetConfig+0x2a0>
 8002bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bb2:	d815      	bhi.n	8002be0 <UART_SetConfig+0x2b8>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <UART_SetConfig+0x298>
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bbc:	d008      	beq.n	8002bd0 <UART_SetConfig+0x2a8>
 8002bbe:	e00f      	b.n	8002be0 <UART_SetConfig+0x2b8>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bc6:	e022      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bce:	e01e      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd6:	e01a      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002bd8:	2308      	movs	r3, #8
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bde:	e016      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002be0:	2310      	movs	r3, #16
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002be6:	e012      	b.n	8002c0e <UART_SetConfig+0x2e6>
 8002be8:	efff69f3 	.word	0xefff69f3
 8002bec:	40008000 	.word	0x40008000
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40004800 	.word	0x40004800
 8002c00:	40004c00 	.word	0x40004c00
 8002c04:	40005000 	.word	0x40005000
 8002c08:	2310      	movs	r3, #16
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a9f      	ldr	r2, [pc, #636]	@ (8002e90 <UART_SetConfig+0x568>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d17a      	bne.n	8002d0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d824      	bhi.n	8002c6a <UART_SetConfig+0x342>
 8002c20:	a201      	add	r2, pc, #4	@ (adr r2, 8002c28 <UART_SetConfig+0x300>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c4d 	.word	0x08002c4d
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c55 	.word	0x08002c55
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c5b 	.word	0x08002c5b
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c6b 	.word	0x08002c6b
 8002c44:	08002c6b 	.word	0x08002c6b
 8002c48:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f7ff f84c 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002c50:	61f8      	str	r0, [r7, #28]
        break;
 8002c52:	e010      	b.n	8002c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b8f      	ldr	r3, [pc, #572]	@ (8002e94 <UART_SetConfig+0x56c>)
 8002c56:	61fb      	str	r3, [r7, #28]
        break;
 8002c58:	e00d      	b.n	8002c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7fe ffad 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002c5e:	61f8      	str	r0, [r7, #28]
        break;
 8002c60:	e009      	b.n	8002c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c66:	61fb      	str	r3, [r7, #28]
        break;
 8002c68:	e005      	b.n	8002c76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80fb 	beq.w	8002e74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d305      	bcc.n	8002c9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d903      	bls.n	8002ca2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ca0:	e0e8      	b.n	8002e74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	461c      	mov	r4, r3
 8002ca8:	4615      	mov	r5, r2
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	022b      	lsls	r3, r5, #8
 8002cb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cb8:	0222      	lsls	r2, r4, #8
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	6849      	ldr	r1, [r1, #4]
 8002cbe:	0849      	lsrs	r1, r1, #1
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	4688      	mov	r8, r1
 8002cc4:	4681      	mov	r9, r0
 8002cc6:	eb12 0a08 	adds.w	sl, r2, r8
 8002cca:	eb43 0b09 	adc.w	fp, r3, r9
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cdc:	4650      	mov	r0, sl
 8002cde:	4659      	mov	r1, fp
 8002ce0:	f7fd fa7e 	bl	80001e0 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cf2:	d308      	bcc.n	8002d06 <UART_SetConfig+0x3de>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cfa:	d204      	bcs.n	8002d06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e0b6      	b.n	8002e74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d0c:	e0b2      	b.n	8002e74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d16:	d15e      	bne.n	8002dd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002d18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d828      	bhi.n	8002d72 <UART_SetConfig+0x44a>
 8002d20:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <UART_SetConfig+0x400>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d4d 	.word	0x08002d4d
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08002d73 	.word	0x08002d73
 8002d38:	08002d63 	.word	0x08002d63
 8002d3c:	08002d73 	.word	0x08002d73
 8002d40:	08002d73 	.word	0x08002d73
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d6b 	.word	0x08002d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d4c:	f7fe ffcc 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002d50:	61f8      	str	r0, [r7, #28]
        break;
 8002d52:	e014      	b.n	8002d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7fe ffde 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002d58:	61f8      	str	r0, [r7, #28]
        break;
 8002d5a:	e010      	b.n	8002d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e94 <UART_SetConfig+0x56c>)
 8002d5e:	61fb      	str	r3, [r7, #28]
        break;
 8002d60:	e00d      	b.n	8002d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d62:	f7fe ff29 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002d66:	61f8      	str	r0, [r7, #28]
        break;
 8002d68:	e009      	b.n	8002d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d6e:	61fb      	str	r3, [r7, #28]
        break;
 8002d70:	e005      	b.n	8002d7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d077      	beq.n	8002e74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005a      	lsls	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	441a      	add	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d916      	bls.n	8002dce <UART_SetConfig+0x4a6>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da6:	d212      	bcs.n	8002dce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f023 030f 	bic.w	r3, r3, #15
 8002db0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	8afb      	ldrh	r3, [r7, #22]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	8afa      	ldrh	r2, [r7, #22]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	e052      	b.n	8002e74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002dd4:	e04e      	b.n	8002e74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d827      	bhi.n	8002e2e <UART_SetConfig+0x506>
 8002dde:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <UART_SetConfig+0x4bc>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	08002e11 	.word	0x08002e11
 8002dec:	08002e19 	.word	0x08002e19
 8002df0:	08002e2f 	.word	0x08002e2f
 8002df4:	08002e1f 	.word	0x08002e1f
 8002df8:	08002e2f 	.word	0x08002e2f
 8002dfc:	08002e2f 	.word	0x08002e2f
 8002e00:	08002e2f 	.word	0x08002e2f
 8002e04:	08002e27 	.word	0x08002e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e08:	f7fe ff6e 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	61f8      	str	r0, [r7, #28]
        break;
 8002e0e:	e014      	b.n	8002e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7fe ff80 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002e14:	61f8      	str	r0, [r7, #28]
        break;
 8002e16:	e010      	b.n	8002e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e18:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <UART_SetConfig+0x56c>)
 8002e1a:	61fb      	str	r3, [r7, #28]
        break;
 8002e1c:	e00d      	b.n	8002e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1e:	f7fe fecb 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002e22:	61f8      	str	r0, [r7, #28]
        break;
 8002e24:	e009      	b.n	8002e3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e2a:	61fb      	str	r3, [r7, #28]
        break;
 8002e2c:	e005      	b.n	8002e3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e38:	bf00      	nop
    }

    if (pclk != 0U)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d019      	beq.n	8002e74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	085a      	lsrs	r2, r3, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d909      	bls.n	8002e6e <UART_SetConfig+0x546>
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e60:	d205      	bcs.n	8002e6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e002      	b.n	8002e74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3728      	adds	r7, #40	@ 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8e:	bf00      	nop
 8002e90:	40008000 	.word	0x40008000
 8002e94:	00f42400 	.word	0x00f42400

08002e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01a      	beq.n	8002fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f96:	d10a      	bne.n	8002fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b098      	sub	sp, #96	@ 0x60
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fec:	f7fd fd9a 	bl	8000b24 <HAL_GetTick>
 8002ff0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d12e      	bne.n	800305e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003000:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f88c 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d021      	beq.n	800305e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800302e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003038:	647b      	str	r3, [r7, #68]	@ 0x44
 800303a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800303e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e6      	bne.n	800301a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e062      	b.n	8003124 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d149      	bne.n	8003100 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800306c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003074:	2200      	movs	r2, #0
 8003076:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f856 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03c      	beq.n	8003100 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	623b      	str	r3, [r7, #32]
   return(result);
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e6      	bne.n	8003086 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3308      	adds	r3, #8
 80030be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3308      	adds	r3, #8
 80030d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030d8:	61fa      	str	r2, [r7, #28]
 80030da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	617b      	str	r3, [r7, #20]
   return(result);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e011      	b.n	8003124 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3758      	adds	r7, #88	@ 0x58
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	e04f      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d04b      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fd fced 	bl	8000b24 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <UART_WaitOnFlagUntilTimeout+0x30>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e04e      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d037      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0xb2>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b80      	cmp	r3, #128	@ 0x80
 8003172:	d034      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0xb2>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b40      	cmp	r3, #64	@ 0x40
 8003178:	d031      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b08      	cmp	r3, #8
 8003186:	d110      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2208      	movs	r2, #8
 800318e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f838 	bl	8003206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2208      	movs	r2, #8
 800319a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e029      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031b8:	d111      	bne.n	80031de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f81e 	bl	8003206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e00f      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4013      	ands	r3, r2
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d0a0      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003206:	b480      	push	{r7}
 8003208:	b095      	sub	sp, #84	@ 0x54
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800322c:	643b      	str	r3, [r7, #64]	@ 0x40
 800322e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800323a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3308      	adds	r3, #8
 8003246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003278:	2b01      	cmp	r3, #1
 800327a:	d118      	bne.n	80032ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	60bb      	str	r3, [r7, #8]
   return(result);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 0310 	bic.w	r3, r3, #16
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6979      	ldr	r1, [r7, #20]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	613b      	str	r3, [r7, #16]
   return(result);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e6      	bne.n	800327c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032c2:	bf00      	nop
 80032c4:	3754      	adds	r7, #84	@ 0x54
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e0:	2b84      	cmp	r3, #132	@ 0x84
 80032e2:	d005      	beq.n	80032f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	3303      	adds	r3, #3
 80032ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003302:	f000 fb75 	bl	80039f0 <vTaskStartScheduler>
  
  return osOK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}

0800330c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af04      	add	r7, sp, #16
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <osThreadCreate+0x54>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01c      	beq.n	8003360 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685c      	ldr	r4, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691e      	ldr	r6, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ffc8 	bl	80032ce <makeFreeRtosPriority>
 800333e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003348:	9202      	str	r2, [sp, #8]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	9100      	str	r1, [sp, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4632      	mov	r2, r6
 8003352:	4629      	mov	r1, r5
 8003354:	4620      	mov	r0, r4
 8003356:	f000 f8ed 	bl	8003534 <xTaskCreateStatic>
 800335a:	4603      	mov	r3, r0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e01c      	b.n	800339a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685c      	ldr	r4, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800336c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ffaa 	bl	80032ce <makeFreeRtosPriority>
 800337a:	4602      	mov	r2, r0
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	9200      	str	r2, [sp, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4632      	mov	r2, r6
 8003388:	4629      	mov	r1, r5
 800338a:	4620      	mov	r0, r4
 800338c:	f000 f932 	bl	80035f4 <xTaskCreate>
 8003390:	4603      	mov	r3, r0
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <osDelay+0x16>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	e000      	b.n	80033bc <osDelay+0x18>
 80033ba:	2301      	movs	r3, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fae1 	bl	8003984 <vTaskDelay>
  
  return osOK;
 80033c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f103 0208 	add.w	r2, r3, #8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0208 	add.w	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f103 0208 	add.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d103      	bne.n	800348e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e00c      	b.n	80034a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3308      	adds	r3, #8
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e002      	b.n	800349c <vListInsert+0x2e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d2f6      	bcs.n	8003496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6852      	ldr	r2, [r2, #4]
 8003500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d103      	bne.n	8003514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	@ 0x38
 8003538:	af04      	add	r7, sp, #16
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	61fb      	str	r3, [r7, #28]
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800357e:	2354      	movs	r3, #84	@ 0x54
 8003580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b54      	cmp	r3, #84	@ 0x54
 8003586:	d00b      	beq.n	80035a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61bb      	str	r3, [r7, #24]
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01e      	beq.n	80035e6 <xTaskCreateStatic+0xb2>
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01b      	beq.n	80035e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035c0:	2300      	movs	r3, #0
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	9302      	str	r3, [sp, #8]
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f850 	bl	800367e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035e0:	f000 f8d6 	bl	8003790 <prvAddNewTaskToReadyList>
 80035e4:	e001      	b.n	80035ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ea:	697b      	ldr	r3, [r7, #20]
	}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3728      	adds	r7, #40	@ 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	@ 0x30
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 ff7d 	bl	8004508 <pvPortMalloc>
 800360e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003616:	2054      	movs	r0, #84	@ 0x54
 8003618:	f000 ff76 	bl	8004508 <pvPortMalloc>
 800361c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
 800362a:	e005      	b.n	8003638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800362c:	6978      	ldr	r0, [r7, #20]
 800362e:	f001 f839 	bl	80046a4 <vPortFree>
 8003632:	e001      	b.n	8003638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d017      	beq.n	800366e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	2300      	movs	r3, #0
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9302      	str	r3, [sp, #8]
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f80e 	bl	800367e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003662:	69f8      	ldr	r0, [r7, #28]
 8003664:	f000 f894 	bl	8003790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003668:	2301      	movs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e002      	b.n	8003674 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003674:	69bb      	ldr	r3, [r7, #24]
	}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b088      	sub	sp, #32
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003696:	3b01      	subs	r3, #1
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f023 0307 	bic.w	r3, r3, #7
 80036a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	617b      	str	r3, [r7, #20]
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01f      	beq.n	800370e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e012      	b.n	80036fa <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	7819      	ldrb	r1, [r3, #0]
 80036dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	3334      	adds	r3, #52	@ 0x34
 80036e4:	460a      	mov	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d9e9      	bls.n	80036d4 <prvInitialiseNewTask+0x56>
 8003700:	e000      	b.n	8003704 <prvInitialiseNewTask+0x86>
			{
				break;
 8003702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800370c:	e003      	b.n	8003716 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	2b06      	cmp	r3, #6
 800371a:	d901      	bls.n	8003720 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800371c:	2306      	movs	r3, #6
 800371e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003724:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	2200      	movs	r2, #0
 8003730:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fe68 	bl	800340c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	3318      	adds	r3, #24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe63 	bl	800340c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	f1c3 0207 	rsb	r2, r3, #7
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	2200      	movs	r2, #0
 8003760:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	69b8      	ldr	r0, [r7, #24]
 8003770:	f000 fcbc 	bl	80040ec <pxPortInitialiseStack>
 8003774:	4602      	mov	r2, r0
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003786:	bf00      	nop
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003798:	f000 fdd6 	bl	8004348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800379c:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <prvAddNewTaskToReadyList+0xb8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a29      	ldr	r2, [pc, #164]	@ (8003848 <prvAddNewTaskToReadyList+0xb8>)
 80037a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037a6:	4b29      	ldr	r3, [pc, #164]	@ (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ae:	4a27      	ldr	r2, [pc, #156]	@ (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b4:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <prvAddNewTaskToReadyList+0xb8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d110      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037bc:	f000 fb54 	bl	8003e68 <prvInitialiseTaskLists>
 80037c0:	e00d      	b.n	80037de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037c2:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <prvAddNewTaskToReadyList+0xc0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ca:	4b20      	ldr	r3, [pc, #128]	@ (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d802      	bhi.n	80037de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037d8:	4a1c      	ldr	r2, [pc, #112]	@ (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a15      	ldr	r2, [pc, #84]	@ (800385c <prvAddNewTaskToReadyList+0xcc>)
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff fe08 	bl	8003426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003816:	f000 fdc9 	bl	80043ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <prvAddNewTaskToReadyList+0xc0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <prvAddNewTaskToReadyList+0xbc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <prvAddNewTaskToReadyList+0xd0>)
 8003832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000418 	.word	0x20000418
 800384c:	20000318 	.word	0x20000318
 8003850:	20000424 	.word	0x20000424
 8003854:	20000434 	.word	0x20000434
 8003858:	20000420 	.word	0x20000420
 800385c:	2000031c 	.word	0x2000031c
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800386c:	f000 fd6c 	bl	8004348 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <vTaskDelete+0x18>
 8003876:	4b39      	ldr	r3, [pc, #228]	@ (800395c <vTaskDelete+0xf8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e000      	b.n	800387e <vTaskDelete+0x1a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3304      	adds	r3, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fe2b 	bl	80034e0 <uxListRemove>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d115      	bne.n	80038bc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003894:	4932      	ldr	r1, [pc, #200]	@ (8003960 <vTaskDelete+0xfc>)
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <vTaskDelete+0x58>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038aa:	2201      	movs	r2, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43da      	mvns	r2, r3
 80038b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003964 <vTaskDelete+0x100>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4013      	ands	r3, r2
 80038b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003964 <vTaskDelete+0x100>)
 80038ba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3318      	adds	r3, #24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fe09 	bl	80034e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80038ce:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <vTaskDelete+0x104>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a24      	ldr	r2, [pc, #144]	@ (8003968 <vTaskDelete+0x104>)
 80038d6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80038d8:	4b20      	ldr	r3, [pc, #128]	@ (800395c <vTaskDelete+0xf8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d10b      	bne.n	80038fa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4820      	ldr	r0, [pc, #128]	@ (800396c <vTaskDelete+0x108>)
 80038ea:	f7ff fd9c 	bl	8003426 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80038ee:	4b20      	ldr	r3, [pc, #128]	@ (8003970 <vTaskDelete+0x10c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <vTaskDelete+0x10c>)
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e009      	b.n	800390e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <vTaskDelete+0x110>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3b01      	subs	r3, #1
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <vTaskDelete+0x110>)
 8003902:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fb1d 	bl	8003f44 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800390a:	f000 fb4b 	bl	8003fa4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800390e:	f000 fd4d 	bl	80043ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003912:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <vTaskDelete+0x114>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01c      	beq.n	8003954 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <vTaskDelete+0xf8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d117      	bne.n	8003954 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003924:	4b15      	ldr	r3, [pc, #84]	@ (800397c <vTaskDelete+0x118>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <vTaskDelete+0xe0>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60bb      	str	r3, [r7, #8]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003944:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <vTaskDelete+0x11c>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000318 	.word	0x20000318
 8003960:	2000031c 	.word	0x2000031c
 8003964:	20000420 	.word	0x20000420
 8003968:	20000434 	.word	0x20000434
 800396c:	200003ec 	.word	0x200003ec
 8003970:	20000400 	.word	0x20000400
 8003974:	20000418 	.word	0x20000418
 8003978:	20000424 	.word	0x20000424
 800397c:	20000440 	.word	0x20000440
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003996:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <vTaskDelay+0x64>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <vTaskDelay+0x32>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60bb      	str	r3, [r7, #8]
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039b6:	f000 f87d 	bl	8003ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039ba:	2100      	movs	r1, #0
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fb2f 	bl	8004020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039c2:	f000 f885 	bl	8003ad0 <xTaskResumeAll>
 80039c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039ce:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <vTaskDelay+0x68>)
 80039d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000440 	.word	0x20000440
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039fe:	463a      	mov	r2, r7
 8003a00:	1d39      	adds	r1, r7, #4
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fc fd80 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	9202      	str	r2, [sp, #8]
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	491f      	ldr	r1, [pc, #124]	@ (8003a9c <vTaskStartScheduler+0xac>)
 8003a20:	481f      	ldr	r0, [pc, #124]	@ (8003aa0 <vTaskStartScheduler+0xb0>)
 8003a22:	f7ff fd87 	bl	8003534 <xTaskCreateStatic>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <vTaskStartScheduler+0xb4>)
 8003a2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <vTaskStartScheduler+0xb4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e001      	b.n	8003a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d116      	bne.n	8003a72 <vTaskStartScheduler+0x82>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	613b      	str	r3, [r7, #16]
}
 8003a56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <vTaskStartScheduler+0xb8>)
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a60:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <vTaskStartScheduler+0xbc>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <vTaskStartScheduler+0xc0>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a6c:	f000 fbc8 	bl	8004200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a70:	e00f      	b.n	8003a92 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d10b      	bne.n	8003a92 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60fb      	str	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <vTaskStartScheduler+0x9e>
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08004a30 	.word	0x08004a30
 8003aa0:	08003e39 	.word	0x08003e39
 8003aa4:	2000043c 	.word	0x2000043c
 8003aa8:	20000438 	.word	0x20000438
 8003aac:	20000424 	.word	0x20000424
 8003ab0:	2000041c 	.word	0x2000041c

08003ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <vTaskSuspendAll+0x18>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <vTaskSuspendAll+0x18>)
 8003ac0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000440 	.word	0x20000440

08003ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ade:	4b42      	ldr	r3, [pc, #264]	@ (8003be8 <xTaskResumeAll+0x118>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <xTaskResumeAll+0x2e>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	603b      	str	r3, [r7, #0]
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	e7fd      	b.n	8003afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003afe:	f000 fc23 	bl	8004348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b02:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <xTaskResumeAll+0x118>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a37      	ldr	r2, [pc, #220]	@ (8003be8 <xTaskResumeAll+0x118>)
 8003b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b0c:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <xTaskResumeAll+0x118>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d161      	bne.n	8003bd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b14:	4b35      	ldr	r3, [pc, #212]	@ (8003bec <xTaskResumeAll+0x11c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d05d      	beq.n	8003bd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1c:	e02e      	b.n	8003b7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b1e:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <xTaskResumeAll+0x120>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fcd8 	bl	80034e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fcd3 	bl	80034e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	2201      	movs	r2, #1
 8003b40:	409a      	lsls	r2, r3
 8003b42:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf4 <xTaskResumeAll+0x124>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <xTaskResumeAll+0x124>)
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <xTaskResumeAll+0x128>)
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f7ff fc5f 	bl	8003426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <xTaskResumeAll+0x12c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b76:	4b22      	ldr	r3, [pc, #136]	@ (8003c00 <xTaskResumeAll+0x130>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf0 <xTaskResumeAll+0x120>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1cc      	bne.n	8003b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b8a:	f000 fa0b 	bl	8003fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <xTaskResumeAll+0x134>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b9a:	f000 f837 	bl	8003c0c <xTaskIncrementTick>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ba4:	4b16      	ldr	r3, [pc, #88]	@ (8003c00 <xTaskResumeAll+0x130>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f1      	bne.n	8003b9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <xTaskResumeAll+0x134>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bbc:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <xTaskResumeAll+0x130>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <xTaskResumeAll+0x138>)
 8003bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bd8:	f000 fbe8 	bl	80043ac <vPortExitCritical>

	return xAlreadyYielded;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000440 	.word	0x20000440
 8003bec:	20000418 	.word	0x20000418
 8003bf0:	200003d8 	.word	0x200003d8
 8003bf4:	20000420 	.word	0x20000420
 8003bf8:	2000031c 	.word	0x2000031c
 8003bfc:	20000318 	.word	0x20000318
 8003c00:	2000042c 	.word	0x2000042c
 8003c04:	20000428 	.word	0x20000428
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c16:	4b4f      	ldr	r3, [pc, #316]	@ (8003d54 <xTaskIncrementTick+0x148>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 808f 	bne.w	8003d3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c20:	4b4d      	ldr	r3, [pc, #308]	@ (8003d58 <xTaskIncrementTick+0x14c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c28:	4a4b      	ldr	r2, [pc, #300]	@ (8003d58 <xTaskIncrementTick+0x14c>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d121      	bne.n	8003c78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c34:	4b49      	ldr	r3, [pc, #292]	@ (8003d5c <xTaskIncrementTick+0x150>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	603b      	str	r3, [r7, #0]
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	e7fd      	b.n	8003c52 <xTaskIncrementTick+0x46>
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <xTaskIncrementTick+0x150>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	4b40      	ldr	r3, [pc, #256]	@ (8003d60 <xTaskIncrementTick+0x154>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3e      	ldr	r2, [pc, #248]	@ (8003d5c <xTaskIncrementTick+0x150>)
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4a3e      	ldr	r2, [pc, #248]	@ (8003d60 <xTaskIncrementTick+0x154>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d64 <xTaskIncrementTick+0x158>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	4a3c      	ldr	r2, [pc, #240]	@ (8003d64 <xTaskIncrementTick+0x158>)
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	f000 f996 	bl	8003fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c78:	4b3b      	ldr	r3, [pc, #236]	@ (8003d68 <xTaskIncrementTick+0x15c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d348      	bcc.n	8003d14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c82:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <xTaskIncrementTick+0x150>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8c:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <xTaskIncrementTick+0x15c>)
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c92:	601a      	str	r2, [r3, #0]
					break;
 8003c94:	e03e      	b.n	8003d14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c96:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <xTaskIncrementTick+0x150>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d203      	bcs.n	8003cb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cae:	4a2e      	ldr	r2, [pc, #184]	@ (8003d68 <xTaskIncrementTick+0x15c>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cb4:	e02e      	b.n	8003d14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fc10 	bl	80034e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3318      	adds	r3, #24
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fc07 	bl	80034e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <xTaskIncrementTick+0x160>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	4a22      	ldr	r2, [pc, #136]	@ (8003d6c <xTaskIncrementTick+0x160>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d70 <xTaskIncrementTick+0x164>)
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f7ff fb93 	bl	8003426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d04:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <xTaskIncrementTick+0x168>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3b9      	bcc.n	8003c82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d12:	e7b6      	b.n	8003c82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d14:	4b17      	ldr	r3, [pc, #92]	@ (8003d74 <xTaskIncrementTick+0x168>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1a:	4915      	ldr	r1, [pc, #84]	@ (8003d70 <xTaskIncrementTick+0x164>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d901      	bls.n	8003d30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d30:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <xTaskIncrementTick+0x16c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e004      	b.n	8003d48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <xTaskIncrementTick+0x170>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <xTaskIncrementTick+0x170>)
 8003d46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d48:	697b      	ldr	r3, [r7, #20]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000440 	.word	0x20000440
 8003d58:	2000041c 	.word	0x2000041c
 8003d5c:	200003d0 	.word	0x200003d0
 8003d60:	200003d4 	.word	0x200003d4
 8003d64:	20000430 	.word	0x20000430
 8003d68:	20000438 	.word	0x20000438
 8003d6c:	20000420 	.word	0x20000420
 8003d70:	2000031c 	.word	0x2000031c
 8003d74:	20000318 	.word	0x20000318
 8003d78:	2000042c 	.word	0x2000042c
 8003d7c:	20000428 	.word	0x20000428

08003d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d86:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <vTaskSwitchContext+0xa4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d8e:	4b26      	ldr	r3, [pc, #152]	@ (8003e28 <vTaskSwitchContext+0xa8>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d94:	e040      	b.n	8003e18 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003d96:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <vTaskSwitchContext+0xa8>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9c:	4b23      	ldr	r3, [pc, #140]	@ (8003e2c <vTaskSwitchContext+0xac>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003daa:	7afb      	ldrb	r3, [r7, #11]
 8003dac:	f1c3 031f 	rsb	r3, r3, #31
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	491f      	ldr	r1, [pc, #124]	@ (8003e30 <vTaskSwitchContext+0xb0>)
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <vTaskSwitchContext+0x5e>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	607b      	str	r3, [r7, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <vTaskSwitchContext+0x5a>
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4a11      	ldr	r2, [pc, #68]	@ (8003e30 <vTaskSwitchContext+0xb0>)
 8003dea:	4413      	add	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d104      	bne.n	8003e0e <vTaskSwitchContext+0x8e>
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <vTaskSwitchContext+0xb4>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20000440 	.word	0x20000440
 8003e28:	2000042c 	.word	0x2000042c
 8003e2c:	20000420 	.word	0x20000420
 8003e30:	2000031c 	.word	0x2000031c
 8003e34:	20000318 	.word	0x20000318

08003e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e40:	f000 f852 	bl	8003ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <prvIdleTask+0x28>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d9f9      	bls.n	8003e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <prvIdleTask+0x2c>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e5c:	e7f0      	b.n	8003e40 <prvIdleTask+0x8>
 8003e5e:	bf00      	nop
 8003e60:	2000031c 	.word	0x2000031c
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	e00c      	b.n	8003e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <prvInitialiseTaskLists+0x60>)
 8003e80:	4413      	add	r3, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff faa2 	bl	80033cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b06      	cmp	r3, #6
 8003e92:	d9ef      	bls.n	8003e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e94:	480d      	ldr	r0, [pc, #52]	@ (8003ecc <prvInitialiseTaskLists+0x64>)
 8003e96:	f7ff fa99 	bl	80033cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e9a:	480d      	ldr	r0, [pc, #52]	@ (8003ed0 <prvInitialiseTaskLists+0x68>)
 8003e9c:	f7ff fa96 	bl	80033cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ea0:	480c      	ldr	r0, [pc, #48]	@ (8003ed4 <prvInitialiseTaskLists+0x6c>)
 8003ea2:	f7ff fa93 	bl	80033cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ea6:	480c      	ldr	r0, [pc, #48]	@ (8003ed8 <prvInitialiseTaskLists+0x70>)
 8003ea8:	f7ff fa90 	bl	80033cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003eac:	480b      	ldr	r0, [pc, #44]	@ (8003edc <prvInitialiseTaskLists+0x74>)
 8003eae:	f7ff fa8d 	bl	80033cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <prvInitialiseTaskLists+0x78>)
 8003eb4:	4a05      	ldr	r2, [pc, #20]	@ (8003ecc <prvInitialiseTaskLists+0x64>)
 8003eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <prvInitialiseTaskLists+0x7c>)
 8003eba:	4a05      	ldr	r2, [pc, #20]	@ (8003ed0 <prvInitialiseTaskLists+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000031c 	.word	0x2000031c
 8003ecc:	200003a8 	.word	0x200003a8
 8003ed0:	200003bc 	.word	0x200003bc
 8003ed4:	200003d8 	.word	0x200003d8
 8003ed8:	200003ec 	.word	0x200003ec
 8003edc:	20000404 	.word	0x20000404
 8003ee0:	200003d0 	.word	0x200003d0
 8003ee4:	200003d4 	.word	0x200003d4

08003ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eee:	e019      	b.n	8003f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ef0:	f000 fa2a 	bl	8004348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <prvCheckTasksWaitingTermination+0x50>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff faed 	bl	80034e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <prvCheckTasksWaitingTermination+0x54>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f3c <prvCheckTasksWaitingTermination+0x54>)
 8003f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <prvCheckTasksWaitingTermination+0x58>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	4a0a      	ldr	r2, [pc, #40]	@ (8003f40 <prvCheckTasksWaitingTermination+0x58>)
 8003f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f1a:	f000 fa47 	bl	80043ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f810 	bl	8003f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f24:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <prvCheckTasksWaitingTermination+0x58>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e1      	bne.n	8003ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200003ec 	.word	0x200003ec
 8003f3c:	20000418 	.word	0x20000418
 8003f40:	20000400 	.word	0x20000400

08003f44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fba2 	bl	80046a4 <vPortFree>
				vPortFree( pxTCB );
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fb9f 	bl	80046a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f66:	e019      	b.n	8003f9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d103      	bne.n	8003f7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb96 	bl	80046a4 <vPortFree>
	}
 8003f78:	e010      	b.n	8003f9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d00b      	beq.n	8003f9c <prvDeleteTCB+0x58>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60fb      	str	r3, [r7, #12]
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <prvDeleteTCB+0x54>
	}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003faa:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <prvResetNextTaskUnblockTime+0x38>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fbc:	e008      	b.n	8003fd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <prvResetNextTaskUnblockTime+0x38>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	200003d0 	.word	0x200003d0
 8003fe0:	20000438 	.word	0x20000438

08003fe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <xTaskGetSchedulerState+0x34>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	e008      	b.n	800400a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff8:	4b08      	ldr	r3, [pc, #32]	@ (800401c <xTaskGetSchedulerState+0x38>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004000:	2302      	movs	r3, #2
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	e001      	b.n	800400a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800400a:	687b      	ldr	r3, [r7, #4]
	}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	20000424 	.word	0x20000424
 800401c:	20000440 	.word	0x20000440

08004020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800402a:	4b29      	ldr	r3, [pc, #164]	@ (80040d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004030:	4b28      	ldr	r3, [pc, #160]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3304      	adds	r3, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fa52 	bl	80034e0 <uxListRemove>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004042:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	2201      	movs	r2, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43da      	mvns	r2, r3
 8004050:	4b21      	ldr	r3, [pc, #132]	@ (80040d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4013      	ands	r3, r2
 8004056:	4a20      	ldr	r2, [pc, #128]	@ (80040d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004058:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d10a      	bne.n	8004078 <prvAddCurrentTaskToDelayedList+0x58>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004068:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	481a      	ldr	r0, [pc, #104]	@ (80040dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004072:	f7ff f9d8 	bl	8003426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004076:	e026      	b.n	80040c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d209      	bcs.n	80040a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004090:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f7ff f9e6 	bl	800346e <vListInsert>
}
 80040a2:	e010      	b.n	80040c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a4:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff f9dc 	bl	800346e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040b6:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d202      	bcs.n	80040c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040c0:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000041c 	.word	0x2000041c
 80040d4:	20000318 	.word	0x20000318
 80040d8:	20000420 	.word	0x20000420
 80040dc:	20000404 	.word	0x20000404
 80040e0:	200003d4 	.word	0x200003d4
 80040e4:	200003d0 	.word	0x200003d0
 80040e8:	20000438 	.word	0x20000438

080040ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b04      	subs	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3b04      	subs	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b04      	subs	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800411c:	4a0c      	ldr	r2, [pc, #48]	@ (8004150 <pxPortInitialiseStack+0x64>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b14      	subs	r3, #20
 8004126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3b04      	subs	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f06f 0202 	mvn.w	r2, #2
 800413a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3b20      	subs	r3, #32
 8004140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	08004155 	.word	0x08004155

08004154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800415e:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <prvTaskExitError+0x58>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d00b      	beq.n	8004180 <prvTaskExitError+0x2c>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60fb      	str	r3, [r7, #12]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <prvTaskExitError+0x28>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	60bb      	str	r3, [r7, #8]
}
 8004192:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004194:	bf00      	nop
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0fc      	beq.n	8004196 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	2000000c 	.word	0x2000000c

080041b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041b0:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <pxCurrentTCBConst2>)
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	6808      	ldr	r0, [r1, #0]
 80041b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	f380 8809 	msr	PSP, r0
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	4770      	bx	lr
 80041cc:	f3af 8000 	nop.w

080041d0 <pxCurrentTCBConst2>:
 80041d0:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop

080041d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041d8:	4808      	ldr	r0, [pc, #32]	@ (80041fc <prvPortStartFirstTask+0x24>)
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	6800      	ldr	r0, [r0, #0]
 80041de:	f380 8808 	msr	MSP, r0
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8814 	msr	CONTROL, r0
 80041ea:	b662      	cpsie	i
 80041ec:	b661      	cpsie	f
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	df00      	svc	0
 80041f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041fa:	bf00      	nop
 80041fc:	e000ed08 	.word	0xe000ed08

08004200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004206:	4b47      	ldr	r3, [pc, #284]	@ (8004324 <xPortStartScheduler+0x124>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a47      	ldr	r2, [pc, #284]	@ (8004328 <xPortStartScheduler+0x128>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10b      	bne.n	8004228 <xPortStartScheduler+0x28>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	60fb      	str	r3, [r7, #12]
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004228:	4b3e      	ldr	r3, [pc, #248]	@ (8004324 <xPortStartScheduler+0x124>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3f      	ldr	r2, [pc, #252]	@ (800432c <xPortStartScheduler+0x12c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10b      	bne.n	800424a <xPortStartScheduler+0x4a>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	613b      	str	r3, [r7, #16]
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	e7fd      	b.n	8004246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800424a:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <xPortStartScheduler+0x130>)
 800424c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	22ff      	movs	r2, #255	@ 0xff
 800425a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <xPortStartScheduler+0x134>)
 8004270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <xPortStartScheduler+0x138>)
 8004274:	2207      	movs	r2, #7
 8004276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004278:	e009      	b.n	800428e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800427a:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <xPortStartScheduler+0x138>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3b01      	subs	r3, #1
 8004280:	4a2d      	ldr	r2, [pc, #180]	@ (8004338 <xPortStartScheduler+0x138>)
 8004282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d0ef      	beq.n	800427a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800429a:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <xPortStartScheduler+0x138>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1c3 0307 	rsb	r3, r3, #7
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d00b      	beq.n	80042be <xPortStartScheduler+0xbe>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042be:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <xPortStartScheduler+0x138>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004338 <xPortStartScheduler+0x138>)
 80042c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <xPortStartScheduler+0x138>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042d0:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <xPortStartScheduler+0x138>)
 80042d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042dc:	4b17      	ldr	r3, [pc, #92]	@ (800433c <xPortStartScheduler+0x13c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	@ (800433c <xPortStartScheduler+0x13c>)
 80042e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042e8:	4b14      	ldr	r3, [pc, #80]	@ (800433c <xPortStartScheduler+0x13c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a13      	ldr	r2, [pc, #76]	@ (800433c <xPortStartScheduler+0x13c>)
 80042ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042f4:	f000 f8da 	bl	80044ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042f8:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <xPortStartScheduler+0x140>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042fe:	f000 f8f9 	bl	80044f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004302:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <xPortStartScheduler+0x144>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a0f      	ldr	r2, [pc, #60]	@ (8004344 <xPortStartScheduler+0x144>)
 8004308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800430c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800430e:	f7ff ff63 	bl	80041d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004312:	f7ff fd35 	bl	8003d80 <vTaskSwitchContext>
	prvTaskExitError();
 8004316:	f7ff ff1d 	bl	8004154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	e000ed00 	.word	0xe000ed00
 8004328:	410fc271 	.word	0x410fc271
 800432c:	410fc270 	.word	0x410fc270
 8004330:	e000e400 	.word	0xe000e400
 8004334:	20000444 	.word	0x20000444
 8004338:	20000448 	.word	0x20000448
 800433c:	e000ed20 	.word	0xe000ed20
 8004340:	2000000c 	.word	0x2000000c
 8004344:	e000ef34 	.word	0xe000ef34

08004348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
}
 8004360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <vPortEnterCritical+0x5c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <vPortEnterCritical+0x5c>)
 800436a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800436c:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <vPortEnterCritical+0x5c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d110      	bne.n	8004396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004374:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <vPortEnterCritical+0x60>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <vPortEnterCritical+0x4e>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	603b      	str	r3, [r7, #0]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <vPortEnterCritical+0x4a>
	}
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <vPortExitCritical+0x26>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <vPortExitCritical+0x50>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <vPortExitCritical+0x50>)
 80043da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043dc:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <vPortExitCritical+0x50>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <vPortExitCritical+0x44>
 80043e4:	2300      	movs	r3, #0
 80043e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	2000000c 	.word	0x2000000c

08004400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f01e 0f10 	tst.w	lr, #16
 8004410:	bf08      	it	eq
 8004412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	6010      	str	r0, [r2, #0]
 800441c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004424:	f380 8811 	msr	BASEPRI, r0
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f7ff fca6 	bl	8003d80 <vTaskSwitchContext>
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f380 8811 	msr	BASEPRI, r0
 800443c:	bc09      	pop	{r0, r3}
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	f01e 0f10 	tst.w	lr, #16
 800444a:	bf08      	it	eq
 800444c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004450:	f380 8809 	msr	PSP, r0
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst>:
 8004460:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
}
 8004480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004482:	f7ff fbc3 	bl	8003c0c <xTaskIncrementTick>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <xPortSysTickHandler+0x40>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f383 8811 	msr	BASEPRI, r3
}
 800449e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <vPortSetupTimerInterrupt+0x38>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <vPortSetupTimerInterrupt+0x3c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <vPortSetupTimerInterrupt+0x40>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <vPortSetupTimerInterrupt+0x44>)
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ce:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e010 	.word	0xe000e010
 80044e4:	e000e018 	.word	0xe000e018
 80044e8:	20000000 	.word	0x20000000
 80044ec:	10624dd3 	.word	0x10624dd3
 80044f0:	e000e014 	.word	0xe000e014

080044f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004504 <vPortEnableVFP+0x10>
 80044f8:	6801      	ldr	r1, [r0, #0]
 80044fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044fe:	6001      	str	r1, [r0, #0]
 8004500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004502:	bf00      	nop
 8004504:	e000ed88 	.word	0xe000ed88

08004508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	@ 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004514:	f7ff face 	bl	8003ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004518:	4b5c      	ldr	r3, [pc, #368]	@ (800468c <pvPortMalloc+0x184>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004520:	f000 f924 	bl	800476c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004524:	4b5a      	ldr	r3, [pc, #360]	@ (8004690 <pvPortMalloc+0x188>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 8095 	bne.w	800465c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01e      	beq.n	8004576 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004538:	2208      	movs	r2, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f023 0307 	bic.w	r3, r3, #7
 8004550:	3308      	adds	r3, #8
 8004552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <pvPortMalloc+0x6e>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	617b      	str	r3, [r7, #20]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d06f      	beq.n	800465c <pvPortMalloc+0x154>
 800457c:	4b45      	ldr	r3, [pc, #276]	@ (8004694 <pvPortMalloc+0x18c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d86a      	bhi.n	800465c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004586:	4b44      	ldr	r3, [pc, #272]	@ (8004698 <pvPortMalloc+0x190>)
 8004588:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800458a:	4b43      	ldr	r3, [pc, #268]	@ (8004698 <pvPortMalloc+0x190>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004590:	e004      	b.n	800459c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d903      	bls.n	80045ae <pvPortMalloc+0xa6>
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f1      	bne.n	8004592 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045ae:	4b37      	ldr	r3, [pc, #220]	@ (800468c <pvPortMalloc+0x184>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d051      	beq.n	800465c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2208      	movs	r2, #8
 80045be:	4413      	add	r3, r2
 80045c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	2308      	movs	r3, #8
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d920      	bls.n	800461c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <pvPortMalloc+0xfc>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	613b      	str	r3, [r7, #16]
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004616:	69b8      	ldr	r0, [r7, #24]
 8004618:	f000 f90a 	bl	8004830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800461c:	4b1d      	ldr	r3, [pc, #116]	@ (8004694 <pvPortMalloc+0x18c>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <pvPortMalloc+0x18c>)
 8004628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800462a:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <pvPortMalloc+0x18c>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <pvPortMalloc+0x194>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d203      	bcs.n	800463e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004636:	4b17      	ldr	r3, [pc, #92]	@ (8004694 <pvPortMalloc+0x18c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	@ (800469c <pvPortMalloc+0x194>)
 800463c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <pvPortMalloc+0x188>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	431a      	orrs	r2, r3
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004652:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <pvPortMalloc+0x198>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <pvPortMalloc+0x198>)
 800465a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800465c:	f7ff fa38 	bl	8003ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <pvPortMalloc+0x17a>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60fb      	str	r3, [r7, #12]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <pvPortMalloc+0x176>
	return pvReturn;
 8004682:	69fb      	ldr	r3, [r7, #28]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3728      	adds	r7, #40	@ 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2000100c 	.word	0x2000100c
 8004690:	20001020 	.word	0x20001020
 8004694:	20001010 	.word	0x20001010
 8004698:	20001004 	.word	0x20001004
 800469c:	20001014 	.word	0x20001014
 80046a0:	20001018 	.word	0x20001018

080046a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d04f      	beq.n	8004756 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046b6:	2308      	movs	r3, #8
 80046b8:	425b      	negs	r3, r3
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4413      	add	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	4b25      	ldr	r3, [pc, #148]	@ (8004760 <vPortFree+0xbc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <vPortFree+0x46>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	60fb      	str	r3, [r7, #12]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <vPortFree+0x66>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60bb      	str	r3, [r7, #8]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <vPortFree+0xbc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01e      	beq.n	8004756 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11a      	bne.n	8004756 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <vPortFree+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	43db      	mvns	r3, r3
 800472a:	401a      	ands	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004730:	f7ff f9c0 	bl	8003ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <vPortFree+0xc0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4413      	add	r3, r2
 800473e:	4a09      	ldr	r2, [pc, #36]	@ (8004764 <vPortFree+0xc0>)
 8004740:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004742:	6938      	ldr	r0, [r7, #16]
 8004744:	f000 f874 	bl	8004830 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004748:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <vPortFree+0xc4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	4a06      	ldr	r2, [pc, #24]	@ (8004768 <vPortFree+0xc4>)
 8004750:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004752:	f7ff f9bd 	bl	8003ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004756:	bf00      	nop
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20001020 	.word	0x20001020
 8004764:	20001010 	.word	0x20001010
 8004768:	2000101c 	.word	0x2000101c

0800476c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004772:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004778:	4b27      	ldr	r3, [pc, #156]	@ (8004818 <prvHeapInit+0xac>)
 800477a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3307      	adds	r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0307 	bic.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <prvHeapInit+0xac>)
 800479c:	4413      	add	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047a4:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <prvHeapInit+0xb0>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047aa:	4b1c      	ldr	r3, [pc, #112]	@ (800481c <prvHeapInit+0xb0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047b8:	2208      	movs	r2, #8
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a15      	ldr	r2, [pc, #84]	@ (8004820 <prvHeapInit+0xb4>)
 80047cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047ce:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <prvHeapInit+0xb4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2200      	movs	r2, #0
 80047d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047d6:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <prvHeapInit+0xb4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	1ad2      	subs	r2, r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <prvHeapInit+0xb4>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004824 <prvHeapInit+0xb8>)
 80047fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a09      	ldr	r2, [pc, #36]	@ (8004828 <prvHeapInit+0xbc>)
 8004802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004804:	4b09      	ldr	r3, [pc, #36]	@ (800482c <prvHeapInit+0xc0>)
 8004806:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800480a:	601a      	str	r2, [r3, #0]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	2000044c 	.word	0x2000044c
 800481c:	20001004 	.word	0x20001004
 8004820:	2000100c 	.word	0x2000100c
 8004824:	20001014 	.word	0x20001014
 8004828:	20001010 	.word	0x20001010
 800482c:	20001020 	.word	0x20001020

08004830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <prvInsertBlockIntoFreeList+0xac>)
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e002      	b.n	8004844 <prvInsertBlockIntoFreeList+0x14>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d8f7      	bhi.n	800483e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d108      	bne.n	8004872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	441a      	add	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d118      	bne.n	80048b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <prvInsertBlockIntoFreeList+0xb0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d00d      	beq.n	80048ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e008      	b.n	80048c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048ae:	4b0c      	ldr	r3, [pc, #48]	@ (80048e0 <prvInsertBlockIntoFreeList+0xb0>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e003      	b.n	80048c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d002      	beq.n	80048ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20001004 	.word	0x20001004
 80048e0:	2000100c 	.word	0x2000100c

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <__libc_init_array>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4d0d      	ldr	r5, [pc, #52]	@ (800492c <__libc_init_array+0x38>)
 80048f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004930 <__libc_init_array+0x3c>)
 80048fa:	1b64      	subs	r4, r4, r5
 80048fc:	10a4      	asrs	r4, r4, #2
 80048fe:	2600      	movs	r6, #0
 8004900:	42a6      	cmp	r6, r4
 8004902:	d109      	bne.n	8004918 <__libc_init_array+0x24>
 8004904:	4d0b      	ldr	r5, [pc, #44]	@ (8004934 <__libc_init_array+0x40>)
 8004906:	4c0c      	ldr	r4, [pc, #48]	@ (8004938 <__libc_init_array+0x44>)
 8004908:	f000 f818 	bl	800493c <_init>
 800490c:	1b64      	subs	r4, r4, r5
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	2600      	movs	r6, #0
 8004912:	42a6      	cmp	r6, r4
 8004914:	d105      	bne.n	8004922 <__libc_init_array+0x2e>
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	f855 3b04 	ldr.w	r3, [r5], #4
 800491c:	4798      	blx	r3
 800491e:	3601      	adds	r6, #1
 8004920:	e7ee      	b.n	8004900 <__libc_init_array+0xc>
 8004922:	f855 3b04 	ldr.w	r3, [r5], #4
 8004926:	4798      	blx	r3
 8004928:	3601      	adds	r6, #1
 800492a:	e7f2      	b.n	8004912 <__libc_init_array+0x1e>
 800492c:	08004a88 	.word	0x08004a88
 8004930:	08004a88 	.word	0x08004a88
 8004934:	08004a88 	.word	0x08004a88
 8004938:	08004a8c 	.word	0x08004a8c

0800493c <_init>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr

08004948 <_fini>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr
